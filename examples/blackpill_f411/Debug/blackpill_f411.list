
blackpill_f411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000663c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  080067dc  080067dc  000077dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a88  08006a88  00008178  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006a88  08006a88  00007a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a90  08006a90  00008178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a90  08006a90  00007a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a94  08006a94  00007a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000178  20000000  08006a98  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ea0  20000178  08006c10  00008178  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001018  08006c10  00009018  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008178  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b1a  00000000  00000000  000081a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bec  00000000  00000000  00020cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000ad74  00000000  00000000  000248ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001000  00000000  00000000  0002f628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000be5  00000000  00000000  00030628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a0cd  00000000  00000000  0003120d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000187f9  00000000  00000000  0004b2da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091b27  00000000  00000000  00063ad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f55fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003330  00000000  00000000  000f5640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  000f8970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000178 	.word	0x20000178
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080067c4 	.word	0x080067c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000017c 	.word	0x2000017c
 80001dc:	080067c4 	.word	0x080067c4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	2400      	movs	r4, #0
 80005e2:	9403      	str	r4, [sp, #12]
 80005e4:	9404      	str	r4, [sp, #16]
 80005e6:	9405      	str	r4, [sp, #20]
 80005e8:	9406      	str	r4, [sp, #24]
 80005ea:	9407      	str	r4, [sp, #28]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ec:	9400      	str	r4, [sp, #0]
 80005ee:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <MX_GPIO_Init+0x98>)
 80005f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005f2:	f042 0204 	orr.w	r2, r2, #4
 80005f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80005f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005fa:	f002 0204 	and.w	r2, r2, #4
 80005fe:	9200      	str	r2, [sp, #0]
 8000600:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000602:	9401      	str	r4, [sp, #4]
 8000604:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000606:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800060a:	631a      	str	r2, [r3, #48]	@ 0x30
 800060c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800060e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000612:	9201      	str	r2, [sp, #4]
 8000614:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	9402      	str	r4, [sp, #8]
 8000618:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800061a:	f042 0201 	orr.w	r2, r2, #1
 800061e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	9302      	str	r3, [sp, #8]
 8000628:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800062a:	4e13      	ldr	r6, [pc, #76]	@ (8000678 <MX_GPIO_Init+0x9c>)
 800062c:	2201      	movs	r2, #1
 800062e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000632:	4630      	mov	r0, r6
 8000634:	f000 ff6e 	bl	8001514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_SET);
 8000638:	4d10      	ldr	r5, [pc, #64]	@ (800067c <MX_GPIO_Init+0xa0>)
 800063a:	2201      	movs	r2, #1
 800063c:	2120      	movs	r1, #32
 800063e:	4628      	mov	r0, r5
 8000640:	f000 ff68 	bl	8001514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000644:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000648:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800064a:	2311      	movs	r3, #17
 800064c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000652:	a903      	add	r1, sp, #12
 8000654:	4630      	mov	r0, r6
 8000656:	f000 fe79 	bl	800134c <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_EN_Pin */
  GPIO_InitStruct.Pin = ESP_EN_Pin;
 800065a:	2320      	movs	r3, #32
 800065c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065e:	2301      	movs	r3, #1
 8000660:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(ESP_EN_GPIO_Port, &GPIO_InitStruct);
 8000666:	a903      	add	r1, sp, #12
 8000668:	4628      	mov	r0, r5
 800066a:	f000 fe6f 	bl	800134c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800066e:	b008      	add	sp, #32
 8000670:	bd70      	pop	{r4, r5, r6, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40020800 	.word	0x40020800
 800067c:	40020000 	.word	0x40020000

08000680 <MX_DMA_Init>:
{
 8000680:	b500      	push	{lr}
 8000682:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000684:	2100      	movs	r1, #0
 8000686:	9101      	str	r1, [sp, #4]
 8000688:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <MX_DMA_Init+0x30>)
 800068a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800068c:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000690:	631a      	str	r2, [r3, #48]	@ 0x30
 8000692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000694:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800069c:	460a      	mov	r2, r1
 800069e:	2010      	movs	r0, #16
 80006a0:	f000 fbca 	bl	8000e38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80006a4:	2010      	movs	r0, #16
 80006a6:	f000 fbd7 	bl	8000e58 <HAL_NVIC_EnableIRQ>
}
 80006aa:	b003      	add	sp, #12
 80006ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80006b0:	40023800 	.word	0x40023800

080006b4 <_write>:
    if (fd == 1 || fd == 2) {
 80006b4:	3801      	subs	r0, #1
 80006b6:	2801      	cmp	r0, #1
 80006b8:	d80a      	bhi.n	80006d0 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 80006ba:	b510      	push	{r4, lr}
 80006bc:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80006be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006c2:	b292      	uxth	r2, r2
 80006c4:	4805      	ldr	r0, [pc, #20]	@ (80006dc <_write+0x28>)
 80006c6:	f002 fb50 	bl	8002d6a <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 80006ca:	b920      	cbnz	r0, 80006d6 <_write+0x22>
            return len;
 80006cc:	4620      	mov	r0, r4
}
 80006ce:	bd10      	pop	{r4, pc}
    return -1;
 80006d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80006d4:	4770      	bx	lr
            return -1;
 80006d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80006da:	e7f8      	b.n	80006ce <_write+0x1a>
 80006dc:	20000284 	.word	0x20000284

080006e0 <HAL_UARTEx_RxEventCallback>:
    if (huart->Instance == USART2) {
 80006e0:	6802      	ldr	r2, [r0, #0]
 80006e2:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <HAL_UARTEx_RxEventCallback+0x3c>)
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d000      	beq.n	80006ea <HAL_UARTEx_RxEventCallback+0xa>
 80006e8:	4770      	bx	lr
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t offset) {
 80006ea:	b510      	push	{r4, lr}
 80006ec:	460c      	mov	r4, r1
        if (offset != last_offset) {
 80006ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <HAL_UARTEx_RxEventCallback+0x40>)
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	428b      	cmp	r3, r1
 80006f4:	d011      	beq.n	800071a <HAL_UARTEx_RxEventCallback+0x3a>
            if (offset < last_offset)
 80006f6:	d90c      	bls.n	8000712 <HAL_UARTEx_RxEventCallback+0x32>
                last_offset = 0;
 80006f8:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <HAL_UARTEx_RxEventCallback+0x40>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	801a      	strh	r2, [r3, #0]
 80006fe:	e008      	b.n	8000712 <HAL_UARTEx_RxEventCallback+0x32>
                esp01_receive(&esp01, (char) dmabuf[last_offset]);
 8000700:	4a08      	ldr	r2, [pc, #32]	@ (8000724 <HAL_UARTEx_RxEventCallback+0x44>)
 8000702:	5cd1      	ldrb	r1, [r2, r3]
 8000704:	4808      	ldr	r0, [pc, #32]	@ (8000728 <HAL_UARTEx_RxEventCallback+0x48>)
 8000706:	f004 fea3 	bl	8005450 <esp01_receive>
                ++last_offset;
 800070a:	4a05      	ldr	r2, [pc, #20]	@ (8000720 <HAL_UARTEx_RxEventCallback+0x40>)
 800070c:	8813      	ldrh	r3, [r2, #0]
 800070e:	3301      	adds	r3, #1
 8000710:	8013      	strh	r3, [r2, #0]
            while (last_offset < offset) {
 8000712:	4b03      	ldr	r3, [pc, #12]	@ (8000720 <HAL_UARTEx_RxEventCallback+0x40>)
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	42a3      	cmp	r3, r4
 8000718:	d3f2      	bcc.n	8000700 <HAL_UARTEx_RxEventCallback+0x20>
}
 800071a:	bd10      	pop	{r4, pc}
 800071c:	40004400 	.word	0x40004400
 8000720:	20000194 	.word	0x20000194
 8000724:	20000198 	.word	0x20000198
 8000728:	200001d8 	.word	0x200001d8

0800072c <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800072c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 800072e:	e7fe      	b.n	800072e <Error_Handler+0x2>

08000730 <MX_USART1_UART_Init>:
{
 8000730:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000732:	480a      	ldr	r0, [pc, #40]	@ (800075c <MX_USART1_UART_Init+0x2c>)
 8000734:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <MX_USART1_UART_Init+0x30>)
 8000736:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 2000000;
 8000738:	4b0a      	ldr	r3, [pc, #40]	@ (8000764 <MX_USART1_UART_Init+0x34>)
 800073a:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073c:	2300      	movs	r3, #0
 800073e:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000740:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000742:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000744:	220c      	movs	r2, #12
 8000746:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000748:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 800074a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800074e:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000750:	f002 fadb 	bl	8002d0a <HAL_UART_Init>
 8000754:	b900      	cbnz	r0, 8000758 <MX_USART1_UART_Init+0x28>
}
 8000756:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000758:	f7ff ffe8 	bl	800072c <Error_Handler>
 800075c:	20000284 	.word	0x20000284
 8000760:	40011000 	.word	0x40011000
 8000764:	001e8480 	.word	0x001e8480

08000768 <MX_USART2_UART_Init>:
{
 8000768:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 800076a:	480a      	ldr	r0, [pc, #40]	@ (8000794 <MX_USART2_UART_Init+0x2c>)
 800076c:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <MX_USART2_UART_Init+0x30>)
 800076e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000770:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000774:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	2300      	movs	r3, #0
 8000778:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800077a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800077e:	220c      	movs	r2, #12
 8000780:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000786:	f002 fac0 	bl	8002d0a <HAL_UART_Init>
 800078a:	b900      	cbnz	r0, 800078e <MX_USART2_UART_Init+0x26>
}
 800078c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800078e:	f7ff ffcd 	bl	800072c <Error_Handler>
 8000792:	bf00      	nop
 8000794:	2000023c 	.word	0x2000023c
 8000798:	40004400 	.word	0x40004400

0800079c <MX_RTC_Init>:
{
 800079c:	b508      	push	{r3, lr}
  hrtc.Instance = RTC;
 800079e:	4809      	ldr	r0, [pc, #36]	@ (80007c4 <MX_RTC_Init+0x28>)
 80007a0:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <MX_RTC_Init+0x2c>)
 80007a2:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007a4:	2300      	movs	r3, #0
 80007a6:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007a8:	227f      	movs	r2, #127	@ 0x7f
 80007aa:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80007ac:	22ff      	movs	r2, #255	@ 0xff
 80007ae:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007b0:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007b2:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007b4:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007b6:	f002 f91f 	bl	80029f8 <HAL_RTC_Init>
 80007ba:	b900      	cbnz	r0, 80007be <MX_RTC_Init+0x22>
}
 80007bc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80007be:	f7ff ffb5 	bl	800072c <Error_Handler>
 80007c2:	bf00      	nop
 80007c4:	200002cc 	.word	0x200002cc
 80007c8:	40002800 	.word	0x40002800

080007cc <SystemClock_Config>:
{
 80007cc:	b500      	push	{lr}
 80007ce:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d0:	2230      	movs	r2, #48	@ 0x30
 80007d2:	2100      	movs	r1, #0
 80007d4:	a808      	add	r0, sp, #32
 80007d6:	f005 f881 	bl	80058dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007da:	2300      	movs	r3, #0
 80007dc:	9303      	str	r3, [sp, #12]
 80007de:	9304      	str	r3, [sp, #16]
 80007e0:	9305      	str	r3, [sp, #20]
 80007e2:	9306      	str	r3, [sp, #24]
 80007e4:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	9301      	str	r3, [sp, #4]
 80007e8:	4a20      	ldr	r2, [pc, #128]	@ (800086c <SystemClock_Config+0xa0>)
 80007ea:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80007ec:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80007f0:	6411      	str	r1, [r2, #64]	@ 0x40
 80007f2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80007f4:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80007f8:	9201      	str	r2, [sp, #4]
 80007fa:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007fc:	9302      	str	r3, [sp, #8]
 80007fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000870 <SystemClock_Config+0xa4>)
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800080e:	9302      	str	r3, [sp, #8]
 8000810:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000812:	2305      	movs	r3, #5
 8000814:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000816:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800081a:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800081c:	2301      	movs	r3, #1
 800081e:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000820:	2302      	movs	r3, #2
 8000822:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000824:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000828:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800082a:	2219      	movs	r2, #25
 800082c:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800082e:	22c0      	movs	r2, #192	@ 0xc0
 8000830:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000832:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000834:	2304      	movs	r3, #4
 8000836:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000838:	a808      	add	r0, sp, #32
 800083a:	f001 fcad 	bl	8002198 <HAL_RCC_OscConfig>
 800083e:	b988      	cbnz	r0, 8000864 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000840:	230f      	movs	r3, #15
 8000842:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000844:	2302      	movs	r3, #2
 8000846:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800084c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000850:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000852:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000854:	2103      	movs	r1, #3
 8000856:	a803      	add	r0, sp, #12
 8000858:	f001 feee 	bl	8002638 <HAL_RCC_ClockConfig>
 800085c:	b920      	cbnz	r0, 8000868 <SystemClock_Config+0x9c>
}
 800085e:	b015      	add	sp, #84	@ 0x54
 8000860:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000864:	f7ff ff62 	bl	800072c <Error_Handler>
    Error_Handler();
 8000868:	f7ff ff60 	bl	800072c <Error_Handler>
 800086c:	40023800 	.word	0x40023800
 8000870:	40007000 	.word	0x40007000

08000874 <main>:
{
 8000874:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 8000876:	f000 fa4b 	bl	8000d10 <HAL_Init>
  SystemClock_Config();
 800087a:	f7ff ffa7 	bl	80007cc <SystemClock_Config>
  MX_GPIO_Init();
 800087e:	f7ff fead 	bl	80005dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000882:	f7ff fefd 	bl	8000680 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000886:	f7ff ff53 	bl	8000730 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800088a:	f7ff ff6d 	bl	8000768 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800088e:	f004 fa59 	bl	8004d44 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8000892:	f7ff ff83 	bl	800079c <MX_RTC_Init>
    printf("\n\n\n------------------\nStarting WiFi Demo\n");
 8000896:	4840      	ldr	r0, [pc, #256]	@ (8000998 <main+0x124>)
 8000898:	f004 ff1e 	bl	80056d8 <puts>
    HAL_Delay(100);
 800089c:	2064      	movs	r0, #100	@ 0x64
 800089e:	f000 fa63 	bl	8000d68 <HAL_Delay>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t*) &dmabuf, DMA_BUFFER_SIZE);
 80008a2:	4c3e      	ldr	r4, [pc, #248]	@ (800099c <main+0x128>)
 80008a4:	2240      	movs	r2, #64	@ 0x40
 80008a6:	493e      	ldr	r1, [pc, #248]	@ (80009a0 <main+0x12c>)
 80008a8:	4620      	mov	r0, r4
 80008aa:	f002 fd6d 	bl	8003388 <HAL_UARTEx_ReceiveToIdle_DMA>
    HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_SET); // Power up the esp-01
 80008ae:	2201      	movs	r2, #1
 80008b0:	2120      	movs	r1, #32
 80008b2:	483c      	ldr	r0, [pc, #240]	@ (80009a4 <main+0x130>)
 80008b4:	f000 fe2e 	bl	8001514 <HAL_GPIO_WritePin>
    HAL_Delay(500); // Wait for the darn thing to reboot
 80008b8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008bc:	f000 fa54 	bl	8000d68 <HAL_Delay>
    printf("Initialising WiFi\n");
 80008c0:	4839      	ldr	r0, [pc, #228]	@ (80009a8 <main+0x134>)
 80008c2:	f004 ff09 	bl	80056d8 <puts>
    if (esp01_init(&esp01, &huart2) != ESP01_OK) {
 80008c6:	4621      	mov	r1, r4
 80008c8:	4838      	ldr	r0, [pc, #224]	@ (80009ac <main+0x138>)
 80008ca:	f004 fd79 	bl	80053c0 <esp01_init>
 80008ce:	bb88      	cbnz	r0, 8000934 <main+0xc0>
    printf("Setting Wifi Mode\n");
 80008d0:	4837      	ldr	r0, [pc, #220]	@ (80009b0 <main+0x13c>)
 80008d2:	f004 ff01 	bl	80056d8 <puts>
    if (esp01_set_wifi_mode(&esp01, ESP01_WIFI_MODE_STA) != ESP01_OK) {
 80008d6:	2101      	movs	r1, #1
 80008d8:	4834      	ldr	r0, [pc, #208]	@ (80009ac <main+0x138>)
 80008da:	f004 fcb5 	bl	8005248 <esp01_set_wifi_mode>
 80008de:	bb68      	cbnz	r0, 800093c <main+0xc8>
    printf("Configure NTP\n");
 80008e0:	4834      	ldr	r0, [pc, #208]	@ (80009b4 <main+0x140>)
 80008e2:	f004 fef9 	bl	80056d8 <puts>
    if (esp01_set_ntp(&esp01, ESP01_SNTP_ENABLED, 8, "pool.ntp.org") != ESP01_OK) {
 80008e6:	4b34      	ldr	r3, [pc, #208]	@ (80009b8 <main+0x144>)
 80008e8:	2208      	movs	r2, #8
 80008ea:	2101      	movs	r1, #1
 80008ec:	482f      	ldr	r0, [pc, #188]	@ (80009ac <main+0x138>)
 80008ee:	f004 fd05 	bl	80052fc <esp01_set_ntp>
 80008f2:	bb38      	cbnz	r0, 8000944 <main+0xd0>
    HAL_Delay(500);
 80008f4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008f8:	f000 fa36 	bl	8000d68 <HAL_Delay>
    printf("Connect to Wifi\n");
 80008fc:	482f      	ldr	r0, [pc, #188]	@ (80009bc <main+0x148>)
 80008fe:	f004 feeb 	bl	80056d8 <puts>
    if (esp01_wifi_connect(&esp01, "stm32", "STM32Secret") != ESP01_OK) {
 8000902:	4a2f      	ldr	r2, [pc, #188]	@ (80009c0 <main+0x14c>)
 8000904:	492f      	ldr	r1, [pc, #188]	@ (80009c4 <main+0x150>)
 8000906:	4829      	ldr	r0, [pc, #164]	@ (80009ac <main+0x138>)
 8000908:	f004 fcca 	bl	80052a0 <esp01_wifi_connect>
 800090c:	b9f0      	cbnz	r0, 800094c <main+0xd8>
    HAL_Delay(5000);
 800090e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000912:	f000 fa29 	bl	8000d68 <HAL_Delay>
    printf("Get time\n");
 8000916:	482c      	ldr	r0, [pc, #176]	@ (80009c8 <main+0x154>)
 8000918:	f004 fede 	bl	80056d8 <puts>
    if (esp01_get_ntp_time(&esp01) != ESP01_OK) {
 800091c:	4823      	ldr	r0, [pc, #140]	@ (80009ac <main+0x138>)
 800091e:	f004 fd1f 	bl	8005360 <esp01_get_ntp_time>
 8000922:	b9b8      	cbnz	r0, 8000954 <main+0xe0>
    printf("Done\n");
 8000924:	4829      	ldr	r0, [pc, #164]	@ (80009cc <main+0x158>)
 8000926:	f004 fed7 	bl	80056d8 <puts>
    uint32_t now = 0, next_blink = 500, next_time = 10000;
 800092a:	f242 7510 	movw	r5, #10000	@ 0x2710
 800092e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8000932:	e01e      	b.n	8000972 <main+0xfe>
        printf("Error initialising WiFi\n");
 8000934:	4826      	ldr	r0, [pc, #152]	@ (80009d0 <main+0x15c>)
 8000936:	f004 fecf 	bl	80056d8 <puts>
 800093a:	e7c9      	b.n	80008d0 <main+0x5c>
        printf("Failed\n");
 800093c:	4825      	ldr	r0, [pc, #148]	@ (80009d4 <main+0x160>)
 800093e:	f004 fecb 	bl	80056d8 <puts>
 8000942:	e7cd      	b.n	80008e0 <main+0x6c>
        printf("Failed\n");
 8000944:	4823      	ldr	r0, [pc, #140]	@ (80009d4 <main+0x160>)
 8000946:	f004 fec7 	bl	80056d8 <puts>
 800094a:	e7d3      	b.n	80008f4 <main+0x80>
        printf("Failed\n");
 800094c:	4821      	ldr	r0, [pc, #132]	@ (80009d4 <main+0x160>)
 800094e:	f004 fec3 	bl	80056d8 <puts>
 8000952:	e7dc      	b.n	800090e <main+0x9a>
        printf("Failed\n");
 8000954:	481f      	ldr	r0, [pc, #124]	@ (80009d4 <main+0x160>)
 8000956:	f004 febf 	bl	80056d8 <puts>
 800095a:	e7e3      	b.n	8000924 <main+0xb0>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800095c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000960:	481d      	ldr	r0, [pc, #116]	@ (80009d8 <main+0x164>)
 8000962:	f000 fddd 	bl	8001520 <HAL_GPIO_TogglePin>
            next_blink = now + 500;
 8000966:	f504 76fa 	add.w	r6, r4, #500	@ 0x1f4
 800096a:	e006      	b.n	800097a <main+0x106>
            next_time = now + 10000;
 800096c:	f504 551c 	add.w	r5, r4, #9984	@ 0x2700
 8000970:	3510      	adds	r5, #16
        now = uwTick;
 8000972:	4b1a      	ldr	r3, [pc, #104]	@ (80009dc <main+0x168>)
 8000974:	681c      	ldr	r4, [r3, #0]
        if (now >= next_blink) {
 8000976:	42a6      	cmp	r6, r4
 8000978:	d9f0      	bls.n	800095c <main+0xe8>
        if (now >= next_time) {
 800097a:	42a5      	cmp	r5, r4
 800097c:	d8f9      	bhi.n	8000972 <main+0xfe>
            printf("Get time\n");
 800097e:	4812      	ldr	r0, [pc, #72]	@ (80009c8 <main+0x154>)
 8000980:	f004 feaa 	bl	80056d8 <puts>
            if (esp01_get_ntp_time(&esp01) != ESP01_OK) {
 8000984:	4809      	ldr	r0, [pc, #36]	@ (80009ac <main+0x138>)
 8000986:	f004 fceb 	bl	8005360 <esp01_get_ntp_time>
 800098a:	2800      	cmp	r0, #0
 800098c:	d0ee      	beq.n	800096c <main+0xf8>
                printf("Failed\n");
 800098e:	4811      	ldr	r0, [pc, #68]	@ (80009d4 <main+0x160>)
 8000990:	f004 fea2 	bl	80056d8 <puts>
 8000994:	e7ea      	b.n	800096c <main+0xf8>
 8000996:	bf00      	nop
 8000998:	080067dc 	.word	0x080067dc
 800099c:	2000023c 	.word	0x2000023c
 80009a0:	20000198 	.word	0x20000198
 80009a4:	40020000 	.word	0x40020000
 80009a8:	08006808 	.word	0x08006808
 80009ac:	200001d8 	.word	0x200001d8
 80009b0:	08006834 	.word	0x08006834
 80009b4:	08006850 	.word	0x08006850
 80009b8:	08006860 	.word	0x08006860
 80009bc:	08006870 	.word	0x08006870
 80009c0:	08006880 	.word	0x08006880
 80009c4:	0800688c 	.word	0x0800688c
 80009c8:	08006894 	.word	0x08006894
 80009cc:	080068a0 	.word	0x080068a0
 80009d0:	0800681c 	.word	0x0800681c
 80009d4:	08006848 	.word	0x08006848
 80009d8:	40020800 	.word	0x40020800
 80009dc:	200002f0 	.word	0x200002f0

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	2100      	movs	r1, #0
 80009e4:	9100      	str	r1, [sp, #0]
 80009e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <HAL_MspInit+0x34>)
 80009e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80009ee:	645a      	str	r2, [r3, #68]	@ 0x44
 80009f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009f2:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80009f6:	9200      	str	r2, [sp, #0]
 80009f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	9101      	str	r1, [sp, #4]
 80009fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009fe:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000a02:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a0a:	9301      	str	r3, [sp, #4]
 8000a0c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0e:	b002      	add	sp, #8
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a18:	b500      	push	{lr}
 8000a1a:	b087      	sub	sp, #28
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	9301      	str	r3, [sp, #4]
 8000a22:	9302      	str	r3, [sp, #8]
 8000a24:	9303      	str	r3, [sp, #12]
 8000a26:	9304      	str	r3, [sp, #16]
 8000a28:	9305      	str	r3, [sp, #20]
  if(hrtc->Instance==RTC)
 8000a2a:	6802      	ldr	r2, [r0, #0]
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <HAL_RTC_MspInit+0x44>)
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d002      	beq.n	8000a38 <HAL_RTC_MspInit+0x20>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000a32:	b007      	add	sp, #28
 8000a34:	f85d fb04 	ldr.w	pc, [sp], #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	9300      	str	r3, [sp, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000a3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a40:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a42:	4668      	mov	r0, sp
 8000a44:	f001 fece 	bl	80027e4 <HAL_RCCEx_PeriphCLKConfig>
 8000a48:	b920      	cbnz	r0, 8000a54 <HAL_RTC_MspInit+0x3c>
    __HAL_RCC_RTC_ENABLE();
 8000a4a:	4b05      	ldr	r3, [pc, #20]	@ (8000a60 <HAL_RTC_MspInit+0x48>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	f8c3 2e3c 	str.w	r2, [r3, #3644]	@ 0xe3c
}
 8000a52:	e7ee      	b.n	8000a32 <HAL_RTC_MspInit+0x1a>
      Error_Handler();
 8000a54:	f7ff fe6a 	bl	800072c <Error_Handler>
 8000a58:	e7f7      	b.n	8000a4a <HAL_RTC_MspInit+0x32>
 8000a5a:	bf00      	nop
 8000a5c:	40002800 	.word	0x40002800
 8000a60:	42470000 	.word	0x42470000

08000a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a64:	b530      	push	{r4, r5, lr}
 8000a66:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	2300      	movs	r3, #0
 8000a6a:	9305      	str	r3, [sp, #20]
 8000a6c:	9306      	str	r3, [sp, #24]
 8000a6e:	9307      	str	r3, [sp, #28]
 8000a70:	9308      	str	r3, [sp, #32]
 8000a72:	9309      	str	r3, [sp, #36]	@ 0x24
  if(huart->Instance==USART1)
 8000a74:	6803      	ldr	r3, [r0, #0]
 8000a76:	4a3d      	ldr	r2, [pc, #244]	@ (8000b6c <HAL_UART_MspInit+0x108>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d005      	beq.n	8000a88 <HAL_UART_MspInit+0x24>
 8000a7c:	4604      	mov	r4, r0
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8000a7e:	4a3c      	ldr	r2, [pc, #240]	@ (8000b70 <HAL_UART_MspInit+0x10c>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d02d      	beq.n	8000ae0 <HAL_UART_MspInit+0x7c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a84:	b00b      	add	sp, #44	@ 0x2c
 8000a86:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a88:	2400      	movs	r4, #0
 8000a8a:	9401      	str	r4, [sp, #4]
 8000a8c:	4b39      	ldr	r3, [pc, #228]	@ (8000b74 <HAL_UART_MspInit+0x110>)
 8000a8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a90:	f042 0210 	orr.w	r2, r2, #16
 8000a94:	645a      	str	r2, [r3, #68]	@ 0x44
 8000a96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a98:	f002 0210 	and.w	r2, r2, #16
 8000a9c:	9201      	str	r2, [sp, #4]
 8000a9e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa0:	9402      	str	r4, [sp, #8]
 8000aa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000aa4:	f042 0201 	orr.w	r2, r2, #1
 8000aa8:	631a      	str	r2, [r3, #48]	@ 0x30
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	9302      	str	r3, [sp, #8]
 8000ab2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ab4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ab8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ac2:	2307      	movs	r3, #7
 8000ac4:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	a905      	add	r1, sp, #20
 8000ac8:	482b      	ldr	r0, [pc, #172]	@ (8000b78 <HAL_UART_MspInit+0x114>)
 8000aca:	f000 fc3f 	bl	800134c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ace:	4622      	mov	r2, r4
 8000ad0:	4621      	mov	r1, r4
 8000ad2:	2025      	movs	r0, #37	@ 0x25
 8000ad4:	f000 f9b0 	bl	8000e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ad8:	2025      	movs	r0, #37	@ 0x25
 8000ada:	f000 f9bd 	bl	8000e58 <HAL_NVIC_EnableIRQ>
 8000ade:	e7d1      	b.n	8000a84 <HAL_UART_MspInit+0x20>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ae0:	2500      	movs	r5, #0
 8000ae2:	9503      	str	r5, [sp, #12]
 8000ae4:	4b23      	ldr	r3, [pc, #140]	@ (8000b74 <HAL_UART_MspInit+0x110>)
 8000ae6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ae8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000aec:	641a      	str	r2, [r3, #64]	@ 0x40
 8000aee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000af0:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8000af4:	9203      	str	r2, [sp, #12]
 8000af6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af8:	9504      	str	r5, [sp, #16]
 8000afa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000afc:	f042 0201 	orr.w	r2, r2, #1
 8000b00:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	9304      	str	r3, [sp, #16]
 8000b0a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b0c:	230c      	movs	r3, #12
 8000b0e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b18:	2307      	movs	r3, #7
 8000b1a:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	a905      	add	r1, sp, #20
 8000b1e:	4816      	ldr	r0, [pc, #88]	@ (8000b78 <HAL_UART_MspInit+0x114>)
 8000b20:	f000 fc14 	bl	800134c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000b24:	4815      	ldr	r0, [pc, #84]	@ (8000b7c <HAL_UART_MspInit+0x118>)
 8000b26:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <HAL_UART_MspInit+0x11c>)
 8000b28:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000b2a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b2e:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b30:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b32:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b38:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b3a:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b3c:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000b3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b42:	61c3      	str	r3, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b44:	6205      	str	r5, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b46:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b48:	f000 fa1a 	bl	8000f80 <HAL_DMA_Init>
 8000b4c:	b958      	cbnz	r0, 8000b66 <HAL_UART_MspInit+0x102>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b7c <HAL_UART_MspInit+0x118>)
 8000b50:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8000b52:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	4611      	mov	r1, r2
 8000b58:	2026      	movs	r0, #38	@ 0x26
 8000b5a:	f000 f96d 	bl	8000e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b5e:	2026      	movs	r0, #38	@ 0x26
 8000b60:	f000 f97a 	bl	8000e58 <HAL_NVIC_EnableIRQ>
}
 8000b64:	e78e      	b.n	8000a84 <HAL_UART_MspInit+0x20>
      Error_Handler();
 8000b66:	f7ff fde1 	bl	800072c <Error_Handler>
 8000b6a:	e7f0      	b.n	8000b4e <HAL_UART_MspInit+0xea>
 8000b6c:	40011000 	.word	0x40011000
 8000b70:	40004400 	.word	0x40004400
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	200001dc 	.word	0x200001dc
 8000b80:	40026088 	.word	0x40026088

08000b84 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b84:	e7fe      	b.n	8000b84 <NMI_Handler>

08000b86 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <HardFault_Handler>

08000b88 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <MemManage_Handler>

08000b8a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <BusFault_Handler>

08000b8c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler>

08000b8e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8e:	4770      	bx	lr

08000b90 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b90:	4770      	bx	lr

08000b92 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b92:	4770      	bx	lr

08000b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b96:	f000 f8d5 	bl	8000d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9a:	bd08      	pop	{r3, pc}

08000b9c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000b9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b9e:	4802      	ldr	r0, [pc, #8]	@ (8000ba8 <DMA1_Stream5_IRQHandler+0xc>)
 8000ba0:	f000 fae6 	bl	8001170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000ba4:	bd08      	pop	{r3, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200001dc 	.word	0x200001dc

08000bac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bae:	4802      	ldr	r0, [pc, #8]	@ (8000bb8 <USART1_IRQHandler+0xc>)
 8000bb0:	f002 f9fa 	bl	8002fa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bb4:	bd08      	pop	{r3, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000284 	.word	0x20000284

08000bbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bbc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bbe:	4802      	ldr	r0, [pc, #8]	@ (8000bc8 <USART2_IRQHandler+0xc>)
 8000bc0:	f002 f9f2 	bl	8002fa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bc4:	bd08      	pop	{r3, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2000023c 	.word	0x2000023c

08000bcc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bcc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bce:	4802      	ldr	r0, [pc, #8]	@ (8000bd8 <OTG_FS_IRQHandler+0xc>)
 8000bd0:	f000 ffd6 	bl	8001b80 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bd4:	bd08      	pop	{r3, pc}
 8000bd6:	bf00      	nop
 8000bd8:	200007e8 	.word	0x200007e8

08000bdc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bdc:	b570      	push	{r4, r5, r6, lr}
 8000bde:	460c      	mov	r4, r1
 8000be0:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be2:	2500      	movs	r5, #0
 8000be4:	e006      	b.n	8000bf4 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000be6:	f3af 8000 	nop.w
 8000bea:	4621      	mov	r1, r4
 8000bec:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf0:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000bf2:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf4:	42b5      	cmp	r5, r6
 8000bf6:	dbf6      	blt.n	8000be6 <_read+0xa>
  }

  return len;
}
 8000bf8:	4630      	mov	r0, r6
 8000bfa:	bd70      	pop	{r4, r5, r6, pc}

08000bfc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c00:	4770      	bx	lr

08000c02 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000c02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c06:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000c08:	2000      	movs	r0, #0
 8000c0a:	4770      	bx	lr

08000c0c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	4770      	bx	lr

08000c10 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000c10:	2000      	movs	r0, #0
 8000c12:	4770      	bx	lr

08000c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c14:	b510      	push	{r4, lr}
 8000c16:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c18:	4a0c      	ldr	r2, [pc, #48]	@ (8000c4c <_sbrk+0x38>)
 8000c1a:	490d      	ldr	r1, [pc, #52]	@ (8000c50 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c1c:	480d      	ldr	r0, [pc, #52]	@ (8000c54 <_sbrk+0x40>)
 8000c1e:	6800      	ldr	r0, [r0, #0]
 8000c20:	b140      	cbz	r0, 8000c34 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c22:	480c      	ldr	r0, [pc, #48]	@ (8000c54 <_sbrk+0x40>)
 8000c24:	6800      	ldr	r0, [r0, #0]
 8000c26:	4403      	add	r3, r0
 8000c28:	1a52      	subs	r2, r2, r1
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d806      	bhi.n	8000c3c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000c2e:	4a09      	ldr	r2, [pc, #36]	@ (8000c54 <_sbrk+0x40>)
 8000c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000c32:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000c34:	4807      	ldr	r0, [pc, #28]	@ (8000c54 <_sbrk+0x40>)
 8000c36:	4c08      	ldr	r4, [pc, #32]	@ (8000c58 <_sbrk+0x44>)
 8000c38:	6004      	str	r4, [r0, #0]
 8000c3a:	e7f2      	b.n	8000c22 <_sbrk+0xe>
    errno = ENOMEM;
 8000c3c:	f004 fed8 	bl	80059f0 <__errno>
 8000c40:	230c      	movs	r3, #12
 8000c42:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c48:	e7f3      	b.n	8000c32 <_sbrk+0x1e>
 8000c4a:	bf00      	nop
 8000c4c:	20020000 	.word	0x20020000
 8000c50:	00000400 	.word	0x00000400
 8000c54:	200002ec 	.word	0x200002ec
 8000c58:	20001018 	.word	0x20001018

08000c5c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c5c:	4a03      	ldr	r2, [pc, #12]	@ (8000c6c <SystemInit+0x10>)
 8000c5e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000c62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c66:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ca8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c74:	f7ff fff2 	bl	8000c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c78:	480c      	ldr	r0, [pc, #48]	@ (8000cac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c7a:	490d      	ldr	r1, [pc, #52]	@ (8000cb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c90:	4c0a      	ldr	r4, [pc, #40]	@ (8000cbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f004 fead 	bl	80059fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca2:	f7ff fde7 	bl	8000874 <main>
  bx  lr    
 8000ca6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ca8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8000cb4:	08006a98 	.word	0x08006a98
  ldr r2, =_sbss
 8000cb8:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8000cbc:	20001018 	.word	0x20001018

08000cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC_IRQHandler>
	...

08000cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc4:	b510      	push	{r4, lr}
 8000cc6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d04 <HAL_InitTick+0x40>)
 8000cca:	781a      	ldrb	r2, [r3, #0]
 8000ccc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000cd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000d08 <HAL_InitTick+0x44>)
 8000cd6:	6810      	ldr	r0, [r2, #0]
 8000cd8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cdc:	f000 f8c0 	bl	8000e60 <HAL_SYSTICK_Config>
 8000ce0:	b968      	cbnz	r0, 8000cfe <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce2:	2c0f      	cmp	r4, #15
 8000ce4:	d901      	bls.n	8000cea <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	e00a      	b.n	8000d00 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cea:	2200      	movs	r2, #0
 8000cec:	4621      	mov	r1, r4
 8000cee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cf2:	f000 f8a1 	bl	8000e38 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf6:	4b05      	ldr	r3, [pc, #20]	@ (8000d0c <HAL_InitTick+0x48>)
 8000cf8:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	e000      	b.n	8000d00 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000cfe:	2001      	movs	r0, #1
}
 8000d00:	bd10      	pop	{r4, pc}
 8000d02:	bf00      	nop
 8000d04:	20000004 	.word	0x20000004
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	20000008 	.word	0x20000008

08000d10 <HAL_Init>:
{
 8000d10:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d12:	4b0b      	ldr	r3, [pc, #44]	@ (8000d40 <HAL_Init+0x30>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000d1a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000d22:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000d2a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 f871 	bl	8000e14 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d32:	200f      	movs	r0, #15
 8000d34:	f7ff ffc6 	bl	8000cc4 <HAL_InitTick>
  HAL_MspInit();
 8000d38:	f7ff fe52 	bl	80009e0 <HAL_MspInit>
}
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	bd08      	pop	{r3, pc}
 8000d40:	40023c00 	.word	0x40023c00

08000d44 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d44:	4a03      	ldr	r2, [pc, #12]	@ (8000d54 <HAL_IncTick+0x10>)
 8000d46:	6811      	ldr	r1, [r2, #0]
 8000d48:	4b03      	ldr	r3, [pc, #12]	@ (8000d58 <HAL_IncTick+0x14>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	440b      	add	r3, r1
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	200002f0 	.word	0x200002f0
 8000d58:	20000004 	.word	0x20000004

08000d5c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d5c:	4b01      	ldr	r3, [pc, #4]	@ (8000d64 <HAL_GetTick+0x8>)
 8000d5e:	6818      	ldr	r0, [r3, #0]
}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	200002f0 	.word	0x200002f0

08000d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d6c:	f7ff fff6 	bl	8000d5c <HAL_GetTick>
 8000d70:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d72:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8000d76:	d002      	beq.n	8000d7e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d78:	4b04      	ldr	r3, [pc, #16]	@ (8000d8c <HAL_Delay+0x24>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d7e:	f7ff ffed 	bl	8000d5c <HAL_GetTick>
 8000d82:	1b40      	subs	r0, r0, r5
 8000d84:	42a0      	cmp	r0, r4
 8000d86:	d3fa      	bcc.n	8000d7e <HAL_Delay+0x16>
  {
  }
}
 8000d88:	bd38      	pop	{r3, r4, r5, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000004 	.word	0x20000004

08000d90 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000d90:	2800      	cmp	r0, #0
 8000d92:	db07      	blt.n	8000da4 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d94:	f000 021f 	and.w	r2, r0, #31
 8000d98:	0940      	lsrs	r0, r0, #5
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	4093      	lsls	r3, r2
 8000d9e:	4a02      	ldr	r2, [pc, #8]	@ (8000da8 <__NVIC_EnableIRQ+0x18>)
 8000da0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000e100 	.word	0xe000e100

08000dac <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000dac:	2800      	cmp	r0, #0
 8000dae:	db08      	blt.n	8000dc2 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	0109      	lsls	r1, r1, #4
 8000db2:	b2c9      	uxtb	r1, r1
 8000db4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000db8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000dbc:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000dc0:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc2:	f000 000f 	and.w	r0, r0, #15
 8000dc6:	0109      	lsls	r1, r1, #4
 8000dc8:	b2c9      	uxtb	r1, r1
 8000dca:	4b01      	ldr	r3, [pc, #4]	@ (8000dd0 <__NVIC_SetPriority+0x24>)
 8000dcc:	5419      	strb	r1, [r3, r0]
  }
}
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed14 	.word	0xe000ed14

08000dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd4:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd6:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dda:	f1c0 0c07 	rsb	ip, r0, #7
 8000dde:	f1bc 0f04 	cmp.w	ip, #4
 8000de2:	bf28      	it	cs
 8000de4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de8:	1d03      	adds	r3, r0, #4
 8000dea:	2b06      	cmp	r3, #6
 8000dec:	d90f      	bls.n	8000e0e <NVIC_EncodePriority+0x3a>
 8000dee:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000df4:	fa0e f00c 	lsl.w	r0, lr, ip
 8000df8:	ea21 0100 	bic.w	r1, r1, r0
 8000dfc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfe:	fa0e fe03 	lsl.w	lr, lr, r3
 8000e02:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000e06:	ea41 0002 	orr.w	r0, r1, r2
 8000e0a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e7ee      	b.n	8000df0 <NVIC_EncodePriority+0x1c>
	...

08000e14 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4a07      	ldr	r2, [pc, #28]	@ (8000e34 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e16:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e18:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000e1c:	041b      	lsls	r3, r3, #16
 8000e1e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e20:	0200      	lsls	r0, r0, #8
 8000e22:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e26:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000e28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000e30:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e38:	b510      	push	{r4, lr}
 8000e3a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e3c:	4b05      	ldr	r3, [pc, #20]	@ (8000e54 <HAL_NVIC_SetPriority+0x1c>)
 8000e3e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e40:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000e44:	f7ff ffc6 	bl	8000dd4 <NVIC_EncodePriority>
 8000e48:	4601      	mov	r1, r0
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	f7ff ffae 	bl	8000dac <__NVIC_SetPriority>
}
 8000e50:	bd10      	pop	{r4, pc}
 8000e52:	bf00      	nop
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e58:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5a:	f7ff ff99 	bl	8000d90 <__NVIC_EnableIRQ>
}
 8000e5e:	bd08      	pop	{r3, pc}

08000e60 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e60:	3801      	subs	r0, #1
 8000e62:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000e66:	d20b      	bcs.n	8000e80 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e68:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000e6c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6e:	4a05      	ldr	r2, [pc, #20]	@ (8000e84 <HAL_SYSTICK_Config+0x24>)
 8000e70:	21f0      	movs	r1, #240	@ 0xf0
 8000e72:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e76:	2000      	movs	r0, #0
 8000e78:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7a:	2207      	movs	r2, #7
 8000e7c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e7e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e80:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e88:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000e8a:	6805      	ldr	r5, [r0, #0]
 8000e8c:	682c      	ldr	r4, [r5, #0]
 8000e8e:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8000e92:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000e94:	6804      	ldr	r4, [r0, #0]
 8000e96:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e98:	6883      	ldr	r3, [r0, #8]
 8000e9a:	2b40      	cmp	r3, #64	@ 0x40
 8000e9c:	d005      	beq.n	8000eaa <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000e9e:	6803      	ldr	r3, [r0, #0]
 8000ea0:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000ea2:	6803      	ldr	r3, [r0, #0]
 8000ea4:	60da      	str	r2, [r3, #12]
  }
}
 8000ea6:	bc30      	pop	{r4, r5}
 8000ea8:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8000eaa:	6803      	ldr	r3, [r0, #0]
 8000eac:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000eae:	6803      	ldr	r3, [r0, #0]
 8000eb0:	60d9      	str	r1, [r3, #12]
 8000eb2:	e7f8      	b.n	8000ea6 <DMA_SetConfig+0x1e>

08000eb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000eb4:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000eb6:	6803      	ldr	r3, [r0, #0]
 8000eb8:	b2d9      	uxtb	r1, r3
 8000eba:	3910      	subs	r1, #16
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <DMA_CalcBaseAndBitshift+0x34>)
 8000ebe:	fba2 4201 	umull	r4, r2, r2, r1
 8000ec2:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000ec4:	4c09      	ldr	r4, [pc, #36]	@ (8000eec <DMA_CalcBaseAndBitshift+0x38>)
 8000ec6:	5ca2      	ldrb	r2, [r4, r2]
 8000ec8:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8000eca:	295f      	cmp	r1, #95	@ 0x5f
 8000ecc:	d907      	bls.n	8000ede <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000ece:	f36f 0309 	bfc	r3, #0, #10
 8000ed2:	3304      	adds	r3, #4
 8000ed4:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8000ed6:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8000ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000edc:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000ede:	f36f 0309 	bfc	r3, #0, #10
 8000ee2:	6583      	str	r3, [r0, #88]	@ 0x58
 8000ee4:	e7f7      	b.n	8000ed6 <DMA_CalcBaseAndBitshift+0x22>
 8000ee6:	bf00      	nop
 8000ee8:	aaaaaaab 	.word	0xaaaaaaab
 8000eec:	08006a4c 	.word	0x08006a4c

08000ef0 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000ef0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000ef2:	6982      	ldr	r2, [r0, #24]
 8000ef4:	b992      	cbnz	r2, 8000f1c <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d00a      	beq.n	8000f10 <DMA_CheckFifoParam+0x20>
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d002      	beq.n	8000f04 <DMA_CheckFifoParam+0x14>
 8000efe:	b10b      	cbz	r3, 8000f04 <DMA_CheckFifoParam+0x14>
 8000f00:	2000      	movs	r0, #0
 8000f02:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f04:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000f06:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000f0a:	d128      	bne.n	8000f5e <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f10:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000f12:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8000f16:	d024      	beq.n	8000f62 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8000f18:	2000      	movs	r0, #0
 8000f1a:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000f1c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8000f20:	d009      	beq.n	8000f36 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d925      	bls.n	8000f72 <DMA_CheckFifoParam+0x82>
 8000f26:	2b03      	cmp	r3, #3
 8000f28:	d125      	bne.n	8000f76 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f2a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000f2c:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000f30:	d123      	bne.n	8000f7a <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8000f32:	2000      	movs	r0, #0
 8000f34:	4770      	bx	lr
    switch (tmp)
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	d803      	bhi.n	8000f42 <DMA_CheckFifoParam+0x52>
 8000f3a:	e8df f003 	tbb	[pc, r3]
 8000f3e:	0414      	.short	0x0414
 8000f40:	0a14      	.short	0x0a14
 8000f42:	2000      	movs	r0, #0
 8000f44:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f46:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000f48:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000f4c:	d10d      	bne.n	8000f6a <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8000f4e:	2000      	movs	r0, #0
 8000f50:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f52:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000f54:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8000f58:	d009      	beq.n	8000f6e <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	4770      	bx	lr
        status = HAL_ERROR;
 8000f5e:	2001      	movs	r0, #1
 8000f60:	4770      	bx	lr
        status = HAL_ERROR;
 8000f62:	2001      	movs	r0, #1
 8000f64:	4770      	bx	lr
      status = HAL_ERROR;
 8000f66:	2001      	movs	r0, #1
 8000f68:	4770      	bx	lr
        status = HAL_ERROR;
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	4770      	bx	lr
        status = HAL_ERROR;
 8000f6e:	2001      	movs	r0, #1
 8000f70:	4770      	bx	lr
      status = HAL_ERROR;
 8000f72:	2001      	movs	r0, #1
 8000f74:	4770      	bx	lr
    switch (tmp)
 8000f76:	2000      	movs	r0, #0
 8000f78:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8000f7a:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8000f7c:	4770      	bx	lr
	...

08000f80 <HAL_DMA_Init>:
{
 8000f80:	b570      	push	{r4, r5, r6, lr}
 8000f82:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f84:	f7ff feea 	bl	8000d5c <HAL_GetTick>
  if(hdma == NULL)
 8000f88:	2c00      	cmp	r4, #0
 8000f8a:	d05b      	beq.n	8001044 <HAL_DMA_Init+0xc4>
 8000f8c:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8000f94:	2300      	movs	r3, #0
 8000f96:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8000f9a:	6822      	ldr	r2, [r4, #0]
 8000f9c:	6813      	ldr	r3, [r2, #0]
 8000f9e:	f023 0301 	bic.w	r3, r3, #1
 8000fa2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fa4:	6823      	ldr	r3, [r4, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	f012 0f01 	tst.w	r2, #1
 8000fac:	d00a      	beq.n	8000fc4 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fae:	f7ff fed5 	bl	8000d5c <HAL_GetTick>
 8000fb2:	1b43      	subs	r3, r0, r5
 8000fb4:	2b05      	cmp	r3, #5
 8000fb6:	d9f5      	bls.n	8000fa4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fb8:	2320      	movs	r3, #32
 8000fba:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8000fc2:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8000fc4:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fc6:	4920      	ldr	r1, [pc, #128]	@ (8001048 <HAL_DMA_Init+0xc8>)
 8000fc8:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fca:	6862      	ldr	r2, [r4, #4]
 8000fcc:	68a0      	ldr	r0, [r4, #8]
 8000fce:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd0:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fd2:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd4:	6920      	ldr	r0, [r4, #16]
 8000fd6:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd8:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fda:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fdc:	69a0      	ldr	r0, [r4, #24]
 8000fde:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fe0:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe2:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fe4:	6a20      	ldr	r0, [r4, #32]
 8000fe6:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fe8:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fea:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000fec:	2904      	cmp	r1, #4
 8000fee:	d01e      	beq.n	800102e <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8000ff0:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8000ff2:	6826      	ldr	r6, [r4, #0]
 8000ff4:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ff6:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8000ffa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000ffc:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	d107      	bne.n	8001012 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001002:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001004:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001006:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001008:	b11b      	cbz	r3, 8001012 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800100a:	4620      	mov	r0, r4
 800100c:	f7ff ff70 	bl	8000ef0 <DMA_CheckFifoParam>
 8001010:	b990      	cbnz	r0, 8001038 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001012:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001014:	4620      	mov	r0, r4
 8001016:	f7ff ff4d 	bl	8000eb4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800101a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800101c:	233f      	movs	r3, #63	@ 0x3f
 800101e:	4093      	lsls	r3, r2
 8001020:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001022:	2000      	movs	r0, #0
 8001024:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001026:	2301      	movs	r3, #1
 8001028:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 800102c:	e7c9      	b.n	8000fc2 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800102e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001030:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001032:	4301      	orrs	r1, r0
 8001034:	430a      	orrs	r2, r1
 8001036:	e7db      	b.n	8000ff0 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001038:	2340      	movs	r3, #64	@ 0x40
 800103a:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800103c:	2001      	movs	r0, #1
 800103e:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8001042:	e7be      	b.n	8000fc2 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001044:	2001      	movs	r0, #1
 8001046:	e7bc      	b.n	8000fc2 <HAL_DMA_Init+0x42>
 8001048:	f010803f 	.word	0xf010803f

0800104c <HAL_DMA_Start_IT>:
{
 800104c:	b538      	push	{r3, r4, r5, lr}
 800104e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001050:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8001052:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8001056:	2801      	cmp	r0, #1
 8001058:	d02b      	beq.n	80010b2 <HAL_DMA_Start_IT+0x66>
 800105a:	2001      	movs	r0, #1
 800105c:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001060:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8001064:	b2c0      	uxtb	r0, r0
 8001066:	2801      	cmp	r0, #1
 8001068:	d004      	beq.n	8001074 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 800106a:	2300      	movs	r3, #0
 800106c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8001070:	2002      	movs	r0, #2
}
 8001072:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001074:	2002      	movs	r0, #2
 8001076:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800107a:	2000      	movs	r0, #0
 800107c:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800107e:	4620      	mov	r0, r4
 8001080:	f7ff ff02 	bl	8000e88 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001084:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001086:	233f      	movs	r3, #63	@ 0x3f
 8001088:	4093      	lsls	r3, r2
 800108a:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800108c:	6822      	ldr	r2, [r4, #0]
 800108e:	6813      	ldr	r3, [r2, #0]
 8001090:	f043 0316 	orr.w	r3, r3, #22
 8001094:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001096:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001098:	b123      	cbz	r3, 80010a4 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 800109a:	6822      	ldr	r2, [r4, #0]
 800109c:	6813      	ldr	r3, [r2, #0]
 800109e:	f043 0308 	orr.w	r3, r3, #8
 80010a2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80010a4:	6822      	ldr	r2, [r4, #0]
 80010a6:	6813      	ldr	r3, [r2, #0]
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010ae:	2000      	movs	r0, #0
 80010b0:	e7df      	b.n	8001072 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 80010b2:	2002      	movs	r0, #2
 80010b4:	e7dd      	b.n	8001072 <HAL_DMA_Start_IT+0x26>

080010b6 <HAL_DMA_Abort>:
{
 80010b6:	b570      	push	{r4, r5, r6, lr}
 80010b8:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010ba:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 80010bc:	f7ff fe4e 	bl	8000d5c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010c0:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d006      	beq.n	80010d8 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ca:	2380      	movs	r3, #128	@ 0x80
 80010cc:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 80010ce:	2300      	movs	r3, #0
 80010d0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 80010d4:	2001      	movs	r0, #1
}
 80010d6:	bd70      	pop	{r4, r5, r6, pc}
 80010d8:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010da:	6822      	ldr	r2, [r4, #0]
 80010dc:	6813      	ldr	r3, [r2, #0]
 80010de:	f023 0316 	bic.w	r3, r3, #22
 80010e2:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010e4:	6822      	ldr	r2, [r4, #0]
 80010e6:	6953      	ldr	r3, [r2, #20]
 80010e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80010ec:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80010f0:	b1e3      	cbz	r3, 800112c <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010f2:	6822      	ldr	r2, [r4, #0]
 80010f4:	6813      	ldr	r3, [r2, #0]
 80010f6:	f023 0308 	bic.w	r3, r3, #8
 80010fa:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80010fc:	6822      	ldr	r2, [r4, #0]
 80010fe:	6813      	ldr	r3, [r2, #0]
 8001100:	f023 0301 	bic.w	r3, r3, #1
 8001104:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001106:	6823      	ldr	r3, [r4, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f013 0f01 	tst.w	r3, #1
 800110e:	d011      	beq.n	8001134 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001110:	f7ff fe24 	bl	8000d5c <HAL_GetTick>
 8001114:	1b43      	subs	r3, r0, r5
 8001116:	2b05      	cmp	r3, #5
 8001118:	d9f5      	bls.n	8001106 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800111a:	2320      	movs	r3, #32
 800111c:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800111e:	2003      	movs	r0, #3
 8001120:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001124:	2300      	movs	r3, #0
 8001126:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 800112a:	e7d4      	b.n	80010d6 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800112c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1df      	bne.n	80010f2 <HAL_DMA_Abort+0x3c>
 8001132:	e7e3      	b.n	80010fc <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001134:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001136:	233f      	movs	r3, #63	@ 0x3f
 8001138:	4093      	lsls	r3, r2
 800113a:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800113c:	2301      	movs	r3, #1
 800113e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001142:	2000      	movs	r0, #0
 8001144:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 8001148:	e7c5      	b.n	80010d6 <HAL_DMA_Abort+0x20>

0800114a <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800114a:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d003      	beq.n	800115c <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8001158:	2001      	movs	r0, #1
 800115a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 800115c:	2305      	movs	r3, #5
 800115e:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8001162:	6802      	ldr	r2, [r0, #0]
 8001164:	6813      	ldr	r3, [r2, #0]
 8001166:	f023 0301 	bic.w	r3, r3, #1
 800116a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800116c:	2000      	movs	r0, #0
}
 800116e:	4770      	bx	lr

08001170 <HAL_DMA_IRQHandler>:
{
 8001170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001172:	b083      	sub	sp, #12
 8001174:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001176:	2300      	movs	r3, #0
 8001178:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800117a:	4b72      	ldr	r3, [pc, #456]	@ (8001344 <HAL_DMA_IRQHandler+0x1d4>)
 800117c:	681d      	ldr	r5, [r3, #0]
 800117e:	4b72      	ldr	r3, [pc, #456]	@ (8001348 <HAL_DMA_IRQHandler+0x1d8>)
 8001180:	fba3 3505 	umull	r3, r5, r3, r5
 8001184:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001186:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8001188:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800118a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800118c:	2308      	movs	r3, #8
 800118e:	4093      	lsls	r3, r2
 8001190:	4233      	tst	r3, r6
 8001192:	d010      	beq.n	80011b6 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001194:	6803      	ldr	r3, [r0, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	f012 0f04 	tst.w	r2, #4
 800119c:	d00b      	beq.n	80011b6 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	f022 0204 	bic.w	r2, r2, #4
 80011a4:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011a6:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80011a8:	2308      	movs	r3, #8
 80011aa:	4093      	lsls	r3, r2
 80011ac:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011ae:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011b6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80011b8:	2301      	movs	r3, #1
 80011ba:	4093      	lsls	r3, r2
 80011bc:	4233      	tst	r3, r6
 80011be:	d009      	beq.n	80011d4 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011c0:	6822      	ldr	r2, [r4, #0]
 80011c2:	6952      	ldr	r2, [r2, #20]
 80011c4:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80011c8:	d004      	beq.n	80011d4 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011ca:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011cc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80011ce:	f043 0302 	orr.w	r3, r3, #2
 80011d2:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011d4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80011d6:	2304      	movs	r3, #4
 80011d8:	4093      	lsls	r3, r2
 80011da:	4233      	tst	r3, r6
 80011dc:	d009      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011de:	6822      	ldr	r2, [r4, #0]
 80011e0:	6812      	ldr	r2, [r2, #0]
 80011e2:	f012 0f02 	tst.w	r2, #2
 80011e6:	d004      	beq.n	80011f2 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011e8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011ea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011f2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80011f4:	2310      	movs	r3, #16
 80011f6:	4093      	lsls	r3, r2
 80011f8:	4233      	tst	r3, r6
 80011fa:	d024      	beq.n	8001246 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011fc:	6822      	ldr	r2, [r4, #0]
 80011fe:	6812      	ldr	r2, [r2, #0]
 8001200:	f012 0f08 	tst.w	r2, #8
 8001204:	d01f      	beq.n	8001246 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001206:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001208:	6823      	ldr	r3, [r4, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001210:	d00d      	beq.n	800122e <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001218:	d104      	bne.n	8001224 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800121a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800121c:	b19b      	cbz	r3, 8001246 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800121e:	4620      	mov	r0, r4
 8001220:	4798      	blx	r3
 8001222:	e010      	b.n	8001246 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001224:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001226:	b173      	cbz	r3, 8001246 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001228:	4620      	mov	r0, r4
 800122a:	4798      	blx	r3
 800122c:	e00b      	b.n	8001246 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001234:	d103      	bne.n	800123e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	f022 0208 	bic.w	r2, r2, #8
 800123c:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800123e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001240:	b10b      	cbz	r3, 8001246 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8001242:	4620      	mov	r0, r4
 8001244:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001246:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001248:	2320      	movs	r3, #32
 800124a:	4093      	lsls	r3, r2
 800124c:	4233      	tst	r3, r6
 800124e:	d055      	beq.n	80012fc <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001250:	6822      	ldr	r2, [r4, #0]
 8001252:	6812      	ldr	r2, [r2, #0]
 8001254:	f012 0f10 	tst.w	r2, #16
 8001258:	d050      	beq.n	80012fc <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800125a:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800125c:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b05      	cmp	r3, #5
 8001264:	d00e      	beq.n	8001284 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001266:	6823      	ldr	r3, [r4, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800126e:	d033      	beq.n	80012d8 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001276:	d12a      	bne.n	80012ce <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001278:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800127a:	2b00      	cmp	r3, #0
 800127c:	d03e      	beq.n	80012fc <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 800127e:	4620      	mov	r0, r4
 8001280:	4798      	blx	r3
 8001282:	e03b      	b.n	80012fc <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001284:	6822      	ldr	r2, [r4, #0]
 8001286:	6813      	ldr	r3, [r2, #0]
 8001288:	f023 0316 	bic.w	r3, r3, #22
 800128c:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800128e:	6822      	ldr	r2, [r4, #0]
 8001290:	6953      	ldr	r3, [r2, #20]
 8001292:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001296:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001298:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800129a:	b1a3      	cbz	r3, 80012c6 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800129c:	6822      	ldr	r2, [r4, #0]
 800129e:	6813      	ldr	r3, [r2, #0]
 80012a0:	f023 0308 	bic.w	r3, r3, #8
 80012a4:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012a6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80012a8:	233f      	movs	r3, #63	@ 0x3f
 80012aa:	4093      	lsls	r3, r2
 80012ac:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80012ae:	2301      	movs	r3, #1
 80012b0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80012b4:	2300      	movs	r3, #0
 80012b6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 80012ba:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d03f      	beq.n	8001340 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80012c0:	4620      	mov	r0, r4
 80012c2:	4798      	blx	r3
        return;
 80012c4:	e03c      	b.n	8001340 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012c6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1e7      	bne.n	800129c <HAL_DMA_IRQHandler+0x12c>
 80012cc:	e7eb      	b.n	80012a6 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80012ce:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80012d0:	b1a3      	cbz	r3, 80012fc <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80012d2:	4620      	mov	r0, r4
 80012d4:	4798      	blx	r3
 80012d6:	e011      	b.n	80012fc <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80012de:	d109      	bne.n	80012f4 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	f022 0210 	bic.w	r2, r2, #16
 80012e6:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80012e8:	2301      	movs	r3, #1
 80012ea:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80012ee:	2300      	movs	r3, #0
 80012f0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 80012f4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80012f6:	b10b      	cbz	r3, 80012fc <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80012f8:	4620      	mov	r0, r4
 80012fa:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80012fc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80012fe:	b1fb      	cbz	r3, 8001340 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001300:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001302:	f013 0f01 	tst.w	r3, #1
 8001306:	d017      	beq.n	8001338 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001308:	2305      	movs	r3, #5
 800130a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 800130e:	6822      	ldr	r2, [r4, #0]
 8001310:	6813      	ldr	r3, [r2, #0]
 8001312:	f023 0301 	bic.w	r3, r3, #1
 8001316:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001318:	9b01      	ldr	r3, [sp, #4]
 800131a:	3301      	adds	r3, #1
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	42ab      	cmp	r3, r5
 8001320:	d804      	bhi.n	800132c <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001322:	6823      	ldr	r3, [r4, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f013 0f01 	tst.w	r3, #1
 800132a:	d1f5      	bne.n	8001318 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 800132c:	2301      	movs	r3, #1
 800132e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8001332:	2300      	movs	r3, #0
 8001334:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8001338:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800133a:	b10b      	cbz	r3, 8001340 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 800133c:	4620      	mov	r0, r4
 800133e:	4798      	blx	r3
}
 8001340:	b003      	add	sp, #12
 8001342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001344:	20000000 	.word	0x20000000
 8001348:	1b4e81b5 	.word	0x1b4e81b5

0800134c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800134c:	2300      	movs	r3, #0
 800134e:	2b0f      	cmp	r3, #15
 8001350:	f200 80d7 	bhi.w	8001502 <HAL_GPIO_Init+0x1b6>
{
 8001354:	b570      	push	{r4, r5, r6, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	e065      	b.n	8001426 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800135a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800135c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001360:	2403      	movs	r4, #3
 8001362:	fa04 f40e 	lsl.w	r4, r4, lr
 8001366:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800136a:	68cc      	ldr	r4, [r1, #12]
 800136c:	fa04 f40e 	lsl.w	r4, r4, lr
 8001370:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001372:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001374:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001376:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800137a:	684a      	ldr	r2, [r1, #4]
 800137c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001380:	409a      	lsls	r2, r3
 8001382:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001384:	6042      	str	r2, [r0, #4]
 8001386:	e05c      	b.n	8001442 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001388:	08dc      	lsrs	r4, r3, #3
 800138a:	3408      	adds	r4, #8
 800138c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001390:	f003 0507 	and.w	r5, r3, #7
 8001394:	00ad      	lsls	r5, r5, #2
 8001396:	f04f 0e0f 	mov.w	lr, #15
 800139a:	fa0e fe05 	lsl.w	lr, lr, r5
 800139e:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013a2:	690a      	ldr	r2, [r1, #16]
 80013a4:	40aa      	lsls	r2, r5
 80013a6:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80013aa:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80013ae:	e05c      	b.n	800146a <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013b0:	2204      	movs	r2, #4
 80013b2:	e000      	b.n	80013b6 <HAL_GPIO_Init+0x6a>
 80013b4:	2200      	movs	r2, #0
 80013b6:	fa02 f20e 	lsl.w	r2, r2, lr
 80013ba:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013bc:	3402      	adds	r4, #2
 80013be:	4d51      	ldr	r5, [pc, #324]	@ (8001504 <HAL_GPIO_Init+0x1b8>)
 80013c0:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013c4:	4a50      	ldr	r2, [pc, #320]	@ (8001508 <HAL_GPIO_Init+0x1bc>)
 80013c6:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80013c8:	ea6f 020c 	mvn.w	r2, ip
 80013cc:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013d0:	684e      	ldr	r6, [r1, #4]
 80013d2:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 80013d6:	d001      	beq.n	80013dc <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 80013d8:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80013dc:	4c4a      	ldr	r4, [pc, #296]	@ (8001508 <HAL_GPIO_Init+0x1bc>)
 80013de:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80013e0:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e6:	684e      	ldr	r6, [r1, #4]
 80013e8:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 80013ec:	d001      	beq.n	80013f2 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 80013ee:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 80013f2:	4c45      	ldr	r4, [pc, #276]	@ (8001508 <HAL_GPIO_Init+0x1bc>)
 80013f4:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 80013f6:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80013f8:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013fc:	684e      	ldr	r6, [r1, #4]
 80013fe:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001402:	d001      	beq.n	8001408 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001404:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001408:	4c3f      	ldr	r4, [pc, #252]	@ (8001508 <HAL_GPIO_Init+0x1bc>)
 800140a:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800140c:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800140e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001410:	684d      	ldr	r5, [r1, #4]
 8001412:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001416:	d001      	beq.n	800141c <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001418:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 800141c:	4c3a      	ldr	r4, [pc, #232]	@ (8001508 <HAL_GPIO_Init+0x1bc>)
 800141e:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001420:	3301      	adds	r3, #1
 8001422:	2b0f      	cmp	r3, #15
 8001424:	d86b      	bhi.n	80014fe <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8001426:	2201      	movs	r2, #1
 8001428:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142a:	680c      	ldr	r4, [r1, #0]
 800142c:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001430:	ea32 0404 	bics.w	r4, r2, r4
 8001434:	d1f4      	bne.n	8001420 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001436:	684c      	ldr	r4, [r1, #4]
 8001438:	f004 0403 	and.w	r4, r4, #3
 800143c:	3c01      	subs	r4, #1
 800143e:	2c01      	cmp	r4, #1
 8001440:	d98b      	bls.n	800135a <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001442:	684a      	ldr	r2, [r1, #4]
 8001444:	f002 0203 	and.w	r2, r2, #3
 8001448:	2a03      	cmp	r2, #3
 800144a:	d009      	beq.n	8001460 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 800144c:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800144e:	005d      	lsls	r5, r3, #1
 8001450:	2203      	movs	r2, #3
 8001452:	40aa      	lsls	r2, r5
 8001454:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001458:	688a      	ldr	r2, [r1, #8]
 800145a:	40aa      	lsls	r2, r5
 800145c:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 800145e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001460:	684a      	ldr	r2, [r1, #4]
 8001462:	f002 0203 	and.w	r2, r2, #3
 8001466:	2a02      	cmp	r2, #2
 8001468:	d08e      	beq.n	8001388 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 800146a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800146c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001470:	2203      	movs	r2, #3
 8001472:	fa02 f20e 	lsl.w	r2, r2, lr
 8001476:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800147a:	684a      	ldr	r2, [r1, #4]
 800147c:	f002 0203 	and.w	r2, r2, #3
 8001480:	fa02 f20e 	lsl.w	r2, r2, lr
 8001484:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001486:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001488:	684a      	ldr	r2, [r1, #4]
 800148a:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 800148e:	d0c7      	beq.n	8001420 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001490:	2200      	movs	r2, #0
 8001492:	9201      	str	r2, [sp, #4]
 8001494:	4a1d      	ldr	r2, [pc, #116]	@ (800150c <HAL_GPIO_Init+0x1c0>)
 8001496:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001498:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 800149c:	6454      	str	r4, [r2, #68]	@ 0x44
 800149e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80014a0:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80014a4:	9201      	str	r2, [sp, #4]
 80014a6:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80014a8:	089c      	lsrs	r4, r3, #2
 80014aa:	1ca5      	adds	r5, r4, #2
 80014ac:	4a15      	ldr	r2, [pc, #84]	@ (8001504 <HAL_GPIO_Init+0x1b8>)
 80014ae:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014b2:	f003 0e03 	and.w	lr, r3, #3
 80014b6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80014ba:	220f      	movs	r2, #15
 80014bc:	fa02 f20e 	lsl.w	r2, r2, lr
 80014c0:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014c4:	4a12      	ldr	r2, [pc, #72]	@ (8001510 <HAL_GPIO_Init+0x1c4>)
 80014c6:	4290      	cmp	r0, r2
 80014c8:	f43f af74 	beq.w	80013b4 <HAL_GPIO_Init+0x68>
 80014cc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014d0:	4290      	cmp	r0, r2
 80014d2:	d00e      	beq.n	80014f2 <HAL_GPIO_Init+0x1a6>
 80014d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014d8:	4290      	cmp	r0, r2
 80014da:	d00c      	beq.n	80014f6 <HAL_GPIO_Init+0x1aa>
 80014dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014e0:	4290      	cmp	r0, r2
 80014e2:	d00a      	beq.n	80014fa <HAL_GPIO_Init+0x1ae>
 80014e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80014e8:	4290      	cmp	r0, r2
 80014ea:	f43f af61 	beq.w	80013b0 <HAL_GPIO_Init+0x64>
 80014ee:	2207      	movs	r2, #7
 80014f0:	e761      	b.n	80013b6 <HAL_GPIO_Init+0x6a>
 80014f2:	2201      	movs	r2, #1
 80014f4:	e75f      	b.n	80013b6 <HAL_GPIO_Init+0x6a>
 80014f6:	2202      	movs	r2, #2
 80014f8:	e75d      	b.n	80013b6 <HAL_GPIO_Init+0x6a>
 80014fa:	2203      	movs	r2, #3
 80014fc:	e75b      	b.n	80013b6 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 80014fe:	b002      	add	sp, #8
 8001500:	bd70      	pop	{r4, r5, r6, pc}
 8001502:	4770      	bx	lr
 8001504:	40013800 	.word	0x40013800
 8001508:	40013c00 	.word	0x40013c00
 800150c:	40023800 	.word	0x40023800
 8001510:	40020000 	.word	0x40020000

08001514 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001514:	b10a      	cbz	r2, 800151a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001516:	6181      	str	r1, [r0, #24]
 8001518:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800151a:	0409      	lsls	r1, r1, #16
 800151c:	6181      	str	r1, [r0, #24]
  }
}
 800151e:	4770      	bx	lr

08001520 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001520:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001522:	ea01 0203 	and.w	r2, r1, r3
 8001526:	ea21 0103 	bic.w	r1, r1, r3
 800152a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800152e:	6181      	str	r1, [r0, #24]
}
 8001530:	4770      	bx	lr

08001532 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001532:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001536:	b083      	sub	sp, #12
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001538:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 800153c:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8001540:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001544:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001548:	429a      	cmp	r2, r3
 800154a:	d854      	bhi.n	80015f6 <PCD_WriteEmptyTxFifo+0xc4>
 800154c:	4607      	mov	r7, r0
 800154e:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8001550:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8001552:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 8001556:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800155a:	69d2      	ldr	r2, [r2, #28]
 800155c:	429a      	cmp	r2, r3
 800155e:	d300      	bcc.n	8001562 <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 8001560:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8001562:	f102 0903 	add.w	r9, r2, #3
 8001566:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800156a:	e015      	b.n	8001598 <PCD_WriteEmptyTxFifo+0x66>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 800156c:	f106 0903 	add.w	r9, r6, #3
 8001570:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
                          (uint8_t)hpcd->Init.dma_enable);
 8001574:	79bb      	ldrb	r3, [r7, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001576:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 800157a:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800157e:	6a29      	ldr	r1, [r5, #32]
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	b2b3      	uxth	r3, r6
 8001584:	b2e2      	uxtb	r2, r4
 8001586:	4640      	mov	r0, r8
 8001588:	f002 fa65 	bl	8003a56 <USB_WritePacket>

    ep->xfer_buff  += len;
 800158c:	6a2b      	ldr	r3, [r5, #32]
 800158e:	4433      	add	r3, r6
 8001590:	622b      	str	r3, [r5, #32]
    ep->xfer_count += len;
 8001592:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8001594:	4433      	add	r3, r6
 8001596:	62ab      	str	r3, [r5, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001598:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 800159c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80015a4:	454b      	cmp	r3, r9
 80015a6:	d312      	bcc.n	80015ce <PCD_WriteEmptyTxFifo+0x9c>
 80015a8:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 80015ac:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80015b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d20a      	bcs.n	80015ce <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80015b8:	b14b      	cbz	r3, 80015ce <PCD_WriteEmptyTxFifo+0x9c>
    len = ep->xfer_len - ep->xfer_count;
 80015ba:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 80015bc:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 80015c0:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 80015c4:	69d6      	ldr	r6, [r2, #28]
 80015c6:	429e      	cmp	r6, r3
 80015c8:	d3d0      	bcc.n	800156c <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 80015ca:	461e      	mov	r6, r3
 80015cc:	e7ce      	b.n	800156c <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80015ce:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 80015d2:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 80015d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015da:	429a      	cmp	r2, r3
 80015dc:	d80f      	bhi.n	80015fe <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015de:	f004 040f 	and.w	r4, r4, #15
 80015e2:	2201      	movs	r2, #1
 80015e4:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015e6:	f8d8 3834 	ldr.w	r3, [r8, #2100]	@ 0x834
 80015ea:	ea23 0302 	bic.w	r3, r3, r2
 80015ee:	f8c8 3834 	str.w	r3, [r8, #2100]	@ 0x834
  }

  return HAL_OK;
 80015f2:	2000      	movs	r0, #0
 80015f4:	e000      	b.n	80015f8 <PCD_WriteEmptyTxFifo+0xc6>
    return HAL_ERROR;
 80015f6:	2001      	movs	r0, #1
}
 80015f8:	b003      	add	sp, #12
 80015fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 80015fe:	2000      	movs	r0, #0
 8001600:	e7fa      	b.n	80015f8 <PCD_WriteEmptyTxFifo+0xc6>

08001602 <HAL_PCD_Init>:
{
 8001602:	b530      	push	{r4, r5, lr}
 8001604:	b083      	sub	sp, #12
  if (hpcd == NULL)
 8001606:	2800      	cmp	r0, #0
 8001608:	d07a      	beq.n	8001700 <HAL_PCD_Init+0xfe>
 800160a:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 800160c:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800160e:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 8001612:	b1c3      	cbz	r3, 8001646 <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001614:	2303      	movs	r3, #3
 8001616:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  if (USBx == USB_OTG_FS)
 800161a:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
 800161e:	d017      	beq.n	8001650 <HAL_PCD_Init+0x4e>
  __HAL_PCD_DISABLE(hpcd);
 8001620:	6820      	ldr	r0, [r4, #0]
 8001622:	f001 ffcb 	bl	80035bc <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001626:	7c23      	ldrb	r3, [r4, #16]
 8001628:	f88d 3000 	strb.w	r3, [sp]
 800162c:	1d23      	adds	r3, r4, #4
 800162e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001630:	6820      	ldr	r0, [r4, #0]
 8001632:	f001 ff01 	bl	8003438 <USB_CoreInit>
 8001636:	b170      	cbz	r0, 8001656 <HAL_PCD_Init+0x54>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001638:	2302      	movs	r3, #2
 800163a:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 800163e:	2501      	movs	r5, #1
}
 8001640:	4628      	mov	r0, r5
 8001642:	b003      	add	sp, #12
 8001644:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001646:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 800164a:	f003 fc35 	bl	8004eb8 <HAL_PCD_MspInit>
 800164e:	e7e1      	b.n	8001614 <HAL_PCD_Init+0x12>
    hpcd->Init.dma_enable = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	71a3      	strb	r3, [r4, #6]
 8001654:	e7e4      	b.n	8001620 <HAL_PCD_Init+0x1e>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001656:	2100      	movs	r1, #0
 8001658:	6820      	ldr	r0, [r4, #0]
 800165a:	f002 fc12 	bl	8003e82 <USB_SetCurrentMode>
 800165e:	4602      	mov	r2, r0
 8001660:	b908      	cbnz	r0, 8001666 <HAL_PCD_Init+0x64>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001662:	4603      	mov	r3, r0
 8001664:	e017      	b.n	8001696 <HAL_PCD_Init+0x94>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001666:	2302      	movs	r3, #2
 8001668:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 800166c:	2501      	movs	r5, #1
 800166e:	e7e7      	b.n	8001640 <HAL_PCD_Init+0x3e>
    hpcd->IN_ep[i].is_in = 1U;
 8001670:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8001674:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001678:	2001      	movs	r0, #1
 800167a:	7548      	strb	r0, [r1, #21]
    hpcd->IN_ep[i].num = i;
 800167c:	750b      	strb	r3, [r1, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800167e:	85cb      	strh	r3, [r1, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001680:	2000      	movs	r0, #0
 8001682:	7608      	strb	r0, [r1, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001684:	61c8      	str	r0, [r1, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001686:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001688:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 800168c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001690:	6248      	str	r0, [r1, #36]	@ 0x24
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001692:	3301      	adds	r3, #1
 8001694:	b2db      	uxtb	r3, r3
 8001696:	7920      	ldrb	r0, [r4, #4]
 8001698:	4298      	cmp	r0, r3
 800169a:	d8e9      	bhi.n	8001670 <HAL_PCD_Init+0x6e>
 800169c:	e016      	b.n	80016cc <HAL_PCD_Init+0xca>
    hpcd->OUT_ep[i].is_in = 0U;
 800169e:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 80016a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80016a6:	2100      	movs	r1, #0
 80016a8:	f883 1255 	strb.w	r1, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 80016ac:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016b0:	f883 1258 	strb.w	r1, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016b4:	f8c3 125c 	str.w	r1, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016b8:	f8c3 1260 	str.w	r1, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016bc:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 80016c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80016c4:	f8c3 1264 	str.w	r1, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c8:	3201      	adds	r2, #1
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	4290      	cmp	r0, r2
 80016ce:	d8e6      	bhi.n	800169e <HAL_PCD_Init+0x9c>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016d0:	7c23      	ldrb	r3, [r4, #16]
 80016d2:	f88d 3000 	strb.w	r3, [sp]
 80016d6:	1d23      	adds	r3, r4, #4
 80016d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016da:	6820      	ldr	r0, [r4, #0]
 80016dc:	f001 ffc4 	bl	8003668 <USB_DevInit>
 80016e0:	4605      	mov	r5, r0
 80016e2:	b120      	cbz	r0, 80016ee <HAL_PCD_Init+0xec>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016e4:	2302      	movs	r3, #2
 80016e6:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 80016ea:	2501      	movs	r5, #1
 80016ec:	e7a8      	b.n	8001640 <HAL_PCD_Init+0x3e>
  hpcd->USB_Address = 0U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80016f2:	2301      	movs	r3, #1
 80016f4:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 80016f8:	6820      	ldr	r0, [r4, #0]
 80016fa:	f002 fb81 	bl	8003e00 <USB_DevDisconnect>
  return HAL_OK;
 80016fe:	e79f      	b.n	8001640 <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 8001700:	2501      	movs	r5, #1
 8001702:	e79d      	b.n	8001640 <HAL_PCD_Init+0x3e>

08001704 <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001704:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 8001706:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 800170a:	2a01      	cmp	r2, #1
 800170c:	d01a      	beq.n	8001744 <HAL_PCD_Start+0x40>
{
 800170e:	b510      	push	{r4, lr}
 8001710:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001712:	2201      	movs	r2, #1
 8001714:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001718:	68da      	ldr	r2, [r3, #12]
 800171a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800171e:	d002      	beq.n	8001726 <HAL_PCD_Start+0x22>
      (hpcd->Init.battery_charging_enable == 1U))
 8001720:	7b42      	ldrb	r2, [r0, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001722:	2a01      	cmp	r2, #1
 8001724:	d009      	beq.n	800173a <HAL_PCD_Start+0x36>
  __HAL_PCD_ENABLE(hpcd);
 8001726:	6820      	ldr	r0, [r4, #0]
 8001728:	f001 ff42 	bl	80035b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800172c:	6820      	ldr	r0, [r4, #0]
 800172e:	f002 fb59 	bl	8003de4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001732:	2000      	movs	r0, #0
 8001734:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001738:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800173a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800173c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001740:	639a      	str	r2, [r3, #56]	@ 0x38
 8001742:	e7f0      	b.n	8001726 <HAL_PCD_Start+0x22>
  __HAL_LOCK(hpcd);
 8001744:	2002      	movs	r0, #2
}
 8001746:	4770      	bx	lr

08001748 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001748:	b570      	push	{r4, r5, r6, lr}
 800174a:	4604      	mov	r4, r0
 800174c:	460d      	mov	r5, r1
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800174e:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001750:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001752:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8001756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800175a:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 800175c:	79a1      	ldrb	r1, [r4, #6]
 800175e:	2901      	cmp	r1, #1
 8001760:	d011      	beq.n	8001786 <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001762:	4938      	ldr	r1, [pc, #224]	@ (8001844 <PCD_EP_OutXfrComplete_int+0xfc>)
 8001764:	428e      	cmp	r6, r1
 8001766:	d056      	beq.n	8001816 <PCD_EP_OutXfrComplete_int+0xce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001768:	b93d      	cbnz	r5, 800177a <PCD_EP_OutXfrComplete_int+0x32>
 800176a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800176e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001772:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8001776:	2b00      	cmp	r3, #0
 8001778:	d05e      	beq.n	8001838 <PCD_EP_OutXfrComplete_int+0xf0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800177a:	b2e9      	uxtb	r1, r5
 800177c:	4620      	mov	r0, r4
 800177e:	f003 fbe5 	bl	8004f4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8001782:	2000      	movs	r0, #0
 8001784:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001786:	f012 0f08 	tst.w	r2, #8
 800178a:	d009      	beq.n	80017a0 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800178c:	492e      	ldr	r1, [pc, #184]	@ (8001848 <PCD_EP_OutXfrComplete_int+0x100>)
 800178e:	428e      	cmp	r6, r1
 8001790:	d9f7      	bls.n	8001782 <PCD_EP_OutXfrComplete_int+0x3a>
 8001792:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8001796:	d0f4      	beq.n	8001782 <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001798:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	e7f0      	b.n	8001782 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80017a0:	f012 0f20 	tst.w	r2, #32
 80017a4:	d002      	beq.n	80017ac <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80017a6:	2220      	movs	r2, #32
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	e7ea      	b.n	8001782 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80017ac:	f012 0f28 	tst.w	r2, #40	@ 0x28
 80017b0:	d1e7      	bne.n	8001782 <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80017b2:	4925      	ldr	r1, [pc, #148]	@ (8001848 <PCD_EP_OutXfrComplete_int+0x100>)
 80017b4:	428e      	cmp	r6, r1
 80017b6:	d906      	bls.n	80017c6 <PCD_EP_OutXfrComplete_int+0x7e>
 80017b8:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 80017bc:	d003      	beq.n	80017c6 <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80017be:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	e7dd      	b.n	8001782 <PCD_EP_OutXfrComplete_int+0x3a>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80017c6:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 80017ca:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80017ce:	f8d2 1274 	ldr.w	r1, [r2, #628]	@ 0x274
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017d8:	1acb      	subs	r3, r1, r3
 80017da:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        if (epnum == 0U)
 80017de:	b97d      	cbnz	r5, 8001800 <PCD_EP_OutXfrComplete_int+0xb8>
          if (ep->xfer_len == 0U)
 80017e0:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 80017e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80017e8:	f8d2 2264 	ldr.w	r2, [r2, #612]	@ 0x264
 80017ec:	b16a      	cbz	r2, 800180a <PCD_EP_OutXfrComplete_int+0xc2>
            ep->xfer_buff += ep->xfer_count;
 80017ee:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 80017f2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80017f6:	f8d2 1260 	ldr.w	r1, [r2, #608]	@ 0x260
 80017fa:	4419      	add	r1, r3
 80017fc:	f8c2 1260 	str.w	r1, [r2, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001800:	b2e9      	uxtb	r1, r5
 8001802:	4620      	mov	r0, r4
 8001804:	f003 fba2 	bl	8004f4c <HAL_PCD_DataOutStageCallback>
 8001808:	e7bb      	b.n	8001782 <PCD_EP_OutXfrComplete_int+0x3a>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800180a:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 800180e:	2101      	movs	r1, #1
 8001810:	f002 fb76 	bl	8003f00 <USB_EP0_OutStart>
 8001814:	e7f4      	b.n	8001800 <PCD_EP_OutXfrComplete_int+0xb8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001816:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800181a:	d003      	beq.n	8001824 <PCD_EP_OutXfrComplete_int+0xdc>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800181c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	e7ae      	b.n	8001782 <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001824:	f012 0f20 	tst.w	r2, #32
 8001828:	d001      	beq.n	800182e <PCD_EP_OutXfrComplete_int+0xe6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800182a:	2220      	movs	r2, #32
 800182c:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800182e:	b2e9      	uxtb	r1, r5
 8001830:	4620      	mov	r0, r4
 8001832:	f003 fb8b 	bl	8004f4c <HAL_PCD_DataOutStageCallback>
 8001836:	e7a4      	b.n	8001782 <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001838:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 800183c:	2100      	movs	r1, #0
 800183e:	f002 fb5f 	bl	8003f00 <USB_EP0_OutStart>
 8001842:	e79a      	b.n	800177a <PCD_EP_OutXfrComplete_int+0x32>
 8001844:	4f54310a 	.word	0x4f54310a
 8001848:	4f54300a 	.word	0x4f54300a

0800184c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800184c:	b538      	push	{r3, r4, r5, lr}
 800184e:	4604      	mov	r4, r0
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001850:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001852:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001854:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8001858:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	@ 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800185c:	4a0e      	ldr	r2, [pc, #56]	@ (8001898 <PCD_EP_OutSetupPacket_int+0x4c>)
 800185e:	4295      	cmp	r5, r2
 8001860:	d907      	bls.n	8001872 <PCD_EP_OutSetupPacket_int+0x26>
 8001862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001866:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 800186a:	d002      	beq.n	8001872 <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800186c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001870:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001872:	4620      	mov	r0, r4
 8001874:	f003 fb62 	bl	8004f3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001878:	4b07      	ldr	r3, [pc, #28]	@ (8001898 <PCD_EP_OutSetupPacket_int+0x4c>)
 800187a:	429d      	cmp	r5, r3
 800187c:	d902      	bls.n	8001884 <PCD_EP_OutSetupPacket_int+0x38>
 800187e:	79a3      	ldrb	r3, [r4, #6]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d001      	beq.n	8001888 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8001884:	2000      	movs	r0, #0
 8001886:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001888:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 800188c:	2101      	movs	r1, #1
 800188e:	6820      	ldr	r0, [r4, #0]
 8001890:	f002 fb36 	bl	8003f00 <USB_EP0_OutStart>
 8001894:	e7f6      	b.n	8001884 <PCD_EP_OutSetupPacket_int+0x38>
 8001896:	bf00      	nop
 8001898:	4f54300a 	.word	0x4f54300a

0800189c <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800189c:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d00c      	beq.n	80018be <HAL_PCD_SetAddress+0x22>
{
 80018a4:	b510      	push	{r4, lr}
 80018a6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80018a8:	2301      	movs	r3, #1
 80018aa:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80018ae:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80018b0:	6800      	ldr	r0, [r0, #0]
 80018b2:	f002 fa87 	bl	8003dc4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80018bc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80018be:	2002      	movs	r0, #2
}
 80018c0:	4770      	bx	lr

080018c2 <HAL_PCD_EP_Open>:
{
 80018c2:	b538      	push	{r3, r4, r5, lr}
 80018c4:	4605      	mov	r5, r0
 80018c6:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80018c8:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80018cc:	d12b      	bne.n	8001926 <HAL_PCD_EP_Open+0x64>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018ce:	f001 0e0f 	and.w	lr, r1, #15
 80018d2:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 80018d6:	00a4      	lsls	r4, r4, #2
 80018d8:	f504 7414 	add.w	r4, r4, #592	@ 0x250
 80018dc:	4404      	add	r4, r0
 80018de:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 80018e0:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 80018e4:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80018e8:	2000      	movs	r0, #0
 80018ea:	f88e 0255 	strb.w	r0, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 80018ee:	f00c 0c0f 	and.w	ip, ip, #15
 80018f2:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80018f6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80018fa:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 80018fc:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 80018fe:	784a      	ldrb	r2, [r1, #1]
 8001900:	b10a      	cbz	r2, 8001906 <HAL_PCD_EP_Open+0x44>
    ep->tx_fifo_num = ep->num;
 8001902:	f8a1 c01a 	strh.w	ip, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 8001906:	2b02      	cmp	r3, #2
 8001908:	d01c      	beq.n	8001944 <HAL_PCD_EP_Open+0x82>
  __HAL_LOCK(hpcd);
 800190a:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 800190e:	2b01      	cmp	r3, #1
 8001910:	d01b      	beq.n	800194a <HAL_PCD_EP_Open+0x88>
 8001912:	2301      	movs	r3, #1
 8001914:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001918:	6828      	ldr	r0, [r5, #0]
 800191a:	f001 ff80 	bl	800381e <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800191e:	2000      	movs	r0, #0
 8001920:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494
}
 8001924:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001926:	f001 000f 	and.w	r0, r1, #15
 800192a:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 800192e:	0089      	lsls	r1, r1, #2
 8001930:	3110      	adds	r1, #16
 8001932:	4429      	add	r1, r5
 8001934:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001936:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800193a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800193e:	2401      	movs	r4, #1
 8001940:	7544      	strb	r4, [r0, #21]
 8001942:	e7d4      	b.n	80018ee <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	714b      	strb	r3, [r1, #5]
 8001948:	e7df      	b.n	800190a <HAL_PCD_EP_Open+0x48>
  __HAL_LOCK(hpcd);
 800194a:	2002      	movs	r0, #2
 800194c:	e7ea      	b.n	8001924 <HAL_PCD_EP_Open+0x62>

0800194e <HAL_PCD_EP_Close>:
{
 800194e:	b510      	push	{r4, lr}
 8001950:	4604      	mov	r4, r0
 8001952:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8001954:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001958:	d120      	bne.n	800199c <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800195a:	f001 000f 	and.w	r0, r1, #15
 800195e:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001968:	4423      	add	r3, r4
 800196a:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 800196c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8001970:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001974:	2300      	movs	r3, #0
 8001976:	f880 3255 	strb.w	r3, [r0, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 800197a:	f002 020f 	and.w	r2, r2, #15
 800197e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001980:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8001984:	2b01      	cmp	r3, #1
 8001986:	d018      	beq.n	80019ba <HAL_PCD_EP_Close+0x6c>
 8001988:	2301      	movs	r3, #1
 800198a:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800198e:	6820      	ldr	r0, [r4, #0]
 8001990:	f001 ff92 	bl	80038b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001994:	2000      	movs	r0, #0
 8001996:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 800199a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800199c:	f001 000f 	and.w	r0, r1, #15
 80019a0:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	3310      	adds	r3, #16
 80019a8:	4423      	add	r3, r4
 80019aa:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 80019ac:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 80019b0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80019b4:	2301      	movs	r3, #1
 80019b6:	7543      	strb	r3, [r0, #21]
 80019b8:	e7df      	b.n	800197a <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 80019ba:	2002      	movs	r0, #2
 80019bc:	e7ed      	b.n	800199a <HAL_PCD_EP_Close+0x4c>

080019be <HAL_PCD_EP_Receive>:
{
 80019be:	b510      	push	{r4, lr}
 80019c0:	4614      	mov	r4, r2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019c2:	f001 0c0f 	and.w	ip, r1, #15
 80019c6:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 80019ca:	0089      	lsls	r1, r1, #2
 80019cc:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 80019d0:	4401      	add	r1, r0
 80019d2:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 80019d4:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 80019d8:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80019dc:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
  ep->xfer_len = len;
 80019e0:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
  ep->xfer_count = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f8ce 3268 	str.w	r3, [lr, #616]	@ 0x268
  ep->is_in = 0U;
 80019ea:	f88e 3255 	strb.w	r3, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 80019ee:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
 80019f2:	7982      	ldrb	r2, [r0, #6]
 80019f4:	2a01      	cmp	r2, #1
 80019f6:	d004      	beq.n	8001a02 <HAL_PCD_EP_Receive+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019f8:	6800      	ldr	r0, [r0, #0]
 80019fa:	f002 f843 	bl	8003a84 <USB_EPStartXfer>
}
 80019fe:	2000      	movs	r0, #0
 8001a00:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8001a02:	f8ce 4270 	str.w	r4, [lr, #624]	@ 0x270
 8001a06:	e7f7      	b.n	80019f8 <HAL_PCD_EP_Receive+0x3a>

08001a08 <HAL_PCD_EP_Transmit>:
{
 8001a08:	b510      	push	{r4, lr}
 8001a0a:	4614      	mov	r4, r2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a0c:	f001 0c0f 	and.w	ip, r1, #15
 8001a10:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8001a14:	0089      	lsls	r1, r1, #2
 8001a16:	3110      	adds	r1, #16
 8001a18:	4401      	add	r1, r0
 8001a1a:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8001a1c:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8001a20:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8001a24:	f8ce 2020 	str.w	r2, [lr, #32]
  ep->xfer_len = len;
 8001a28:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  ep->xfer_count = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f8ce 3028 	str.w	r3, [lr, #40]	@ 0x28
  ep->is_in = 1U;
 8001a32:	2301      	movs	r3, #1
 8001a34:	f88e 3015 	strb.w	r3, [lr, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a38:	f88e c014 	strb.w	ip, [lr, #20]
  if (hpcd->Init.dma_enable == 1U)
 8001a3c:	7982      	ldrb	r2, [r0, #6]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d004      	beq.n	8001a4c <HAL_PCD_EP_Transmit+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a42:	6800      	ldr	r0, [r0, #0]
 8001a44:	f002 f81e 	bl	8003a84 <USB_EPStartXfer>
}
 8001a48:	2000      	movs	r0, #0
 8001a4a:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8001a4c:	f8ce 4030 	str.w	r4, [lr, #48]	@ 0x30
 8001a50:	e7f7      	b.n	8001a42 <HAL_PCD_EP_Transmit+0x3a>

08001a52 <HAL_PCD_EP_SetStall>:
{
 8001a52:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a54:	f001 050f 	and.w	r5, r1, #15
 8001a58:	7902      	ldrb	r2, [r0, #4]
 8001a5a:	42aa      	cmp	r2, r5
 8001a5c:	d338      	bcc.n	8001ad0 <HAL_PCD_EP_SetStall+0x7e>
 8001a5e:	4604      	mov	r4, r0
 8001a60:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8001a62:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001a66:	d11f      	bne.n	8001aa8 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8001a68:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001a6c:	0089      	lsls	r1, r1, #2
 8001a6e:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8001a72:	4401      	add	r1, r0
 8001a74:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8001a76:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8001a7a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 8001a84:	2301      	movs	r3, #1
 8001a86:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a88:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8001a8a:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d020      	beq.n	8001ad4 <HAL_PCD_EP_SetStall+0x82>
 8001a92:	2301      	movs	r3, #1
 8001a94:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a98:	6820      	ldr	r0, [r4, #0]
 8001a9a:	f002 f938 	bl	8003d0e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a9e:	b185      	cbz	r5, 8001ac2 <HAL_PCD_EP_SetStall+0x70>
  __HAL_UNLOCK(hpcd);
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001aa6:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aa8:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 8001aac:	0089      	lsls	r1, r1, #2
 8001aae:	3110      	adds	r1, #16
 8001ab0:	4401      	add	r1, r0
 8001ab2:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001ab4:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8001ab8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001abc:	2201      	movs	r2, #1
 8001abe:	755a      	strb	r2, [r3, #21]
 8001ac0:	e7e0      	b.n	8001a84 <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ac2:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001ac6:	79a1      	ldrb	r1, [r4, #6]
 8001ac8:	6820      	ldr	r0, [r4, #0]
 8001aca:	f002 fa19 	bl	8003f00 <USB_EP0_OutStart>
 8001ace:	e7e7      	b.n	8001aa0 <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	e7e8      	b.n	8001aa6 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8001ad4:	2002      	movs	r0, #2
 8001ad6:	e7e6      	b.n	8001aa6 <HAL_PCD_EP_SetStall+0x54>

08001ad8 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ad8:	f001 030f 	and.w	r3, r1, #15
 8001adc:	7902      	ldrb	r2, [r0, #4]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d330      	bcc.n	8001b44 <HAL_PCD_EP_ClrStall+0x6c>
{
 8001ae2:	b510      	push	{r4, lr}
 8001ae4:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8001ae6:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001aea:	d11e      	bne.n	8001b2a <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aec:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8001af0:	0089      	lsls	r1, r1, #2
 8001af2:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8001af6:	4401      	add	r1, r0
 8001af8:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8001afa:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001afe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001b02:	2000      	movs	r0, #0
 8001b04:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  ep->is_stall = 0U;
 8001b08:	2200      	movs	r2, #0
 8001b0a:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b0c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8001b0e:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d018      	beq.n	8001b48 <HAL_PCD_EP_ClrStall+0x70>
 8001b16:	2301      	movs	r3, #1
 8001b18:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b1c:	6820      	ldr	r0, [r4, #0]
 8001b1e:	f002 f923 	bl	8003d68 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b22:	2000      	movs	r0, #0
 8001b24:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001b28:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b2a:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8001b2e:	0089      	lsls	r1, r1, #2
 8001b30:	3110      	adds	r1, #16
 8001b32:	4401      	add	r1, r0
 8001b34:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001b36:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001b3a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001b3e:	2001      	movs	r0, #1
 8001b40:	7550      	strb	r0, [r2, #21]
 8001b42:	e7e1      	b.n	8001b08 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8001b44:	2001      	movs	r0, #1
}
 8001b46:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8001b48:	2002      	movs	r0, #2
 8001b4a:	e7ed      	b.n	8001b28 <HAL_PCD_EP_ClrStall+0x50>

08001b4c <HAL_PCD_EP_Abort>:
{
 8001b4c:	b508      	push	{r3, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8001b4e:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001b52:	d10c      	bne.n	8001b6e <HAL_PCD_EP_Abort+0x22>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b54:	f001 010f 	and.w	r1, r1, #15
 8001b58:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001b5c:	0089      	lsls	r1, r1, #2
 8001b5e:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8001b62:	4401      	add	r1, r0
 8001b64:	3104      	adds	r1, #4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001b66:	6800      	ldr	r0, [r0, #0]
 8001b68:	f001 ff16 	bl	8003998 <USB_EPStopXfer>
}
 8001b6c:	bd08      	pop	{r3, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b6e:	f001 010f 	and.w	r1, r1, #15
 8001b72:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001b76:	0089      	lsls	r1, r1, #2
 8001b78:	3110      	adds	r1, #16
 8001b7a:	4401      	add	r1, r0
 8001b7c:	3104      	adds	r1, #4
 8001b7e:	e7f2      	b.n	8001b66 <HAL_PCD_EP_Abort+0x1a>

08001b80 <HAL_PCD_IRQHandler>:
{
 8001b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b84:	b083      	sub	sp, #12
 8001b86:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b88:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001b8a:	4628      	mov	r0, r5
 8001b8c:	f002 f975 	bl	8003e7a <USB_GetMode>
 8001b90:	b110      	cbz	r0, 8001b98 <HAL_PCD_IRQHandler+0x18>
}
 8001b92:	b003      	add	sp, #12
 8001b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b98:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b9a:	6820      	ldr	r0, [r4, #0]
 8001b9c:	f002 f93e 	bl	8003e1c <USB_ReadInterrupts>
 8001ba0:	2800      	cmp	r0, #0
 8001ba2:	d0f6      	beq.n	8001b92 <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001ba4:	f505 6700 	add.w	r7, r5, #2048	@ 0x800
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8001bae:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001bb2:	6820      	ldr	r0, [r4, #0]
 8001bb4:	f002 f932 	bl	8003e1c <USB_ReadInterrupts>
 8001bb8:	f010 0f02 	tst.w	r0, #2
 8001bbc:	d004      	beq.n	8001bc8 <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001bbe:	6822      	ldr	r2, [r4, #0]
 8001bc0:	6953      	ldr	r3, [r2, #20]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001bc8:	6820      	ldr	r0, [r4, #0]
 8001bca:	f002 f927 	bl	8003e1c <USB_ReadInterrupts>
 8001bce:	f010 0f10 	tst.w	r0, #16
 8001bd2:	d015      	beq.n	8001c00 <HAL_PCD_IRQHandler+0x80>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bd4:	6822      	ldr	r2, [r4, #0]
 8001bd6:	6993      	ldr	r3, [r2, #24]
 8001bd8:	f023 0310 	bic.w	r3, r3, #16
 8001bdc:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 8001bde:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001be2:	f008 090f 	and.w	r9, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001be6:	f408 13f0 	and.w	r3, r8, #1966080	@ 0x1e0000
 8001bea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001bee:	d04c      	beq.n	8001c8a <HAL_PCD_IRQHandler+0x10a>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001bf0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001bf4:	d06f      	beq.n	8001cd6 <HAL_PCD_IRQHandler+0x156>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bf6:	6822      	ldr	r2, [r4, #0]
 8001bf8:	6993      	ldr	r3, [r2, #24]
 8001bfa:	f043 0310 	orr.w	r3, r3, #16
 8001bfe:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c00:	6820      	ldr	r0, [r4, #0]
 8001c02:	f002 f90b 	bl	8003e1c <USB_ReadInterrupts>
 8001c06:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 8001c0a:	d176      	bne.n	8001cfa <HAL_PCD_IRQHandler+0x17a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c0c:	6820      	ldr	r0, [r4, #0]
 8001c0e:	f002 f905 	bl	8003e1c <USB_ReadInterrupts>
 8001c12:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 8001c16:	f040 80e0 	bne.w	8001dda <HAL_PCD_IRQHandler+0x25a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001c1a:	6820      	ldr	r0, [r4, #0]
 8001c1c:	f002 f8fe 	bl	8003e1c <USB_ReadInterrupts>
 8001c20:	2800      	cmp	r0, #0
 8001c22:	f2c0 8161 	blt.w	8001ee8 <HAL_PCD_IRQHandler+0x368>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001c26:	6820      	ldr	r0, [r4, #0]
 8001c28:	f002 f8f8 	bl	8003e1c <USB_ReadInterrupts>
 8001c2c:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8001c30:	d009      	beq.n	8001c46 <HAL_PCD_IRQHandler+0xc6>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	f013 0f01 	tst.w	r3, #1
 8001c38:	f040 816e 	bne.w	8001f18 <HAL_PCD_IRQHandler+0x398>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001c3c:	6822      	ldr	r2, [r4, #0]
 8001c3e:	6953      	ldr	r3, [r2, #20]
 8001c40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c44:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001c46:	6820      	ldr	r0, [r4, #0]
 8001c48:	f002 f8e8 	bl	8003e1c <USB_ReadInterrupts>
 8001c4c:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 8001c50:	f040 8166 	bne.w	8001f20 <HAL_PCD_IRQHandler+0x3a0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c54:	6820      	ldr	r0, [r4, #0]
 8001c56:	f002 f8e1 	bl	8003e1c <USB_ReadInterrupts>
 8001c5a:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8001c5e:	f040 81b3 	bne.w	8001fc8 <HAL_PCD_IRQHandler+0x448>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c62:	6820      	ldr	r0, [r4, #0]
 8001c64:	f002 f8da 	bl	8003e1c <USB_ReadInterrupts>
 8001c68:	f010 0f08 	tst.w	r0, #8
 8001c6c:	f040 81c4 	bne.w	8001ff8 <HAL_PCD_IRQHandler+0x478>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001c70:	6820      	ldr	r0, [r4, #0]
 8001c72:	f002 f8d3 	bl	8003e1c <USB_ReadInterrupts>
 8001c76:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8001c7a:	f000 81d7 	beq.w	800202c <HAL_PCD_IRQHandler+0x4ac>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001c7e:	69ab      	ldr	r3, [r5, #24]
 8001c80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c84:	61ab      	str	r3, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c86:	2601      	movs	r6, #1
 8001c88:	e1c0      	b.n	800200c <HAL_PCD_IRQHandler+0x48c>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001c8a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001c8e:	ea18 0f03 	tst.w	r8, r3
 8001c92:	d0b0      	beq.n	8001bf6 <HAL_PCD_IRQHandler+0x76>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001c94:	ea4f 1a18 	mov.w	sl, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c98:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	eb09 0bc9 	add.w	fp, r9, r9, lsl #3
 8001ca2:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 8001ca6:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8001caa:	f8db 1260 	ldr.w	r1, [fp, #608]	@ 0x260
 8001cae:	4628      	mov	r0, r5
 8001cb0:	f002 f80a 	bl	8003cc8 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cb4:	f8db 3260 	ldr.w	r3, [fp, #608]	@ 0x260
 8001cb8:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 8001cbc:	4453      	add	r3, sl
 8001cbe:	f8cb 3260 	str.w	r3, [fp, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cc2:	f8db 3268 	ldr.w	r3, [fp, #616]	@ 0x268
 8001cc6:	9a01      	ldr	r2, [sp, #4]
 8001cc8:	444a      	add	r2, r9
 8001cca:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001cce:	4453      	add	r3, sl
 8001cd0:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 8001cd4:	e78f      	b.n	8001bf6 <HAL_PCD_IRQHandler+0x76>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001cd6:	2208      	movs	r2, #8
 8001cd8:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 8001cdc:	4628      	mov	r0, r5
 8001cde:	f001 fff3 	bl	8003cc8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ce2:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001ce6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001cea:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 8001cee:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8001cf2:	4442      	add	r2, r8
 8001cf4:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
 8001cf8:	e77d      	b.n	8001bf6 <HAL_PCD_IRQHandler+0x76>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001cfa:	6820      	ldr	r0, [r4, #0]
 8001cfc:	f002 f892 	bl	8003e24 <USB_ReadDevAllOutEpInterrupt>
 8001d00:	4680      	mov	r8, r0
      epnum = 0U;
 8001d02:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8001d04:	e035      	b.n	8001d72 <HAL_PCD_IRQHandler+0x1f2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001d06:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001d10:	4649      	mov	r1, r9
 8001d12:	4620      	mov	r0, r4
 8001d14:	f7ff fd18 	bl	8001748 <PCD_EP_OutXfrComplete_int>
 8001d18:	e03c      	b.n	8001d94 <HAL_PCD_IRQHandler+0x214>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001d1a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001d1e:	2208      	movs	r2, #8
 8001d20:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001d24:	4649      	mov	r1, r9
 8001d26:	4620      	mov	r0, r4
 8001d28:	f7ff fd90 	bl	800184c <PCD_EP_OutSetupPacket_int>
 8001d2c:	e035      	b.n	8001d9a <HAL_PCD_IRQHandler+0x21a>
            if (ep->is_iso_incomplete == 1U)
 8001d2e:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001d32:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001d36:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d041      	beq.n	8001dc2 <HAL_PCD_IRQHandler+0x242>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001d3e:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001d42:	2202      	movs	r2, #2
 8001d44:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d48:	f01a 0f20 	tst.w	sl, #32
 8001d4c:	d004      	beq.n	8001d58 <HAL_PCD_IRQHandler+0x1d8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d4e:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001d52:	2220      	movs	r2, #32
 8001d54:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d58:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
 8001d5c:	d005      	beq.n	8001d6a <HAL_PCD_IRQHandler+0x1ea>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d5e:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001d62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d66:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
        epnum++;
 8001d6a:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001d6e:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8001d72:	f1b8 0f00 	cmp.w	r8, #0
 8001d76:	f43f af49 	beq.w	8001c0c <HAL_PCD_IRQHandler+0x8c>
        if ((ep_intr & 0x1U) != 0U)
 8001d7a:	f018 0f01 	tst.w	r8, #1
 8001d7e:	d0f4      	beq.n	8001d6a <HAL_PCD_IRQHandler+0x1ea>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d80:	fa5f fb89 	uxtb.w	fp, r9
 8001d84:	4659      	mov	r1, fp
 8001d86:	6820      	ldr	r0, [r4, #0]
 8001d88:	f002 f85c 	bl	8003e44 <USB_ReadDevOutEPInterrupt>
 8001d8c:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001d8e:	f010 0f01 	tst.w	r0, #1
 8001d92:	d1b8      	bne.n	8001d06 <HAL_PCD_IRQHandler+0x186>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001d94:	f01a 0f08 	tst.w	sl, #8
 8001d98:	d1bf      	bne.n	8001d1a <HAL_PCD_IRQHandler+0x19a>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001d9a:	f01a 0f10 	tst.w	sl, #16
 8001d9e:	d004      	beq.n	8001daa <HAL_PCD_IRQHandler+0x22a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001da0:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001da4:	2210      	movs	r2, #16
 8001da6:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001daa:	f01a 0f02 	tst.w	sl, #2
 8001dae:	d0cb      	beq.n	8001d48 <HAL_PCD_IRQHandler+0x1c8>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001db0:	696b      	ldr	r3, [r5, #20]
 8001db2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001db6:	d0ba      	beq.n	8001d2e <HAL_PCD_IRQHandler+0x1ae>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	e7b5      	b.n	8001d2e <HAL_PCD_IRQHandler+0x1ae>
              ep->is_iso_incomplete = 0U;
 8001dc2:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001dc6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001dd0:	4659      	mov	r1, fp
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	f003 f908 	bl	8004fe8 <HAL_PCD_ISOOUTIncompleteCallback>
 8001dd8:	e7b1      	b.n	8001d3e <HAL_PCD_IRQHandler+0x1be>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001dda:	6820      	ldr	r0, [r4, #0]
 8001ddc:	f002 f82a 	bl	8003e34 <USB_ReadDevAllInEpInterrupt>
 8001de0:	4680      	mov	r8, r0
      epnum = 0U;
 8001de2:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8001de4:	e025      	b.n	8001e32 <HAL_PCD_IRQHandler+0x2b2>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001de6:	4659      	mov	r1, fp
 8001de8:	4620      	mov	r0, r4
 8001dea:	f003 f8bb 	bl	8004f64 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001dee:	f01a 0f08 	tst.w	sl, #8
 8001df2:	d004      	beq.n	8001dfe <HAL_PCD_IRQHandler+0x27e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001df4:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001df8:	2208      	movs	r2, #8
 8001dfa:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001dfe:	f01a 0f10 	tst.w	sl, #16
 8001e02:	d004      	beq.n	8001e0e <HAL_PCD_IRQHandler+0x28e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e04:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001e08:	2210      	movs	r2, #16
 8001e0a:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001e0e:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8001e12:	d004      	beq.n	8001e1e <HAL_PCD_IRQHandler+0x29e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001e14:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001e18:	2240      	movs	r2, #64	@ 0x40
 8001e1a:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001e1e:	f01a 0f02 	tst.w	sl, #2
 8001e22:	d140      	bne.n	8001ea6 <HAL_PCD_IRQHandler+0x326>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e24:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 8001e28:	d159      	bne.n	8001ede <HAL_PCD_IRQHandler+0x35e>
        epnum++;
 8001e2a:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001e2e:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8001e32:	f1b8 0f00 	cmp.w	r8, #0
 8001e36:	f43f aef0 	beq.w	8001c1a <HAL_PCD_IRQHandler+0x9a>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001e3a:	f018 0f01 	tst.w	r8, #1
 8001e3e:	d0f4      	beq.n	8001e2a <HAL_PCD_IRQHandler+0x2aa>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e40:	fa5f fb89 	uxtb.w	fp, r9
 8001e44:	4659      	mov	r1, fp
 8001e46:	6820      	ldr	r0, [r4, #0]
 8001e48:	f002 f805 	bl	8003e56 <USB_ReadDevInEPInterrupt>
 8001e4c:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001e4e:	f010 0f01 	tst.w	r0, #1
 8001e52:	d0cc      	beq.n	8001dee <HAL_PCD_IRQHandler+0x26e>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e54:	f009 020f 	and.w	r2, r9, #15
 8001e58:	2101      	movs	r1, #1
 8001e5a:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e60:	ea23 0302 	bic.w	r3, r3, r2
 8001e64:	637b      	str	r3, [r7, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001e66:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001e6a:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
            if (hpcd->Init.dma_enable == 1U)
 8001e6e:	79a3      	ldrb	r3, [r4, #6]
 8001e70:	428b      	cmp	r3, r1
 8001e72:	d1b8      	bne.n	8001de6 <HAL_PCD_IRQHandler+0x266>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001e74:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001e78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001e7c:	6a1a      	ldr	r2, [r3, #32]
 8001e7e:	69d9      	ldr	r1, [r3, #28]
 8001e80:	440a      	add	r2, r1
 8001e82:	621a      	str	r2, [r3, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e84:	f1b9 0f00 	cmp.w	r9, #0
 8001e88:	d1ad      	bne.n	8001de6 <HAL_PCD_IRQHandler+0x266>
 8001e8a:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001e8e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1a6      	bne.n	8001de6 <HAL_PCD_IRQHandler+0x266>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e98:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	6820      	ldr	r0, [r4, #0]
 8001ea0:	f002 f82e 	bl	8003f00 <USB_EP0_OutStart>
 8001ea4:	e79f      	b.n	8001de6 <HAL_PCD_IRQHandler+0x266>
            (void)USB_FlushTxFifo(USBx, epnum);
 8001ea6:	4649      	mov	r1, r9
 8001ea8:	4628      	mov	r0, r5
 8001eaa:	f001 fb8d 	bl	80035c8 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8001eae:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001eb2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001eb6:	7ddb      	ldrb	r3, [r3, #23]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d005      	beq.n	8001ec8 <HAL_PCD_IRQHandler+0x348>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001ebc:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 8001ec6:	e7ad      	b.n	8001e24 <HAL_PCD_IRQHandler+0x2a4>
              ep->is_iso_incomplete = 0U;
 8001ec8:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001ecc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	75da      	strb	r2, [r3, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ed4:	4659      	mov	r1, fp
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	f003 f88c 	bl	8004ff4 <HAL_PCD_ISOINIncompleteCallback>
 8001edc:	e7ee      	b.n	8001ebc <HAL_PCD_IRQHandler+0x33c>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ede:	4649      	mov	r1, r9
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	f7ff fb26 	bl	8001532 <PCD_WriteEmptyTxFifo>
 8001ee6:	e7a0      	b.n	8001e2a <HAL_PCD_IRQHandler+0x2aa>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f023 0301 	bic.w	r3, r3, #1
 8001eee:	607b      	str	r3, [r7, #4]
      if (hpcd->LPM_State == LPM_L1)
 8001ef0:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d008      	beq.n	8001f0a <HAL_PCD_IRQHandler+0x38a>
        HAL_PCD_ResumeCallback(hpcd);
 8001ef8:	4620      	mov	r0, r4
 8001efa:	f003 f86f 	bl	8004fdc <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001efe:	6822      	ldr	r2, [r4, #0]
 8001f00:	6953      	ldr	r3, [r2, #20]
 8001f02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001f06:	6153      	str	r3, [r2, #20]
 8001f08:	e68d      	b.n	8001c26 <HAL_PCD_IRQHandler+0xa6>
        hpcd->LPM_State = LPM_L0;
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f10:	4620      	mov	r0, r4
 8001f12:	f000 f93f 	bl	8002194 <HAL_PCDEx_LPM_Callback>
 8001f16:	e7f2      	b.n	8001efe <HAL_PCD_IRQHandler+0x37e>
        HAL_PCD_SuspendCallback(hpcd);
 8001f18:	4620      	mov	r0, r4
 8001f1a:	f003 f847 	bl	8004fac <HAL_PCD_SuspendCallback>
 8001f1e:	e68d      	b.n	8001c3c <HAL_PCD_IRQHandler+0xbc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f023 0301 	bic.w	r3, r3, #1
 8001f26:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f28:	2110      	movs	r1, #16
 8001f2a:	6820      	ldr	r0, [r4, #0]
 8001f2c:	f001 fb4c 	bl	80035c8 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f30:	e01a      	b.n	8001f68 <HAL_PCD_IRQHandler+0x3e8>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f32:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8001f36:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8001f3a:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f3e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8001f42:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001f46:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f4a:	f8c3 1b08 	str.w	r1, [r3, #2824]	@ 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f4e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8001f52:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001f56:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f5a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8001f5e:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8001f62:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f66:	3601      	adds	r6, #1
 8001f68:	7923      	ldrb	r3, [r4, #4]
 8001f6a:	42b3      	cmp	r3, r6
 8001f6c:	d8e1      	bhi.n	8001f32 <HAL_PCD_IRQHandler+0x3b2>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001f74:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001f76:	7be3      	ldrb	r3, [r4, #15]
 8001f78:	b1db      	cbz	r3, 8001fb2 <HAL_PCD_IRQHandler+0x432>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001f7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f7e:	f043 030b 	orr.w	r3, r3, #11
 8001f82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001f86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f88:	f043 030b 	orr.w	r3, r3, #11
 8001f8c:	647b      	str	r3, [r7, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001f8e:	f8d5 3800 	ldr.w	r3, [r5, #2048]	@ 0x800
 8001f92:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001f96:	f8c5 3800 	str.w	r3, [r5, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f9a:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001f9e:	79a1      	ldrb	r1, [r4, #6]
 8001fa0:	6820      	ldr	r0, [r4, #0]
 8001fa2:	f001 ffad 	bl	8003f00 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001fa6:	6822      	ldr	r2, [r4, #0]
 8001fa8:	6953      	ldr	r3, [r2, #20]
 8001faa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fae:	6153      	str	r3, [r2, #20]
 8001fb0:	e650      	b.n	8001c54 <HAL_PCD_IRQHandler+0xd4>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001fb8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001fbc:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	f043 030b 	orr.w	r3, r3, #11
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	e7e2      	b.n	8001f8e <HAL_PCD_IRQHandler+0x40e>
      (void)USB_ActivateSetup(hpcd->Instance);
 8001fc8:	6820      	ldr	r0, [r4, #0]
 8001fca:	f001 ff8b 	bl	8003ee4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001fce:	6820      	ldr	r0, [r4, #0]
 8001fd0:	f001 fc14 	bl	80037fc <USB_GetDevSpeed>
 8001fd4:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001fd6:	6826      	ldr	r6, [r4, #0]
 8001fd8:	f000 fbde 	bl	8002798 <HAL_RCC_GetHCLKFreq>
 8001fdc:	4601      	mov	r1, r0
 8001fde:	79e2      	ldrb	r2, [r4, #7]
 8001fe0:	4630      	mov	r0, r6
 8001fe2:	f001 fa73 	bl	80034cc <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	f002 ffcd 	bl	8004f86 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001fec:	6822      	ldr	r2, [r4, #0]
 8001fee:	6953      	ldr	r3, [r2, #20]
 8001ff0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ff4:	6153      	str	r3, [r2, #20]
 8001ff6:	e634      	b.n	8001c62 <HAL_PCD_IRQHandler+0xe2>
      HAL_PCD_SOFCallback(hpcd);
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f002 ffbe 	bl	8004f7a <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001ffe:	6822      	ldr	r2, [r4, #0]
 8002000:	6953      	ldr	r3, [r2, #20]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	6153      	str	r3, [r2, #20]
 8002008:	e632      	b.n	8001c70 <HAL_PCD_IRQHandler+0xf0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800200a:	3601      	adds	r6, #1
 800200c:	7923      	ldrb	r3, [r4, #4]
 800200e:	42b3      	cmp	r3, r6
 8002010:	d90c      	bls.n	800202c <HAL_PCD_IRQHandler+0x4ac>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002012:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8002016:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800201a:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 800201e:	2b01      	cmp	r3, #1
 8002020:	d1f3      	bne.n	800200a <HAL_PCD_IRQHandler+0x48a>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002022:	b2f1      	uxtb	r1, r6
 8002024:	4620      	mov	r0, r4
 8002026:	f7ff fd91 	bl	8001b4c <HAL_PCD_EP_Abort>
 800202a:	e7ee      	b.n	800200a <HAL_PCD_IRQHandler+0x48a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800202c:	6820      	ldr	r0, [r4, #0]
 800202e:	f001 fef5 	bl	8003e1c <USB_ReadInterrupts>
 8002032:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 8002036:	d125      	bne.n	8002084 <HAL_PCD_IRQHandler+0x504>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002038:	6820      	ldr	r0, [r4, #0]
 800203a:	f001 feef 	bl	8003e1c <USB_ReadInterrupts>
 800203e:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 8002042:	d059      	beq.n	80020f8 <HAL_PCD_IRQHandler+0x578>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002044:	2301      	movs	r3, #1
 8002046:	e026      	b.n	8002096 <HAL_PCD_IRQHandler+0x516>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002048:	3601      	adds	r6, #1
 800204a:	7923      	ldrb	r3, [r4, #4]
 800204c:	42b3      	cmp	r3, r6
 800204e:	d91b      	bls.n	8002088 <HAL_PCD_IRQHandler+0x508>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002050:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8002054:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002058:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 800205c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002060:	7e1b      	ldrb	r3, [r3, #24]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d1f0      	bne.n	8002048 <HAL_PCD_IRQHandler+0x4c8>
 8002066:	2a00      	cmp	r2, #0
 8002068:	daee      	bge.n	8002048 <HAL_PCD_IRQHandler+0x4c8>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800206a:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 800206e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002072:	2201      	movs	r2, #1
 8002074:	75da      	strb	r2, [r3, #23]
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002076:	f066 017f 	orn	r1, r6, #127	@ 0x7f
 800207a:	b2c9      	uxtb	r1, r1
 800207c:	4620      	mov	r0, r4
 800207e:	f7ff fd65 	bl	8001b4c <HAL_PCD_EP_Abort>
 8002082:	e7e1      	b.n	8002048 <HAL_PCD_IRQHandler+0x4c8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002084:	2601      	movs	r6, #1
 8002086:	e7e0      	b.n	800204a <HAL_PCD_IRQHandler+0x4ca>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002088:	6822      	ldr	r2, [r4, #0]
 800208a:	6953      	ldr	r3, [r2, #20]
 800208c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002090:	6153      	str	r3, [r2, #20]
 8002092:	e7d1      	b.n	8002038 <HAL_PCD_IRQHandler+0x4b8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002094:	3301      	adds	r3, #1
 8002096:	7922      	ldrb	r2, [r4, #4]
 8002098:	429a      	cmp	r2, r3
 800209a:	d928      	bls.n	80020ee <HAL_PCD_IRQHandler+0x56e>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800209c:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 80020a0:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	@ 0xb00
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80020a4:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80020a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80020ac:	f892 2258 	ldrb.w	r2, [r2, #600]	@ 0x258
 80020b0:	2a01      	cmp	r2, #1
 80020b2:	d1ef      	bne.n	8002094 <HAL_PCD_IRQHandler+0x514>
 80020b4:	2900      	cmp	r1, #0
 80020b6:	daed      	bge.n	8002094 <HAL_PCD_IRQHandler+0x514>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80020b8:	f401 3180 	and.w	r1, r1, #65536	@ 0x10000
 80020bc:	f8d4 24d4 	ldr.w	r2, [r4, #1236]	@ 0x4d4
 80020c0:	f002 0201 	and.w	r2, r2, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80020c4:	4291      	cmp	r1, r2
 80020c6:	d1e5      	bne.n	8002094 <HAL_PCD_IRQHandler+0x514>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80020c8:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80020cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80020d0:	2101      	movs	r1, #1
 80020d2:	f882 1257 	strb.w	r1, [r2, #599]	@ 0x257
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80020d6:	69aa      	ldr	r2, [r5, #24]
 80020d8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020dc:	61aa      	str	r2, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80020de:	696a      	ldr	r2, [r5, #20]
 80020e0:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80020e4:	d1d6      	bne.n	8002094 <HAL_PCD_IRQHandler+0x514>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020ec:	607b      	str	r3, [r7, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80020ee:	6822      	ldr	r2, [r4, #0]
 80020f0:	6953      	ldr	r3, [r2, #20]
 80020f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020f6:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80020f8:	6820      	ldr	r0, [r4, #0]
 80020fa:	f001 fe8f 	bl	8003e1c <USB_ReadInterrupts>
 80020fe:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8002102:	d110      	bne.n	8002126 <HAL_PCD_IRQHandler+0x5a6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002104:	6820      	ldr	r0, [r4, #0]
 8002106:	f001 fe89 	bl	8003e1c <USB_ReadInterrupts>
 800210a:	f010 0f04 	tst.w	r0, #4
 800210e:	f43f ad40 	beq.w	8001b92 <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8002112:	6823      	ldr	r3, [r4, #0]
 8002114:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002116:	f015 0f04 	tst.w	r5, #4
 800211a:	d10d      	bne.n	8002138 <HAL_PCD_IRQHandler+0x5b8>
      hpcd->Instance->GOTGINT |= RegVal;
 800211c:	6822      	ldr	r2, [r4, #0]
 800211e:	6853      	ldr	r3, [r2, #4]
 8002120:	432b      	orrs	r3, r5
 8002122:	6053      	str	r3, [r2, #4]
 8002124:	e535      	b.n	8001b92 <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 8002126:	4620      	mov	r0, r4
 8002128:	f002 ff6a 	bl	8005000 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800212c:	6822      	ldr	r2, [r4, #0]
 800212e:	6953      	ldr	r3, [r2, #20]
 8002130:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002134:	6153      	str	r3, [r2, #20]
 8002136:	e7e5      	b.n	8002104 <HAL_PCD_IRQHandler+0x584>
        HAL_PCD_DisconnectCallback(hpcd);
 8002138:	4620      	mov	r0, r4
 800213a:	f002 ff67 	bl	800500c <HAL_PCD_DisconnectCallback>
 800213e:	e7ed      	b.n	800211c <HAL_PCD_IRQHandler+0x59c>

08002140 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002140:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002142:	6804      	ldr	r4, [r0, #0]
 8002144:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 8002146:	b931      	cbnz	r1, 8002156 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002148:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800214c:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800214e:	2000      	movs	r0, #0
 8002150:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002158:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800215a:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800215e:	2300      	movs	r3, #0
 8002160:	e008      	b.n	8002174 <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002162:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8002166:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800216a:	6849      	ldr	r1, [r1, #4]
 800216c:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002170:	3301      	adds	r3, #1
 8002172:	b2db      	uxtb	r3, r3
 8002174:	f10c 31ff 	add.w	r1, ip, #4294967295	@ 0xffffffff
 8002178:	428b      	cmp	r3, r1
 800217a:	d3f2      	bcc.n	8002162 <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800217c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8002180:	f10c 013f 	add.w	r1, ip, #63	@ 0x3f
 8002184:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8002188:	6060      	str	r0, [r4, #4]
 800218a:	e7e0      	b.n	800214e <HAL_PCDEx_SetTxFiFo+0xe>

0800218c <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800218c:	6803      	ldr	r3, [r0, #0]
 800218e:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 8002190:	2000      	movs	r0, #0
 8002192:	4770      	bx	lr

08002194 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002194:	4770      	bx	lr
	...

08002198 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002198:	2800      	cmp	r0, #0
 800219a:	f000 81e0 	beq.w	800255e <HAL_RCC_OscConfig+0x3c6>
{
 800219e:	b570      	push	{r4, r5, r6, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a4:	6803      	ldr	r3, [r0, #0]
 80021a6:	f013 0f01 	tst.w	r3, #1
 80021aa:	d03b      	beq.n	8002224 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021ac:	4b9f      	ldr	r3, [pc, #636]	@ (800242c <HAL_RCC_OscConfig+0x294>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d02c      	beq.n	8002212 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021b8:	4b9c      	ldr	r3, [pc, #624]	@ (800242c <HAL_RCC_OscConfig+0x294>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d021      	beq.n	8002208 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c4:	6863      	ldr	r3, [r4, #4]
 80021c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021ca:	d04f      	beq.n	800226c <HAL_RCC_OscConfig+0xd4>
 80021cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021d0:	d052      	beq.n	8002278 <HAL_RCC_OscConfig+0xe0>
 80021d2:	4b96      	ldr	r3, [pc, #600]	@ (800242c <HAL_RCC_OscConfig+0x294>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80021e2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021e4:	6863      	ldr	r3, [r4, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d050      	beq.n	800228c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7fe fdb7 	bl	8000d5c <HAL_GetTick>
 80021ee:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f0:	4b8e      	ldr	r3, [pc, #568]	@ (800242c <HAL_RCC_OscConfig+0x294>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80021f8:	d114      	bne.n	8002224 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021fa:	f7fe fdaf 	bl	8000d5c <HAL_GetTick>
 80021fe:	1b40      	subs	r0, r0, r5
 8002200:	2864      	cmp	r0, #100	@ 0x64
 8002202:	d9f5      	bls.n	80021f0 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002204:	2003      	movs	r0, #3
 8002206:	e1b1      	b.n	800256c <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002208:	4b88      	ldr	r3, [pc, #544]	@ (800242c <HAL_RCC_OscConfig+0x294>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002210:	d0d8      	beq.n	80021c4 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002212:	4b86      	ldr	r3, [pc, #536]	@ (800242c <HAL_RCC_OscConfig+0x294>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800221a:	d003      	beq.n	8002224 <HAL_RCC_OscConfig+0x8c>
 800221c:	6863      	ldr	r3, [r4, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 819f 	beq.w	8002562 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002224:	6823      	ldr	r3, [r4, #0]
 8002226:	f013 0f02 	tst.w	r3, #2
 800222a:	d054      	beq.n	80022d6 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800222c:	4b7f      	ldr	r3, [pc, #508]	@ (800242c <HAL_RCC_OscConfig+0x294>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f013 0f0c 	tst.w	r3, #12
 8002234:	d03e      	beq.n	80022b4 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002236:	4b7d      	ldr	r3, [pc, #500]	@ (800242c <HAL_RCC_OscConfig+0x294>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800223e:	2b08      	cmp	r3, #8
 8002240:	d033      	beq.n	80022aa <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002242:	68e3      	ldr	r3, [r4, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d068      	beq.n	800231a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002248:	4b79      	ldr	r3, [pc, #484]	@ (8002430 <HAL_RCC_OscConfig+0x298>)
 800224a:	2201      	movs	r2, #1
 800224c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224e:	f7fe fd85 	bl	8000d5c <HAL_GetTick>
 8002252:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002254:	4b75      	ldr	r3, [pc, #468]	@ (800242c <HAL_RCC_OscConfig+0x294>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f013 0f02 	tst.w	r3, #2
 800225c:	d154      	bne.n	8002308 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800225e:	f7fe fd7d 	bl	8000d5c <HAL_GetTick>
 8002262:	1b40      	subs	r0, r0, r5
 8002264:	2802      	cmp	r0, #2
 8002266:	d9f5      	bls.n	8002254 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002268:	2003      	movs	r0, #3
 800226a:	e17f      	b.n	800256c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800226c:	4a6f      	ldr	r2, [pc, #444]	@ (800242c <HAL_RCC_OscConfig+0x294>)
 800226e:	6813      	ldr	r3, [r2, #0]
 8002270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e7b5      	b.n	80021e4 <HAL_RCC_OscConfig+0x4c>
 8002278:	4b6c      	ldr	r3, [pc, #432]	@ (800242c <HAL_RCC_OscConfig+0x294>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	e7ab      	b.n	80021e4 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800228c:	f7fe fd66 	bl	8000d5c <HAL_GetTick>
 8002290:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002292:	4b66      	ldr	r3, [pc, #408]	@ (800242c <HAL_RCC_OscConfig+0x294>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800229a:	d0c3      	beq.n	8002224 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800229c:	f7fe fd5e 	bl	8000d5c <HAL_GetTick>
 80022a0:	1b40      	subs	r0, r0, r5
 80022a2:	2864      	cmp	r0, #100	@ 0x64
 80022a4:	d9f5      	bls.n	8002292 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80022a6:	2003      	movs	r0, #3
 80022a8:	e160      	b.n	800256c <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022aa:	4b60      	ldr	r3, [pc, #384]	@ (800242c <HAL_RCC_OscConfig+0x294>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80022b2:	d1c6      	bne.n	8002242 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b4:	4b5d      	ldr	r3, [pc, #372]	@ (800242c <HAL_RCC_OscConfig+0x294>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f013 0f02 	tst.w	r3, #2
 80022bc:	d003      	beq.n	80022c6 <HAL_RCC_OscConfig+0x12e>
 80022be:	68e3      	ldr	r3, [r4, #12]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	f040 8150 	bne.w	8002566 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c6:	4a59      	ldr	r2, [pc, #356]	@ (800242c <HAL_RCC_OscConfig+0x294>)
 80022c8:	6813      	ldr	r3, [r2, #0]
 80022ca:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80022ce:	6921      	ldr	r1, [r4, #16]
 80022d0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80022d4:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d6:	6823      	ldr	r3, [r4, #0]
 80022d8:	f013 0f08 	tst.w	r3, #8
 80022dc:	d042      	beq.n	8002364 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022de:	6963      	ldr	r3, [r4, #20]
 80022e0:	b36b      	cbz	r3, 800233e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e2:	4b53      	ldr	r3, [pc, #332]	@ (8002430 <HAL_RCC_OscConfig+0x298>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ea:	f7fe fd37 	bl	8000d5c <HAL_GetTick>
 80022ee:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f0:	4b4e      	ldr	r3, [pc, #312]	@ (800242c <HAL_RCC_OscConfig+0x294>)
 80022f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022f4:	f013 0f02 	tst.w	r3, #2
 80022f8:	d134      	bne.n	8002364 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022fa:	f7fe fd2f 	bl	8000d5c <HAL_GetTick>
 80022fe:	1b40      	subs	r0, r0, r5
 8002300:	2802      	cmp	r0, #2
 8002302:	d9f5      	bls.n	80022f0 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002304:	2003      	movs	r0, #3
 8002306:	e131      	b.n	800256c <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002308:	4a48      	ldr	r2, [pc, #288]	@ (800242c <HAL_RCC_OscConfig+0x294>)
 800230a:	6813      	ldr	r3, [r2, #0]
 800230c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002310:	6921      	ldr	r1, [r4, #16]
 8002312:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	e7dd      	b.n	80022d6 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800231a:	4b45      	ldr	r3, [pc, #276]	@ (8002430 <HAL_RCC_OscConfig+0x298>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002320:	f7fe fd1c 	bl	8000d5c <HAL_GetTick>
 8002324:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002326:	4b41      	ldr	r3, [pc, #260]	@ (800242c <HAL_RCC_OscConfig+0x294>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f013 0f02 	tst.w	r3, #2
 800232e:	d0d2      	beq.n	80022d6 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002330:	f7fe fd14 	bl	8000d5c <HAL_GetTick>
 8002334:	1b40      	subs	r0, r0, r5
 8002336:	2802      	cmp	r0, #2
 8002338:	d9f5      	bls.n	8002326 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800233a:	2003      	movs	r0, #3
 800233c:	e116      	b.n	800256c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800233e:	4b3c      	ldr	r3, [pc, #240]	@ (8002430 <HAL_RCC_OscConfig+0x298>)
 8002340:	2200      	movs	r2, #0
 8002342:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002346:	f7fe fd09 	bl	8000d5c <HAL_GetTick>
 800234a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234c:	4b37      	ldr	r3, [pc, #220]	@ (800242c <HAL_RCC_OscConfig+0x294>)
 800234e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002350:	f013 0f02 	tst.w	r3, #2
 8002354:	d006      	beq.n	8002364 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002356:	f7fe fd01 	bl	8000d5c <HAL_GetTick>
 800235a:	1b40      	subs	r0, r0, r5
 800235c:	2802      	cmp	r0, #2
 800235e:	d9f5      	bls.n	800234c <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8002360:	2003      	movs	r0, #3
 8002362:	e103      	b.n	800256c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002364:	6823      	ldr	r3, [r4, #0]
 8002366:	f013 0f04 	tst.w	r3, #4
 800236a:	d077      	beq.n	800245c <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236c:	4b2f      	ldr	r3, [pc, #188]	@ (800242c <HAL_RCC_OscConfig+0x294>)
 800236e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002370:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002374:	d133      	bne.n	80023de <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	9301      	str	r3, [sp, #4]
 800237a:	4b2c      	ldr	r3, [pc, #176]	@ (800242c <HAL_RCC_OscConfig+0x294>)
 800237c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800237e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002382:	641a      	str	r2, [r3, #64]	@ 0x40
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800238a:	9301      	str	r3, [sp, #4]
 800238c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800238e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002390:	4b28      	ldr	r3, [pc, #160]	@ (8002434 <HAL_RCC_OscConfig+0x29c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002398:	d023      	beq.n	80023e2 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800239a:	68a3      	ldr	r3, [r4, #8]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d034      	beq.n	800240a <HAL_RCC_OscConfig+0x272>
 80023a0:	2b05      	cmp	r3, #5
 80023a2:	d038      	beq.n	8002416 <HAL_RCC_OscConfig+0x27e>
 80023a4:	4b21      	ldr	r3, [pc, #132]	@ (800242c <HAL_RCC_OscConfig+0x294>)
 80023a6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80023a8:	f022 0201 	bic.w	r2, r2, #1
 80023ac:	671a      	str	r2, [r3, #112]	@ 0x70
 80023ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80023b0:	f022 0204 	bic.w	r2, r2, #4
 80023b4:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023b6:	68a3      	ldr	r3, [r4, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d03d      	beq.n	8002438 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023bc:	f7fe fcce 	bl	8000d5c <HAL_GetTick>
 80023c0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c2:	4b1a      	ldr	r3, [pc, #104]	@ (800242c <HAL_RCC_OscConfig+0x294>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c6:	f013 0f02 	tst.w	r3, #2
 80023ca:	d146      	bne.n	800245a <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023cc:	f7fe fcc6 	bl	8000d5c <HAL_GetTick>
 80023d0:	1b80      	subs	r0, r0, r6
 80023d2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80023d6:	4298      	cmp	r0, r3
 80023d8:	d9f3      	bls.n	80023c2 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80023da:	2003      	movs	r0, #3
 80023dc:	e0c6      	b.n	800256c <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80023de:	2500      	movs	r5, #0
 80023e0:	e7d6      	b.n	8002390 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023e2:	4a14      	ldr	r2, [pc, #80]	@ (8002434 <HAL_RCC_OscConfig+0x29c>)
 80023e4:	6813      	ldr	r3, [r2, #0]
 80023e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ea:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80023ec:	f7fe fcb6 	bl	8000d5c <HAL_GetTick>
 80023f0:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f2:	4b10      	ldr	r3, [pc, #64]	@ (8002434 <HAL_RCC_OscConfig+0x29c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80023fa:	d1ce      	bne.n	800239a <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023fc:	f7fe fcae 	bl	8000d5c <HAL_GetTick>
 8002400:	1b80      	subs	r0, r0, r6
 8002402:	2802      	cmp	r0, #2
 8002404:	d9f5      	bls.n	80023f2 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8002406:	2003      	movs	r0, #3
 8002408:	e0b0      	b.n	800256c <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800240a:	4a08      	ldr	r2, [pc, #32]	@ (800242c <HAL_RCC_OscConfig+0x294>)
 800240c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6713      	str	r3, [r2, #112]	@ 0x70
 8002414:	e7cf      	b.n	80023b6 <HAL_RCC_OscConfig+0x21e>
 8002416:	4b05      	ldr	r3, [pc, #20]	@ (800242c <HAL_RCC_OscConfig+0x294>)
 8002418:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800241a:	f042 0204 	orr.w	r2, r2, #4
 800241e:	671a      	str	r2, [r3, #112]	@ 0x70
 8002420:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002422:	f042 0201 	orr.w	r2, r2, #1
 8002426:	671a      	str	r2, [r3, #112]	@ 0x70
 8002428:	e7c5      	b.n	80023b6 <HAL_RCC_OscConfig+0x21e>
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800
 8002430:	42470000 	.word	0x42470000
 8002434:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002438:	f7fe fc90 	bl	8000d5c <HAL_GetTick>
 800243c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243e:	4b52      	ldr	r3, [pc, #328]	@ (8002588 <HAL_RCC_OscConfig+0x3f0>)
 8002440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002442:	f013 0f02 	tst.w	r3, #2
 8002446:	d008      	beq.n	800245a <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002448:	f7fe fc88 	bl	8000d5c <HAL_GetTick>
 800244c:	1b80      	subs	r0, r0, r6
 800244e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002452:	4298      	cmp	r0, r3
 8002454:	d9f3      	bls.n	800243e <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8002456:	2003      	movs	r0, #3
 8002458:	e088      	b.n	800256c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800245a:	b9ed      	cbnz	r5, 8002498 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800245c:	69a3      	ldr	r3, [r4, #24]
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 8083 	beq.w	800256a <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002464:	4a48      	ldr	r2, [pc, #288]	@ (8002588 <HAL_RCC_OscConfig+0x3f0>)
 8002466:	6892      	ldr	r2, [r2, #8]
 8002468:	f002 020c 	and.w	r2, r2, #12
 800246c:	2a08      	cmp	r2, #8
 800246e:	d051      	beq.n	8002514 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002470:	2b02      	cmp	r3, #2
 8002472:	d017      	beq.n	80024a4 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002474:	4b45      	ldr	r3, [pc, #276]	@ (800258c <HAL_RCC_OscConfig+0x3f4>)
 8002476:	2200      	movs	r2, #0
 8002478:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247a:	f7fe fc6f 	bl	8000d5c <HAL_GetTick>
 800247e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002480:	4b41      	ldr	r3, [pc, #260]	@ (8002588 <HAL_RCC_OscConfig+0x3f0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002488:	d042      	beq.n	8002510 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248a:	f7fe fc67 	bl	8000d5c <HAL_GetTick>
 800248e:	1b00      	subs	r0, r0, r4
 8002490:	2802      	cmp	r0, #2
 8002492:	d9f5      	bls.n	8002480 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002494:	2003      	movs	r0, #3
 8002496:	e069      	b.n	800256c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002498:	4a3b      	ldr	r2, [pc, #236]	@ (8002588 <HAL_RCC_OscConfig+0x3f0>)
 800249a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800249c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024a2:	e7db      	b.n	800245c <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80024a4:	4b39      	ldr	r3, [pc, #228]	@ (800258c <HAL_RCC_OscConfig+0x3f4>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80024aa:	f7fe fc57 	bl	8000d5c <HAL_GetTick>
 80024ae:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b0:	4b35      	ldr	r3, [pc, #212]	@ (8002588 <HAL_RCC_OscConfig+0x3f0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80024b8:	d006      	beq.n	80024c8 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ba:	f7fe fc4f 	bl	8000d5c <HAL_GetTick>
 80024be:	1b40      	subs	r0, r0, r5
 80024c0:	2802      	cmp	r0, #2
 80024c2:	d9f5      	bls.n	80024b0 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80024c4:	2003      	movs	r0, #3
 80024c6:	e051      	b.n	800256c <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024c8:	69e3      	ldr	r3, [r4, #28]
 80024ca:	6a22      	ldr	r2, [r4, #32]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80024d0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80024d4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80024d6:	0852      	lsrs	r2, r2, #1
 80024d8:	3a01      	subs	r2, #1
 80024da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80024de:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80024e0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80024e4:	4a28      	ldr	r2, [pc, #160]	@ (8002588 <HAL_RCC_OscConfig+0x3f0>)
 80024e6:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80024e8:	4b28      	ldr	r3, [pc, #160]	@ (800258c <HAL_RCC_OscConfig+0x3f4>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80024ee:	f7fe fc35 	bl	8000d5c <HAL_GetTick>
 80024f2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f4:	4b24      	ldr	r3, [pc, #144]	@ (8002588 <HAL_RCC_OscConfig+0x3f0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80024fc:	d106      	bne.n	800250c <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fe:	f7fe fc2d 	bl	8000d5c <HAL_GetTick>
 8002502:	1b00      	subs	r0, r0, r4
 8002504:	2802      	cmp	r0, #2
 8002506:	d9f5      	bls.n	80024f4 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002508:	2003      	movs	r0, #3
 800250a:	e02f      	b.n	800256c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800250c:	2000      	movs	r0, #0
 800250e:	e02d      	b.n	800256c <HAL_RCC_OscConfig+0x3d4>
 8002510:	2000      	movs	r0, #0
 8002512:	e02b      	b.n	800256c <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002514:	2b01      	cmp	r3, #1
 8002516:	d02b      	beq.n	8002570 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002518:	4b1b      	ldr	r3, [pc, #108]	@ (8002588 <HAL_RCC_OscConfig+0x3f0>)
 800251a:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800251c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8002520:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002522:	4291      	cmp	r1, r2
 8002524:	d126      	bne.n	8002574 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002526:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800252a:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252c:	428a      	cmp	r2, r1
 800252e:	d123      	bne.n	8002578 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002530:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002532:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8002536:	401a      	ands	r2, r3
 8002538:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800253c:	d11e      	bne.n	800257c <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800253e:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002542:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002544:	0852      	lsrs	r2, r2, #1
 8002546:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002548:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800254c:	d118      	bne.n	8002580 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800254e:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002552:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002554:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002558:	d114      	bne.n	8002584 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 800255a:	2000      	movs	r0, #0
 800255c:	e006      	b.n	800256c <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 800255e:	2001      	movs	r0, #1
}
 8002560:	4770      	bx	lr
        return HAL_ERROR;
 8002562:	2001      	movs	r0, #1
 8002564:	e002      	b.n	800256c <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002566:	2001      	movs	r0, #1
 8002568:	e000      	b.n	800256c <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 800256a:	2000      	movs	r0, #0
}
 800256c:	b002      	add	sp, #8
 800256e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002570:	2001      	movs	r0, #1
 8002572:	e7fb      	b.n	800256c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8002574:	2001      	movs	r0, #1
 8002576:	e7f9      	b.n	800256c <HAL_RCC_OscConfig+0x3d4>
 8002578:	2001      	movs	r0, #1
 800257a:	e7f7      	b.n	800256c <HAL_RCC_OscConfig+0x3d4>
 800257c:	2001      	movs	r0, #1
 800257e:	e7f5      	b.n	800256c <HAL_RCC_OscConfig+0x3d4>
 8002580:	2001      	movs	r0, #1
 8002582:	e7f3      	b.n	800256c <HAL_RCC_OscConfig+0x3d4>
 8002584:	2001      	movs	r0, #1
 8002586:	e7f1      	b.n	800256c <HAL_RCC_OscConfig+0x3d4>
 8002588:	40023800 	.word	0x40023800
 800258c:	42470000 	.word	0x42470000

08002590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002590:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002592:	4b26      	ldr	r3, [pc, #152]	@ (800262c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b04      	cmp	r3, #4
 800259c:	d041      	beq.n	8002622 <HAL_RCC_GetSysClockFreq+0x92>
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d141      	bne.n	8002626 <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025a2:	4b22      	ldr	r3, [pc, #136]	@ (800262c <HAL_RCC_GetSysClockFreq+0x9c>)
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80025b0:	d012      	beq.n	80025d8 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b2:	4b1e      	ldr	r3, [pc, #120]	@ (800262c <HAL_RCC_GetSysClockFreq+0x9c>)
 80025b4:	6859      	ldr	r1, [r3, #4]
 80025b6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80025ba:	481d      	ldr	r0, [pc, #116]	@ (8002630 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025bc:	2300      	movs	r3, #0
 80025be:	fba1 0100 	umull	r0, r1, r1, r0
 80025c2:	f7fd fe75 	bl	80002b0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80025c6:	4b19      	ldr	r3, [pc, #100]	@ (800262c <HAL_RCC_GetSysClockFreq+0x9c>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80025ce:	3301      	adds	r3, #1
 80025d0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80025d2:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80025d6:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d8:	4b14      	ldr	r3, [pc, #80]	@ (800262c <HAL_RCC_GetSysClockFreq+0x9c>)
 80025da:	6858      	ldr	r0, [r3, #4]
 80025dc:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80025e0:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80025e4:	ebbc 0c00 	subs.w	ip, ip, r0
 80025e8:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80025ec:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80025f0:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80025f4:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80025f8:	ebb1 010c 	subs.w	r1, r1, ip
 80025fc:	eb63 030e 	sbc.w	r3, r3, lr
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002606:	00c9      	lsls	r1, r1, #3
 8002608:	eb11 0c00 	adds.w	ip, r1, r0
 800260c:	f143 0300 	adc.w	r3, r3, #0
 8002610:	0299      	lsls	r1, r3, #10
 8002612:	2300      	movs	r3, #0
 8002614:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002618:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800261c:	f7fd fe48 	bl	80002b0 <__aeabi_uldivmod>
 8002620:	e7d1      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8002622:	4803      	ldr	r0, [pc, #12]	@ (8002630 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002624:	e7d7      	b.n	80025d6 <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002626:	4803      	ldr	r0, [pc, #12]	@ (8002634 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 8002628:	e7d5      	b.n	80025d6 <HAL_RCC_GetSysClockFreq+0x46>
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800
 8002630:	017d7840 	.word	0x017d7840
 8002634:	00f42400 	.word	0x00f42400

08002638 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002638:	2800      	cmp	r0, #0
 800263a:	f000 809b 	beq.w	8002774 <HAL_RCC_ClockConfig+0x13c>
{
 800263e:	b570      	push	{r4, r5, r6, lr}
 8002640:	460d      	mov	r5, r1
 8002642:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002644:	4b4f      	ldr	r3, [pc, #316]	@ (8002784 <HAL_RCC_ClockConfig+0x14c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	428b      	cmp	r3, r1
 800264e:	d208      	bcs.n	8002662 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002650:	b2cb      	uxtb	r3, r1
 8002652:	4a4c      	ldr	r2, [pc, #304]	@ (8002784 <HAL_RCC_ClockConfig+0x14c>)
 8002654:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002656:	6813      	ldr	r3, [r2, #0]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	428b      	cmp	r3, r1
 800265e:	f040 808b 	bne.w	8002778 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002662:	6823      	ldr	r3, [r4, #0]
 8002664:	f013 0f02 	tst.w	r3, #2
 8002668:	d017      	beq.n	800269a <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266a:	f013 0f04 	tst.w	r3, #4
 800266e:	d004      	beq.n	800267a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002670:	4a45      	ldr	r2, [pc, #276]	@ (8002788 <HAL_RCC_ClockConfig+0x150>)
 8002672:	6893      	ldr	r3, [r2, #8]
 8002674:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002678:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267a:	6823      	ldr	r3, [r4, #0]
 800267c:	f013 0f08 	tst.w	r3, #8
 8002680:	d004      	beq.n	800268c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002682:	4a41      	ldr	r2, [pc, #260]	@ (8002788 <HAL_RCC_ClockConfig+0x150>)
 8002684:	6893      	ldr	r3, [r2, #8]
 8002686:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800268a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800268c:	4a3e      	ldr	r2, [pc, #248]	@ (8002788 <HAL_RCC_ClockConfig+0x150>)
 800268e:	6893      	ldr	r3, [r2, #8]
 8002690:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002694:	68a1      	ldr	r1, [r4, #8]
 8002696:	430b      	orrs	r3, r1
 8002698:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269a:	6823      	ldr	r3, [r4, #0]
 800269c:	f013 0f01 	tst.w	r3, #1
 80026a0:	d032      	beq.n	8002708 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a2:	6863      	ldr	r3, [r4, #4]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d021      	beq.n	80026ec <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026a8:	1e9a      	subs	r2, r3, #2
 80026aa:	2a01      	cmp	r2, #1
 80026ac:	d925      	bls.n	80026fa <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ae:	4a36      	ldr	r2, [pc, #216]	@ (8002788 <HAL_RCC_ClockConfig+0x150>)
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	f012 0f02 	tst.w	r2, #2
 80026b6:	d061      	beq.n	800277c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026b8:	4933      	ldr	r1, [pc, #204]	@ (8002788 <HAL_RCC_ClockConfig+0x150>)
 80026ba:	688a      	ldr	r2, [r1, #8]
 80026bc:	f022 0203 	bic.w	r2, r2, #3
 80026c0:	4313      	orrs	r3, r2
 80026c2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80026c4:	f7fe fb4a 	bl	8000d5c <HAL_GetTick>
 80026c8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002788 <HAL_RCC_ClockConfig+0x150>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	6862      	ldr	r2, [r4, #4]
 80026d4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80026d8:	d016      	beq.n	8002708 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026da:	f7fe fb3f 	bl	8000d5c <HAL_GetTick>
 80026de:	1b80      	subs	r0, r0, r6
 80026e0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80026e4:	4298      	cmp	r0, r3
 80026e6:	d9f0      	bls.n	80026ca <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80026e8:	2003      	movs	r0, #3
 80026ea:	e042      	b.n	8002772 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ec:	4a26      	ldr	r2, [pc, #152]	@ (8002788 <HAL_RCC_ClockConfig+0x150>)
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80026f4:	d1e0      	bne.n	80026b8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80026f6:	2001      	movs	r0, #1
 80026f8:	e03b      	b.n	8002772 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fa:	4a23      	ldr	r2, [pc, #140]	@ (8002788 <HAL_RCC_ClockConfig+0x150>)
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002702:	d1d9      	bne.n	80026b8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002704:	2001      	movs	r0, #1
 8002706:	e034      	b.n	8002772 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002708:	4b1e      	ldr	r3, [pc, #120]	@ (8002784 <HAL_RCC_ClockConfig+0x14c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	42ab      	cmp	r3, r5
 8002712:	d907      	bls.n	8002724 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002714:	b2ea      	uxtb	r2, r5
 8002716:	4b1b      	ldr	r3, [pc, #108]	@ (8002784 <HAL_RCC_ClockConfig+0x14c>)
 8002718:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	42ab      	cmp	r3, r5
 8002722:	d12d      	bne.n	8002780 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002724:	6823      	ldr	r3, [r4, #0]
 8002726:	f013 0f04 	tst.w	r3, #4
 800272a:	d006      	beq.n	800273a <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800272c:	4a16      	ldr	r2, [pc, #88]	@ (8002788 <HAL_RCC_ClockConfig+0x150>)
 800272e:	6893      	ldr	r3, [r2, #8]
 8002730:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002734:	68e1      	ldr	r1, [r4, #12]
 8002736:	430b      	orrs	r3, r1
 8002738:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273a:	6823      	ldr	r3, [r4, #0]
 800273c:	f013 0f08 	tst.w	r3, #8
 8002740:	d007      	beq.n	8002752 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002742:	4a11      	ldr	r2, [pc, #68]	@ (8002788 <HAL_RCC_ClockConfig+0x150>)
 8002744:	6893      	ldr	r3, [r2, #8]
 8002746:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800274a:	6921      	ldr	r1, [r4, #16]
 800274c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002750:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002752:	f7ff ff1d 	bl	8002590 <HAL_RCC_GetSysClockFreq>
 8002756:	4b0c      	ldr	r3, [pc, #48]	@ (8002788 <HAL_RCC_ClockConfig+0x150>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800275e:	4a0b      	ldr	r2, [pc, #44]	@ (800278c <HAL_RCC_ClockConfig+0x154>)
 8002760:	5cd3      	ldrb	r3, [r2, r3]
 8002762:	40d8      	lsrs	r0, r3
 8002764:	4b0a      	ldr	r3, [pc, #40]	@ (8002790 <HAL_RCC_ClockConfig+0x158>)
 8002766:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002768:	4b0a      	ldr	r3, [pc, #40]	@ (8002794 <HAL_RCC_ClockConfig+0x15c>)
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	f7fe faaa 	bl	8000cc4 <HAL_InitTick>
  return HAL_OK;
 8002770:	2000      	movs	r0, #0
}
 8002772:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002774:	2001      	movs	r0, #1
}
 8002776:	4770      	bx	lr
      return HAL_ERROR;
 8002778:	2001      	movs	r0, #1
 800277a:	e7fa      	b.n	8002772 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 800277c:	2001      	movs	r0, #1
 800277e:	e7f8      	b.n	8002772 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002780:	2001      	movs	r0, #1
 8002782:	e7f6      	b.n	8002772 <HAL_RCC_ClockConfig+0x13a>
 8002784:	40023c00 	.word	0x40023c00
 8002788:	40023800 	.word	0x40023800
 800278c:	08006a3c 	.word	0x08006a3c
 8002790:	20000000 	.word	0x20000000
 8002794:	20000008 	.word	0x20000008

08002798 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002798:	4b01      	ldr	r3, [pc, #4]	@ (80027a0 <HAL_RCC_GetHCLKFreq+0x8>)
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	20000000 	.word	0x20000000

080027a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027a6:	f7ff fff7 	bl	8002798 <HAL_RCC_GetHCLKFreq>
 80027aa:	4b04      	ldr	r3, [pc, #16]	@ (80027bc <HAL_RCC_GetPCLK1Freq+0x18>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80027b2:	4a03      	ldr	r2, [pc, #12]	@ (80027c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80027b4:	5cd3      	ldrb	r3, [r2, r3]
}
 80027b6:	40d8      	lsrs	r0, r3
 80027b8:	bd08      	pop	{r3, pc}
 80027ba:	bf00      	nop
 80027bc:	40023800 	.word	0x40023800
 80027c0:	08006a34 	.word	0x08006a34

080027c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027c6:	f7ff ffe7 	bl	8002798 <HAL_RCC_GetHCLKFreq>
 80027ca:	4b04      	ldr	r3, [pc, #16]	@ (80027dc <HAL_RCC_GetPCLK2Freq+0x18>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80027d2:	4a03      	ldr	r2, [pc, #12]	@ (80027e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80027d4:	5cd3      	ldrb	r3, [r2, r3]
}
 80027d6:	40d8      	lsrs	r0, r3
 80027d8:	bd08      	pop	{r3, pc}
 80027da:	bf00      	nop
 80027dc:	40023800 	.word	0x40023800
 80027e0:	08006a34 	.word	0x08006a34

080027e4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027e4:	b530      	push	{r4, r5, lr}
 80027e6:	b083      	sub	sp, #12
 80027e8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80027ea:	6803      	ldr	r3, [r0, #0]
 80027ec:	f013 0f05 	tst.w	r3, #5
 80027f0:	d10e      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027f2:	6823      	ldr	r3, [r4, #0]
 80027f4:	f013 0f02 	tst.w	r3, #2
 80027f8:	d138      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x88>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80027fa:	6823      	ldr	r3, [r4, #0]
 80027fc:	f013 0f08 	tst.w	r3, #8
 8002800:	f000 809d 	beq.w	800293e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002804:	7d22      	ldrb	r2, [r4, #20]
 8002806:	4b4f      	ldr	r3, [pc, #316]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002808:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800280c:	2000      	movs	r0, #0
 800280e:	e097      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_PLLI2S_DISABLE();
 8002810:	4b4d      	ldr	r3, [pc, #308]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002812:	2200      	movs	r2, #0
 8002814:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8002816:	f7fe faa1 	bl	8000d5c <HAL_GetTick>
 800281a:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800281c:	4b4b      	ldr	r3, [pc, #300]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002824:	d006      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x50>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002826:	f7fe fa99 	bl	8000d5c <HAL_GetTick>
 800282a:	1b43      	subs	r3, r0, r5
 800282c:	2b02      	cmp	r3, #2
 800282e:	d9f5      	bls.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x38>
        return HAL_TIMEOUT;
 8002830:	2003      	movs	r0, #3
 8002832:	e085      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8002834:	6863      	ldr	r3, [r4, #4]
 8002836:	68a2      	ldr	r2, [r4, #8]
 8002838:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800283c:	68e2      	ldr	r2, [r4, #12]
 800283e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002842:	4a42      	ldr	r2, [pc, #264]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002844:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002848:	4b3f      	ldr	r3, [pc, #252]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800284a:	2201      	movs	r2, #1
 800284c:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 800284e:	f7fe fa85 	bl	8000d5c <HAL_GetTick>
 8002852:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002854:	4b3d      	ldr	r3, [pc, #244]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800285c:	d1c9      	bne.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800285e:	f7fe fa7d 	bl	8000d5c <HAL_GetTick>
 8002862:	1b40      	subs	r0, r0, r5
 8002864:	2802      	cmp	r0, #2
 8002866:	d9f5      	bls.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x70>
        return HAL_TIMEOUT;
 8002868:	2003      	movs	r0, #3
 800286a:	e069      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_PWR_CLK_ENABLE();
 800286c:	2300      	movs	r3, #0
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	4b36      	ldr	r3, [pc, #216]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002872:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002874:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002878:	641a      	str	r2, [r3, #64]	@ 0x40
 800287a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002880:	9301      	str	r3, [sp, #4]
 8002882:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002884:	4a32      	ldr	r2, [pc, #200]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8002886:	6813      	ldr	r3, [r2, #0]
 8002888:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800288c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800288e:	f7fe fa65 	bl	8000d5c <HAL_GetTick>
 8002892:	4605      	mov	r5, r0
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002894:	4b2e      	ldr	r3, [pc, #184]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800289c:	d106      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0xc8>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289e:	f7fe fa5d 	bl	8000d5c <HAL_GetTick>
 80028a2:	1b43      	subs	r3, r0, r5
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d9f5      	bls.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        return HAL_TIMEOUT;
 80028a8:	2003      	movs	r0, #3
 80028aa:	e049      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028ac:	4b27      	ldr	r3, [pc, #156]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028b0:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80028b4:	d014      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80028b6:	6922      	ldr	r2, [r4, #16]
 80028b8:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80028bc:	429a      	cmp	r2, r3
 80028be:	d00f      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028c0:	4b22      	ldr	r3, [pc, #136]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80028c4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80028c8:	491f      	ldr	r1, [pc, #124]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028ca:	2001      	movs	r0, #1
 80028cc:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028d0:	2000      	movs	r0, #0
 80028d2:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 80028d6:	671a      	str	r2, [r3, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028da:	f013 0f01 	tst.w	r3, #1
 80028de:	d112      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x122>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028e0:	6923      	ldr	r3, [r4, #16]
 80028e2:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80028e6:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 80028ea:	d01d      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x144>
 80028ec:	4a17      	ldr	r2, [pc, #92]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028ee:	6893      	ldr	r3, [r2, #8]
 80028f0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80028f4:	6093      	str	r3, [r2, #8]
 80028f6:	4915      	ldr	r1, [pc, #84]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028f8:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 80028fa:	6922      	ldr	r2, [r4, #16]
 80028fc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002900:	4313      	orrs	r3, r2
 8002902:	670b      	str	r3, [r1, #112]	@ 0x70
 8002904:	e779      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x16>
        tickstart = HAL_GetTick();
 8002906:	f7fe fa29 	bl	8000d5c <HAL_GetTick>
 800290a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290c:	4b0f      	ldr	r3, [pc, #60]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800290e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002910:	f013 0f02 	tst.w	r3, #2
 8002914:	d1e4      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002916:	f7fe fa21 	bl	8000d5c <HAL_GetTick>
 800291a:	1b40      	subs	r0, r0, r5
 800291c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002920:	4298      	cmp	r0, r3
 8002922:	d9f3      	bls.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x128>
            return HAL_TIMEOUT;
 8002924:	2003      	movs	r0, #3
 8002926:	e00b      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002928:	4908      	ldr	r1, [pc, #32]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800292a:	688a      	ldr	r2, [r1, #8]
 800292c:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8002930:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002934:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002938:	4313      	orrs	r3, r2
 800293a:	608b      	str	r3, [r1, #8]
 800293c:	e7db      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x112>
  return HAL_OK;
 800293e:	2000      	movs	r0, #0
}
 8002940:	b003      	add	sp, #12
 8002942:	bd30      	pop	{r4, r5, pc}
 8002944:	42471000 	.word	0x42471000
 8002948:	42470000 	.word	0x42470000
 800294c:	40023800 	.word	0x40023800
 8002950:	40007000 	.word	0x40007000

08002954 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002954:	b538      	push	{r3, r4, r5, lr}
 8002956:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002958:	6803      	ldr	r3, [r0, #0]
 800295a:	4a0a      	ldr	r2, [pc, #40]	@ (8002984 <HAL_RTC_WaitForSynchro+0x30>)
 800295c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800295e:	f7fe f9fd 	bl	8000d5c <HAL_GetTick>
 8002962:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002964:	6823      	ldr	r3, [r4, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f013 0f20 	tst.w	r3, #32
 800296c:	d107      	bne.n	800297e <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800296e:	f7fe f9f5 	bl	8000d5c <HAL_GetTick>
 8002972:	1b40      	subs	r0, r0, r5
 8002974:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002978:	d9f4      	bls.n	8002964 <HAL_RTC_WaitForSynchro+0x10>
    {
      return HAL_TIMEOUT;
 800297a:	2003      	movs	r0, #3
 800297c:	e000      	b.n	8002980 <HAL_RTC_WaitForSynchro+0x2c>
    }
  }

  return HAL_OK;
 800297e:	2000      	movs	r0, #0
}
 8002980:	bd38      	pop	{r3, r4, r5, pc}
 8002982:	bf00      	nop
 8002984:	00013f5f 	.word	0x00013f5f

08002988 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002988:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800298a:	6803      	ldr	r3, [r0, #0]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8002992:	d002      	beq.n	800299a <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8002994:	2500      	movs	r5, #0
      }
    }
  }

  return status;
}
 8002996:	4628      	mov	r0, r5
 8002998:	bd70      	pop	{r4, r5, r6, pc}
 800299a:	4604      	mov	r4, r0
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80029a2:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80029a4:	f7fe f9da 	bl	8000d5c <HAL_GetTick>
 80029a8:	4606      	mov	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 80029aa:	2500      	movs	r5, #0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80029b4:	d1ef      	bne.n	8002996 <RTC_EnterInitMode+0xe>
 80029b6:	2d00      	cmp	r5, #0
 80029b8:	d1ed      	bne.n	8002996 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80029ba:	f7fe f9cf 	bl	8000d5c <HAL_GetTick>
 80029be:	1b83      	subs	r3, r0, r6
 80029c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029c4:	d9f2      	bls.n	80029ac <RTC_EnterInitMode+0x24>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80029c6:	2304      	movs	r3, #4
 80029c8:	7763      	strb	r3, [r4, #29]
        status = HAL_ERROR;
 80029ca:	2501      	movs	r5, #1
 80029cc:	e7ee      	b.n	80029ac <RTC_EnterInitMode+0x24>

080029ce <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80029ce:	6802      	ldr	r2, [r0, #0]
 80029d0:	68d3      	ldr	r3, [r2, #12]
 80029d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029d6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80029d8:	6803      	ldr	r3, [r0, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f013 0f20 	tst.w	r3, #32
 80029e0:	d001      	beq.n	80029e6 <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80029e2:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 80029e4:	4770      	bx	lr
{
 80029e6:	b510      	push	{r4, lr}
 80029e8:	4604      	mov	r4, r0
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80029ea:	f7ff ffb3 	bl	8002954 <HAL_RTC_WaitForSynchro>
 80029ee:	b110      	cbz	r0, 80029f6 <RTC_ExitInitMode+0x28>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80029f0:	2304      	movs	r3, #4
 80029f2:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 80029f4:	2001      	movs	r0, #1
}
 80029f6:	bd10      	pop	{r4, pc}

080029f8 <HAL_RTC_Init>:
  if (hrtc == NULL)
 80029f8:	2800      	cmp	r0, #0
 80029fa:	d04a      	beq.n	8002a92 <HAL_RTC_Init+0x9a>
{
 80029fc:	b510      	push	{r4, lr}
 80029fe:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002a00:	7f43      	ldrb	r3, [r0, #29]
 8002a02:	b153      	cbz	r3, 8002a1a <HAL_RTC_Init+0x22>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a04:	2302      	movs	r3, #2
 8002a06:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002a08:	6823      	ldr	r3, [r4, #0]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	f012 0f10 	tst.w	r2, #16
 8002a10:	d007      	beq.n	8002a22 <HAL_RTC_Init+0x2a>
    status = HAL_OK;
 8002a12:	2000      	movs	r0, #0
    hrtc->State = HAL_RTC_STATE_READY;
 8002a14:	2301      	movs	r3, #1
 8002a16:	7763      	strb	r3, [r4, #29]
}
 8002a18:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8002a1a:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002a1c:	f7fd fffc 	bl	8000a18 <HAL_RTC_MspInit>
 8002a20:	e7f0      	b.n	8002a04 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a22:	22ca      	movs	r2, #202	@ 0xca
 8002a24:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a26:	6823      	ldr	r3, [r4, #0]
 8002a28:	2253      	movs	r2, #83	@ 0x53
 8002a2a:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	f7ff ffab 	bl	8002988 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8002a32:	b128      	cbz	r0, 8002a40 <HAL_RTC_Init+0x48>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a34:	6823      	ldr	r3, [r4, #0]
 8002a36:	22ff      	movs	r2, #255	@ 0xff
 8002a38:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8002a3a:	2800      	cmp	r0, #0
 8002a3c:	d1ec      	bne.n	8002a18 <HAL_RTC_Init+0x20>
 8002a3e:	e7e9      	b.n	8002a14 <HAL_RTC_Init+0x1c>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002a40:	6822      	ldr	r2, [r4, #0]
 8002a42:	6893      	ldr	r3, [r2, #8]
 8002a44:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002a48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a4c:	6093      	str	r3, [r2, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a4e:	6821      	ldr	r1, [r4, #0]
 8002a50:	688a      	ldr	r2, [r1, #8]
 8002a52:	6863      	ldr	r3, [r4, #4]
 8002a54:	6920      	ldr	r0, [r4, #16]
 8002a56:	4303      	orrs	r3, r0
 8002a58:	6960      	ldr	r0, [r4, #20]
 8002a5a:	4303      	orrs	r3, r0
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	608b      	str	r3, [r1, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002a60:	6823      	ldr	r3, [r4, #0]
 8002a62:	68e2      	ldr	r2, [r4, #12]
 8002a64:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002a66:	6822      	ldr	r2, [r4, #0]
 8002a68:	6913      	ldr	r3, [r2, #16]
 8002a6a:	68a1      	ldr	r1, [r4, #8]
 8002a6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002a70:	6113      	str	r3, [r2, #16]
      status = RTC_ExitInitMode(hrtc);
 8002a72:	4620      	mov	r0, r4
 8002a74:	f7ff ffab 	bl	80029ce <RTC_ExitInitMode>
    if (status == HAL_OK)
 8002a78:	2800      	cmp	r0, #0
 8002a7a:	d1db      	bne.n	8002a34 <HAL_RTC_Init+0x3c>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002a7c:	6822      	ldr	r2, [r4, #0]
 8002a7e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002a80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a84:	6413      	str	r3, [r2, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002a86:	6822      	ldr	r2, [r4, #0]
 8002a88:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002a8a:	69a1      	ldr	r1, [r4, #24]
 8002a8c:	430b      	orrs	r3, r1
 8002a8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a90:	e7d0      	b.n	8002a34 <HAL_RTC_Init+0x3c>
    return HAL_ERROR;
 8002a92:	2001      	movs	r0, #1
}
 8002a94:	4770      	bx	lr

08002a96 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002a96:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a98:	f102 030c 	add.w	r3, r2, #12
 8002a9c:	e853 3f00 	ldrex	r3, [r3]
 8002aa0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa4:	320c      	adds	r2, #12
 8002aa6:	e842 3100 	strex	r1, r3, [r2]
 8002aaa:	2900      	cmp	r1, #0
 8002aac:	d1f3      	bne.n	8002a96 <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002aae:	2320      	movs	r3, #32
 8002ab0:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
}
 8002ab4:	4770      	bx	lr

08002ab6 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ab6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab8:	f102 030c 	add.w	r3, r2, #12
 8002abc:	e853 3f00 	ldrex	r3, [r3]
 8002ac0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac4:	320c      	adds	r2, #12
 8002ac6:	e842 3100 	strex	r1, r3, [r2]
 8002aca:	2900      	cmp	r1, #0
 8002acc:	d1f3      	bne.n	8002ab6 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ace:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad0:	f102 0314 	add.w	r3, r2, #20
 8002ad4:	e853 3f00 	ldrex	r3, [r3]
 8002ad8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002adc:	3214      	adds	r2, #20
 8002ade:	e842 3100 	strex	r1, r3, [r2]
 8002ae2:	2900      	cmp	r1, #0
 8002ae4:	d1f3      	bne.n	8002ace <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ae6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d005      	beq.n	8002af8 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002aec:	2320      	movs	r3, #32
 8002aee:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002af2:	2300      	movs	r3, #0
 8002af4:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8002af6:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002af8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002afa:	f102 030c 	add.w	r3, r2, #12
 8002afe:	e853 3f00 	ldrex	r3, [r3]
 8002b02:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b06:	320c      	adds	r2, #12
 8002b08:	e842 3100 	strex	r1, r3, [r2]
 8002b0c:	2900      	cmp	r1, #0
 8002b0e:	d1f3      	bne.n	8002af8 <UART_EndRxTransfer+0x42>
 8002b10:	e7ec      	b.n	8002aec <UART_EndRxTransfer+0x36>

08002b12 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b12:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b21      	cmp	r3, #33	@ 0x21
 8002b1a:	d001      	beq.n	8002b20 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002b1c:	2002      	movs	r0, #2
  }
}
 8002b1e:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b20:	6883      	ldr	r3, [r0, #8]
 8002b22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b26:	d017      	beq.n	8002b58 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b28:	6a03      	ldr	r3, [r0, #32]
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	6202      	str	r2, [r0, #32]
 8002b2e:	781a      	ldrb	r2, [r3, #0]
 8002b30:	6803      	ldr	r3, [r0, #0]
 8002b32:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8002b34:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8002b3e:	b94b      	cbnz	r3, 8002b54 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b40:	6802      	ldr	r2, [r0, #0]
 8002b42:	68d3      	ldr	r3, [r2, #12]
 8002b44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b48:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b4a:	6802      	ldr	r2, [r0, #0]
 8002b4c:	68d3      	ldr	r3, [r2, #12]
 8002b4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b52:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8002b54:	2000      	movs	r0, #0
 8002b56:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b58:	6903      	ldr	r3, [r0, #16]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1e4      	bne.n	8002b28 <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b5e:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	6802      	ldr	r2, [r0, #0]
 8002b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b68:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8002b6a:	6a03      	ldr	r3, [r0, #32]
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	6203      	str	r3, [r0, #32]
 8002b70:	e7e0      	b.n	8002b34 <UART_Transmit_IT+0x22>
	...

08002b74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b74:	b510      	push	{r4, lr}
 8002b76:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b78:	6802      	ldr	r2, [r0, #0]
 8002b7a:	6913      	ldr	r3, [r2, #16]
 8002b7c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b80:	68c1      	ldr	r1, [r0, #12]
 8002b82:	430b      	orrs	r3, r1
 8002b84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b86:	6883      	ldr	r3, [r0, #8]
 8002b88:	6902      	ldr	r2, [r0, #16]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	6943      	ldr	r3, [r0, #20]
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	69c3      	ldr	r3, [r0, #28]
 8002b92:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002b94:	6801      	ldr	r1, [r0, #0]
 8002b96:	68cb      	ldr	r3, [r1, #12]
 8002b98:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002b9c:	f023 030c 	bic.w	r3, r3, #12
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ba4:	6802      	ldr	r2, [r0, #0]
 8002ba6:	6953      	ldr	r3, [r2, #20]
 8002ba8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bac:	6981      	ldr	r1, [r0, #24]
 8002bae:	430b      	orrs	r3, r1
 8002bb0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bb2:	6803      	ldr	r3, [r0, #0]
 8002bb4:	4a31      	ldr	r2, [pc, #196]	@ (8002c7c <UART_SetConfig+0x108>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d006      	beq.n	8002bc8 <UART_SetConfig+0x54>
 8002bba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d002      	beq.n	8002bc8 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bc2:	f7ff fdef 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8002bc6:	e001      	b.n	8002bcc <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bc8:	f7ff fdfc 	bl	80027c4 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bcc:	69e3      	ldr	r3, [r4, #28]
 8002bce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bd2:	d029      	beq.n	8002c28 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	1803      	adds	r3, r0, r0
 8002bd8:	4149      	adcs	r1, r1
 8002bda:	181b      	adds	r3, r3, r0
 8002bdc:	f141 0100 	adc.w	r1, r1, #0
 8002be0:	00c9      	lsls	r1, r1, #3
 8002be2:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	1818      	adds	r0, r3, r0
 8002bea:	6863      	ldr	r3, [r4, #4]
 8002bec:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002bf0:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002bf4:	f141 0100 	adc.w	r1, r1, #0
 8002bf8:	f7fd fb5a 	bl	80002b0 <__aeabi_uldivmod>
 8002bfc:	4a20      	ldr	r2, [pc, #128]	@ (8002c80 <UART_SetConfig+0x10c>)
 8002bfe:	fba2 3100 	umull	r3, r1, r2, r0
 8002c02:	0949      	lsrs	r1, r1, #5
 8002c04:	2364      	movs	r3, #100	@ 0x64
 8002c06:	fb03 0311 	mls	r3, r3, r1, r0
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	3332      	adds	r3, #50	@ 0x32
 8002c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c18:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002c1c:	f003 030f 	and.w	r3, r3, #15
 8002c20:	6821      	ldr	r1, [r4, #0]
 8002c22:	4413      	add	r3, r2
 8002c24:	608b      	str	r3, [r1, #8]
  }
}
 8002c26:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c28:	2300      	movs	r3, #0
 8002c2a:	1802      	adds	r2, r0, r0
 8002c2c:	eb43 0103 	adc.w	r1, r3, r3
 8002c30:	1812      	adds	r2, r2, r0
 8002c32:	f141 0100 	adc.w	r1, r1, #0
 8002c36:	00c9      	lsls	r1, r1, #3
 8002c38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c3c:	00d2      	lsls	r2, r2, #3
 8002c3e:	1810      	adds	r0, r2, r0
 8002c40:	f141 0100 	adc.w	r1, r1, #0
 8002c44:	6862      	ldr	r2, [r4, #4]
 8002c46:	1892      	adds	r2, r2, r2
 8002c48:	415b      	adcs	r3, r3
 8002c4a:	f7fd fb31 	bl	80002b0 <__aeabi_uldivmod>
 8002c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8002c80 <UART_SetConfig+0x10c>)
 8002c50:	fba2 3100 	umull	r3, r1, r2, r0
 8002c54:	0949      	lsrs	r1, r1, #5
 8002c56:	2364      	movs	r3, #100	@ 0x64
 8002c58:	fb03 0311 	mls	r3, r3, r1, r0
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	3332      	adds	r3, #50	@ 0x32
 8002c60:	fba2 2303 	umull	r2, r3, r2, r3
 8002c64:	095b      	lsrs	r3, r3, #5
 8002c66:	005a      	lsls	r2, r3, #1
 8002c68:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8002c6c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	6821      	ldr	r1, [r4, #0]
 8002c76:	4413      	add	r3, r2
 8002c78:	608b      	str	r3, [r1, #8]
 8002c7a:	e7d4      	b.n	8002c26 <UART_SetConfig+0xb2>
 8002c7c:	40011000 	.word	0x40011000
 8002c80:	51eb851f 	.word	0x51eb851f

08002c84 <UART_WaitOnFlagUntilTimeout>:
{
 8002c84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	4605      	mov	r5, r0
 8002c8c:	460e      	mov	r6, r1
 8002c8e:	4617      	mov	r7, r2
 8002c90:	4699      	mov	r9, r3
 8002c92:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c96:	682b      	ldr	r3, [r5, #0]
 8002c98:	681c      	ldr	r4, [r3, #0]
 8002c9a:	ea36 0404 	bics.w	r4, r6, r4
 8002c9e:	bf0c      	ite	eq
 8002ca0:	2401      	moveq	r4, #1
 8002ca2:	2400      	movne	r4, #0
 8002ca4:	42bc      	cmp	r4, r7
 8002ca6:	d128      	bne.n	8002cfa <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8002ca8:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8002cac:	d0f3      	beq.n	8002c96 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cae:	f7fe f855 	bl	8000d5c <HAL_GetTick>
 8002cb2:	eba0 0009 	sub.w	r0, r0, r9
 8002cb6:	4540      	cmp	r0, r8
 8002cb8:	d823      	bhi.n	8002d02 <UART_WaitOnFlagUntilTimeout+0x7e>
 8002cba:	f1b8 0f00 	cmp.w	r8, #0
 8002cbe:	d022      	beq.n	8002d06 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002cc0:	682b      	ldr	r3, [r5, #0]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	f012 0f04 	tst.w	r2, #4
 8002cc8:	d0e5      	beq.n	8002c96 <UART_WaitOnFlagUntilTimeout+0x12>
 8002cca:	2e80      	cmp	r6, #128	@ 0x80
 8002ccc:	d0e3      	beq.n	8002c96 <UART_WaitOnFlagUntilTimeout+0x12>
 8002cce:	2e40      	cmp	r6, #64	@ 0x40
 8002cd0:	d0e1      	beq.n	8002c96 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	f012 0f08 	tst.w	r2, #8
 8002cd8:	d0dd      	beq.n	8002c96 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002cda:	2400      	movs	r4, #0
 8002cdc:	9401      	str	r4, [sp, #4]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	9201      	str	r2, [sp, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	9301      	str	r3, [sp, #4]
 8002ce6:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8002ce8:	4628      	mov	r0, r5
 8002cea:	f7ff fee4 	bl	8002ab6 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cee:	2308      	movs	r3, #8
 8002cf0:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8002cf2:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8002cf6:	2001      	movs	r0, #1
 8002cf8:	e000      	b.n	8002cfc <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8002cfa:	2000      	movs	r0, #0
}
 8002cfc:	b003      	add	sp, #12
 8002cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8002d02:	2003      	movs	r0, #3
 8002d04:	e7fa      	b.n	8002cfc <UART_WaitOnFlagUntilTimeout+0x78>
 8002d06:	2003      	movs	r0, #3
 8002d08:	e7f8      	b.n	8002cfc <UART_WaitOnFlagUntilTimeout+0x78>

08002d0a <HAL_UART_Init>:
  if (huart == NULL)
 8002d0a:	b360      	cbz	r0, 8002d66 <HAL_UART_Init+0x5c>
{
 8002d0c:	b510      	push	{r4, lr}
 8002d0e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002d10:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002d14:	b313      	cbz	r3, 8002d5c <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8002d16:	2324      	movs	r3, #36	@ 0x24
 8002d18:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002d1c:	6822      	ldr	r2, [r4, #0]
 8002d1e:	68d3      	ldr	r3, [r2, #12]
 8002d20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d24:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002d26:	4620      	mov	r0, r4
 8002d28:	f7ff ff24 	bl	8002b74 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d2c:	6822      	ldr	r2, [r4, #0]
 8002d2e:	6913      	ldr	r3, [r2, #16]
 8002d30:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002d34:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d36:	6822      	ldr	r2, [r4, #0]
 8002d38:	6953      	ldr	r3, [r2, #20]
 8002d3a:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002d3e:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002d40:	6822      	ldr	r2, [r4, #0]
 8002d42:	68d3      	ldr	r3, [r2, #12]
 8002d44:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d48:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d4e:	2320      	movs	r3, #32
 8002d50:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d58:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8002d5a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002d5c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002d60:	f7fd fe80 	bl	8000a64 <HAL_UART_MspInit>
 8002d64:	e7d7      	b.n	8002d16 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002d66:	2001      	movs	r0, #1
}
 8002d68:	4770      	bx	lr

08002d6a <HAL_UART_Transmit>:
{
 8002d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002d72:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	d156      	bne.n	8002e2a <HAL_UART_Transmit+0xc0>
 8002d7c:	4604      	mov	r4, r0
 8002d7e:	460d      	mov	r5, r1
 8002d80:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002d82:	2900      	cmp	r1, #0
 8002d84:	d055      	beq.n	8002e32 <HAL_UART_Transmit+0xc8>
 8002d86:	b90a      	cbnz	r2, 8002d8c <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8002d88:	2001      	movs	r0, #1
 8002d8a:	e04f      	b.n	8002e2c <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d90:	2321      	movs	r3, #33	@ 0x21
 8002d92:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8002d96:	f7fd ffe1 	bl	8000d5c <HAL_GetTick>
 8002d9a:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002d9c:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002da0:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da4:	68a3      	ldr	r3, [r4, #8]
 8002da6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002daa:	d002      	beq.n	8002db2 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8002dac:	f04f 0800 	mov.w	r8, #0
 8002db0:	e014      	b.n	8002ddc <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002db2:	6923      	ldr	r3, [r4, #16]
 8002db4:	b32b      	cbz	r3, 8002e02 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 8002db6:	f04f 0800 	mov.w	r8, #0
 8002dba:	e00f      	b.n	8002ddc <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8002dbc:	2320      	movs	r3, #32
 8002dbe:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8002dc2:	2003      	movs	r0, #3
 8002dc4:	e032      	b.n	8002e2c <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dc6:	f838 3b02 	ldrh.w	r3, [r8], #2
 8002dca:	6822      	ldr	r2, [r4, #0]
 8002dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd0:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002dd2:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8002dd4:	b292      	uxth	r2, r2
 8002dd6:	3a01      	subs	r2, #1
 8002dd8:	b292      	uxth	r2, r2
 8002dda:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ddc:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	b193      	cbz	r3, 8002e08 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002de2:	9600      	str	r6, [sp, #0]
 8002de4:	463b      	mov	r3, r7
 8002de6:	2200      	movs	r2, #0
 8002de8:	2180      	movs	r1, #128	@ 0x80
 8002dea:	4620      	mov	r0, r4
 8002dec:	f7ff ff4a 	bl	8002c84 <UART_WaitOnFlagUntilTimeout>
 8002df0:	2800      	cmp	r0, #0
 8002df2:	d1e3      	bne.n	8002dbc <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8002df4:	2d00      	cmp	r5, #0
 8002df6:	d0e6      	beq.n	8002dc6 <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002df8:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e00:	e7e7      	b.n	8002dd2 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8002e02:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002e04:	2500      	movs	r5, #0
 8002e06:	e7e9      	b.n	8002ddc <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e08:	9600      	str	r6, [sp, #0]
 8002e0a:	463b      	mov	r3, r7
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2140      	movs	r1, #64	@ 0x40
 8002e10:	4620      	mov	r0, r4
 8002e12:	f7ff ff37 	bl	8002c84 <UART_WaitOnFlagUntilTimeout>
 8002e16:	b918      	cbnz	r0, 8002e20 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8002e18:	2320      	movs	r3, #32
 8002e1a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8002e1e:	e005      	b.n	8002e2c <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8002e20:	2320      	movs	r3, #32
 8002e22:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8002e26:	2003      	movs	r0, #3
 8002e28:	e000      	b.n	8002e2c <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8002e2a:	2002      	movs	r0, #2
}
 8002e2c:	b002      	add	sp, #8
 8002e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002e32:	2001      	movs	r0, #1
 8002e34:	e7fa      	b.n	8002e2c <HAL_UART_Transmit+0xc2>

08002e36 <HAL_UART_TxCpltCallback>:
}
 8002e36:	4770      	bx	lr

08002e38 <UART_EndTransmit_IT>:
{
 8002e38:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e3a:	6801      	ldr	r1, [r0, #0]
 8002e3c:	68ca      	ldr	r2, [r1, #12]
 8002e3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e42:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002e44:	2220      	movs	r2, #32
 8002e46:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8002e4a:	f7ff fff4 	bl	8002e36 <HAL_UART_TxCpltCallback>
}
 8002e4e:	2000      	movs	r0, #0
 8002e50:	bd08      	pop	{r3, pc}

08002e52 <HAL_UART_RxCpltCallback>:
}
 8002e52:	4770      	bx	lr

08002e54 <HAL_UART_RxHalfCpltCallback>:
}
 8002e54:	4770      	bx	lr

08002e56 <HAL_UART_ErrorCallback>:
}
 8002e56:	4770      	bx	lr

08002e58 <UART_DMAError>:
{
 8002e58:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e5a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002e5c:	6823      	ldr	r3, [r4, #0]
 8002e5e:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002e60:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b21      	cmp	r3, #33	@ 0x21
 8002e68:	d010      	beq.n	8002e8c <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e6a:	6823      	ldr	r3, [r4, #0]
 8002e6c:	695a      	ldr	r2, [r3, #20]
 8002e6e:	f002 0240 	and.w	r2, r2, #64	@ 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002e72:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b22      	cmp	r3, #34	@ 0x22
 8002e7a:	d011      	beq.n	8002ea0 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002e7c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002e7e:	f043 0310 	orr.w	r3, r3, #16
 8002e82:	6463      	str	r3, [r4, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 8002e84:	4620      	mov	r0, r4
 8002e86:	f7ff ffe6 	bl	8002e56 <HAL_UART_ErrorCallback>
}
 8002e8a:	bd10      	pop	{r4, pc}
 8002e8c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002e90:	2a00      	cmp	r2, #0
 8002e92:	d0ea      	beq.n	8002e6a <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	84e3      	strh	r3, [r4, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8002e98:	4620      	mov	r0, r4
 8002e9a:	f7ff fdfc 	bl	8002a96 <UART_EndTxTransfer>
 8002e9e:	e7e4      	b.n	8002e6a <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002ea0:	2a00      	cmp	r2, #0
 8002ea2:	d0eb      	beq.n	8002e7c <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f7ff fe04 	bl	8002ab6 <UART_EndRxTransfer>
 8002eae:	e7e5      	b.n	8002e7c <UART_DMAError+0x24>

08002eb0 <UART_DMAAbortOnError>:
{
 8002eb0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eb2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002eb8:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8002eba:	f7ff ffcc 	bl	8002e56 <HAL_UART_ErrorCallback>
}
 8002ebe:	bd08      	pop	{r3, pc}

08002ec0 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ec0:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b22      	cmp	r3, #34	@ 0x22
 8002ec8:	d169      	bne.n	8002f9e <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eca:	6883      	ldr	r3, [r0, #8]
 8002ecc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ed0:	d04f      	beq.n	8002f72 <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ed2:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ed8:	d004      	beq.n	8002ee4 <UART_Receive_IT+0x24>
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d156      	bne.n	8002f8c <UART_Receive_IT+0xcc>
 8002ede:	6903      	ldr	r3, [r0, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d153      	bne.n	8002f8c <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ee4:	6803      	ldr	r3, [r0, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8002eea:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002eec:	3301      	adds	r3, #1
 8002eee:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8002ef0:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d151      	bne.n	8002fa2 <UART_Receive_IT+0xe2>
{
 8002efe:	b500      	push	{lr}
 8002f00:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f02:	6802      	ldr	r2, [r0, #0]
 8002f04:	68d3      	ldr	r3, [r2, #12]
 8002f06:	f023 0320 	bic.w	r3, r3, #32
 8002f0a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f0c:	6802      	ldr	r2, [r0, #0]
 8002f0e:	68d3      	ldr	r3, [r2, #12]
 8002f10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f14:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f16:	6802      	ldr	r2, [r0, #0]
 8002f18:	6953      	ldr	r3, [r2, #20]
 8002f1a:	f023 0301 	bic.w	r3, r3, #1
 8002f1e:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002f20:	2320      	movs	r3, #32
 8002f22:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f26:	2300      	movs	r3, #0
 8002f28:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f2a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d133      	bne.n	8002f98 <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f30:	2300      	movs	r3, #0
 8002f32:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f34:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f36:	f102 030c 	add.w	r3, r2, #12
 8002f3a:	e853 3f00 	ldrex	r3, [r3]
 8002f3e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f42:	320c      	adds	r2, #12
 8002f44:	e842 3100 	strex	r1, r3, [r2]
 8002f48:	2900      	cmp	r1, #0
 8002f4a:	d1f3      	bne.n	8002f34 <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f4c:	6803      	ldr	r3, [r0, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	f012 0f10 	tst.w	r2, #16
 8002f54:	d006      	beq.n	8002f64 <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f56:	2200      	movs	r2, #0
 8002f58:	9201      	str	r2, [sp, #4]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	9201      	str	r2, [sp, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	9301      	str	r3, [sp, #4]
 8002f62:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f64:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8002f66:	f7fd fbbb 	bl	80006e0 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8002f6a:	2000      	movs	r0, #0
}
 8002f6c:	b003      	add	sp, #12
 8002f6e:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f72:	6902      	ldr	r2, [r0, #16]
 8002f74:	2a00      	cmp	r2, #0
 8002f76:	d1ac      	bne.n	8002ed2 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f78:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f7a:	6803      	ldr	r3, [r0, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f82:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8002f84:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002f86:	3302      	adds	r3, #2
 8002f88:	6283      	str	r3, [r0, #40]	@ 0x28
 8002f8a:	e7b1      	b.n	8002ef0 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f8c:	6803      	ldr	r3, [r0, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f94:	7013      	strb	r3, [r2, #0]
 8002f96:	e7a8      	b.n	8002eea <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 8002f98:	f7ff ff5b 	bl	8002e52 <HAL_UART_RxCpltCallback>
 8002f9c:	e7e5      	b.n	8002f6a <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 8002f9e:	2002      	movs	r0, #2
 8002fa0:	4770      	bx	lr
    return HAL_OK;
 8002fa2:	2000      	movs	r0, #0
}
 8002fa4:	4770      	bx	lr
	...

08002fa8 <HAL_UART_IRQHandler>:
{
 8002fa8:	b510      	push	{r4, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fae:	6802      	ldr	r2, [r0, #0]
 8002fb0:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fb2:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fb4:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8002fb6:	f013 0f0f 	tst.w	r3, #15
 8002fba:	d109      	bne.n	8002fd0 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fbc:	f013 0f20 	tst.w	r3, #32
 8002fc0:	d00c      	beq.n	8002fdc <HAL_UART_IRQHandler+0x34>
 8002fc2:	f010 0f20 	tst.w	r0, #32
 8002fc6:	d009      	beq.n	8002fdc <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 8002fc8:	4620      	mov	r0, r4
 8002fca:	f7ff ff79 	bl	8002ec0 <UART_Receive_IT>
      return;
 8002fce:	e016      	b.n	8002ffe <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fd0:	f011 0101 	ands.w	r1, r1, #1
 8002fd4:	d115      	bne.n	8003002 <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fd6:	f410 7f90 	tst.w	r0, #288	@ 0x120
 8002fda:	d112      	bne.n	8003002 <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fdc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002fde:	2901      	cmp	r1, #1
 8002fe0:	d079      	beq.n	80030d6 <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002fe2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002fe6:	d003      	beq.n	8002ff0 <HAL_UART_IRQHandler+0x48>
 8002fe8:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8002fec:	f040 8114 	bne.w	8003218 <HAL_UART_IRQHandler+0x270>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ff0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002ff4:	d003      	beq.n	8002ffe <HAL_UART_IRQHandler+0x56>
 8002ff6:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8002ffa:	f040 8111 	bne.w	8003220 <HAL_UART_IRQHandler+0x278>
}
 8002ffe:	b002      	add	sp, #8
 8003000:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003002:	f013 0f01 	tst.w	r3, #1
 8003006:	d006      	beq.n	8003016 <HAL_UART_IRQHandler+0x6e>
 8003008:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800300c:	d003      	beq.n	8003016 <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800300e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003010:	f042 0201 	orr.w	r2, r2, #1
 8003014:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003016:	f013 0f04 	tst.w	r3, #4
 800301a:	d004      	beq.n	8003026 <HAL_UART_IRQHandler+0x7e>
 800301c:	b119      	cbz	r1, 8003026 <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800301e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003020:	f042 0202 	orr.w	r2, r2, #2
 8003024:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003026:	f013 0f02 	tst.w	r3, #2
 800302a:	d004      	beq.n	8003036 <HAL_UART_IRQHandler+0x8e>
 800302c:	b119      	cbz	r1, 8003036 <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800302e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003030:	f042 0204 	orr.w	r2, r2, #4
 8003034:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003036:	f013 0f08 	tst.w	r3, #8
 800303a:	d007      	beq.n	800304c <HAL_UART_IRQHandler+0xa4>
 800303c:	f010 0f20 	tst.w	r0, #32
 8003040:	d100      	bne.n	8003044 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003042:	b119      	cbz	r1, 800304c <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003044:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003046:	f042 0208 	orr.w	r2, r2, #8
 800304a:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800304c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800304e:	2a00      	cmp	r2, #0
 8003050:	d0d5      	beq.n	8002ffe <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003052:	f013 0f20 	tst.w	r3, #32
 8003056:	d002      	beq.n	800305e <HAL_UART_IRQHandler+0xb6>
 8003058:	f010 0f20 	tst.w	r0, #32
 800305c:	d129      	bne.n	80030b2 <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800305e:	6823      	ldr	r3, [r4, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003066:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003068:	f012 0f08 	tst.w	r2, #8
 800306c:	d100      	bne.n	8003070 <HAL_UART_IRQHandler+0xc8>
 800306e:	b363      	cbz	r3, 80030ca <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 8003070:	4620      	mov	r0, r4
 8003072:	f7ff fd20 	bl	8002ab6 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003076:	6823      	ldr	r3, [r4, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800307e:	d020      	beq.n	80030c2 <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003080:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003082:	f102 0314 	add.w	r3, r2, #20
 8003086:	e853 3f00 	ldrex	r3, [r3]
 800308a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308e:	3214      	adds	r2, #20
 8003090:	e842 3100 	strex	r1, r3, [r2]
 8003094:	2900      	cmp	r1, #0
 8003096:	d1f3      	bne.n	8003080 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 8003098:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800309a:	b173      	cbz	r3, 80030ba <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800309c:	4a62      	ldr	r2, [pc, #392]	@ (8003228 <HAL_UART_IRQHandler+0x280>)
 800309e:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030a0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80030a2:	f7fe f852 	bl	800114a <HAL_DMA_Abort_IT>
 80030a6:	2800      	cmp	r0, #0
 80030a8:	d0a9      	beq.n	8002ffe <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030aa:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80030ac:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80030ae:	4798      	blx	r3
 80030b0:	e7a5      	b.n	8002ffe <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 80030b2:	4620      	mov	r0, r4
 80030b4:	f7ff ff04 	bl	8002ec0 <UART_Receive_IT>
 80030b8:	e7d1      	b.n	800305e <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 80030ba:	4620      	mov	r0, r4
 80030bc:	f7ff fecb 	bl	8002e56 <HAL_UART_ErrorCallback>
 80030c0:	e79d      	b.n	8002ffe <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 80030c2:	4620      	mov	r0, r4
 80030c4:	f7ff fec7 	bl	8002e56 <HAL_UART_ErrorCallback>
 80030c8:	e799      	b.n	8002ffe <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 80030ca:	4620      	mov	r0, r4
 80030cc:	f7ff fec3 	bl	8002e56 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d0:	2300      	movs	r3, #0
 80030d2:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 80030d4:	e793      	b.n	8002ffe <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80030d6:	f013 0f10 	tst.w	r3, #16
 80030da:	d082      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80030dc:	f010 0f10 	tst.w	r0, #16
 80030e0:	f43f af7f 	beq.w	8002fe2 <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030e4:	2300      	movs	r3, #0
 80030e6:	9301      	str	r3, [sp, #4]
 80030e8:	6813      	ldr	r3, [r2, #0]
 80030ea:	9301      	str	r3, [sp, #4]
 80030ec:	6853      	ldr	r3, [r2, #4]
 80030ee:	9301      	str	r3, [sp, #4]
 80030f0:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f2:	6953      	ldr	r3, [r2, #20]
 80030f4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80030f8:	d052      	beq.n	80031a0 <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030fa:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80030fc:	6813      	ldr	r3, [r2, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8003102:	2b00      	cmp	r3, #0
 8003104:	f43f af7b 	beq.w	8002ffe <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003108:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800310a:	4299      	cmp	r1, r3
 800310c:	f67f af77 	bls.w	8002ffe <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 8003110:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003112:	69d3      	ldr	r3, [r2, #28]
 8003114:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003118:	d037      	beq.n	800318a <HAL_UART_IRQHandler+0x1e2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800311a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311c:	f102 030c 	add.w	r3, r2, #12
 8003120:	e853 3f00 	ldrex	r3, [r3]
 8003124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003128:	320c      	adds	r2, #12
 800312a:	e842 3100 	strex	r1, r3, [r2]
 800312e:	2900      	cmp	r1, #0
 8003130:	d1f3      	bne.n	800311a <HAL_UART_IRQHandler+0x172>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003132:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003134:	f102 0314 	add.w	r3, r2, #20
 8003138:	e853 3f00 	ldrex	r3, [r3]
 800313c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003140:	3214      	adds	r2, #20
 8003142:	e842 3100 	strex	r1, r3, [r2]
 8003146:	2900      	cmp	r1, #0
 8003148:	d1f3      	bne.n	8003132 <HAL_UART_IRQHandler+0x18a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800314a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314c:	f102 0314 	add.w	r3, r2, #20
 8003150:	e853 3f00 	ldrex	r3, [r3]
 8003154:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003158:	3214      	adds	r2, #20
 800315a:	e842 3100 	strex	r1, r3, [r2]
 800315e:	2900      	cmp	r1, #0
 8003160:	d1f3      	bne.n	800314a <HAL_UART_IRQHandler+0x1a2>
          huart->RxState = HAL_UART_STATE_READY;
 8003162:	2320      	movs	r3, #32
 8003164:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003168:	2300      	movs	r3, #0
 800316a:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800316c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316e:	f102 030c 	add.w	r3, r2, #12
 8003172:	e853 3f00 	ldrex	r3, [r3]
 8003176:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317a:	320c      	adds	r2, #12
 800317c:	e842 3100 	strex	r1, r3, [r2]
 8003180:	2900      	cmp	r1, #0
 8003182:	d1f3      	bne.n	800316c <HAL_UART_IRQHandler+0x1c4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003184:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003186:	f7fd ff96 	bl	80010b6 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800318a:	2302      	movs	r3, #2
 800318c:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800318e:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003190:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003192:	b29b      	uxth	r3, r3
 8003194:	1ac9      	subs	r1, r1, r3
 8003196:	b289      	uxth	r1, r1
 8003198:	4620      	mov	r0, r4
 800319a:	f7fd faa1 	bl	80006e0 <HAL_UARTEx_RxEventCallback>
      return;
 800319e:	e72e      	b.n	8002ffe <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031a0:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80031a2:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	1ac9      	subs	r1, r1, r3
 80031a8:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80031aa:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f43f af25 	beq.w	8002ffe <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 80031b4:	2900      	cmp	r1, #0
 80031b6:	f43f af22 	beq.w	8002ffe <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ba:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031bc:	f102 030c 	add.w	r3, r2, #12
 80031c0:	e853 3f00 	ldrex	r3, [r3]
 80031c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c8:	320c      	adds	r2, #12
 80031ca:	e842 3000 	strex	r0, r3, [r2]
 80031ce:	2800      	cmp	r0, #0
 80031d0:	d1f3      	bne.n	80031ba <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d4:	f102 0314 	add.w	r3, r2, #20
 80031d8:	e853 3f00 	ldrex	r3, [r3]
 80031dc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e0:	3214      	adds	r2, #20
 80031e2:	e842 3000 	strex	r0, r3, [r2]
 80031e6:	2800      	cmp	r0, #0
 80031e8:	d1f3      	bne.n	80031d2 <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 80031ea:	2320      	movs	r3, #32
 80031ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f0:	2300      	movs	r3, #0
 80031f2:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031f4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f6:	f102 030c 	add.w	r3, r2, #12
 80031fa:	e853 3f00 	ldrex	r3, [r3]
 80031fe:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003202:	320c      	adds	r2, #12
 8003204:	e842 3000 	strex	r0, r3, [r2]
 8003208:	2800      	cmp	r0, #0
 800320a:	d1f3      	bne.n	80031f4 <HAL_UART_IRQHandler+0x24c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800320c:	2302      	movs	r3, #2
 800320e:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003210:	4620      	mov	r0, r4
 8003212:	f7fd fa65 	bl	80006e0 <HAL_UARTEx_RxEventCallback>
      return;
 8003216:	e6f2      	b.n	8002ffe <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 8003218:	4620      	mov	r0, r4
 800321a:	f7ff fc7a 	bl	8002b12 <UART_Transmit_IT>
    return;
 800321e:	e6ee      	b.n	8002ffe <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 8003220:	4620      	mov	r0, r4
 8003222:	f7ff fe09 	bl	8002e38 <UART_EndTransmit_IT>
    return;
 8003226:	e6ea      	b.n	8002ffe <HAL_UART_IRQHandler+0x56>
 8003228:	08002eb1 	.word	0x08002eb1

0800322c <UART_DMARxHalfCplt>:
{
 800322c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800322e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003230:	2301      	movs	r3, #1
 8003232:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003234:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003236:	2b01      	cmp	r3, #1
 8003238:	d002      	beq.n	8003240 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 800323a:	f7ff fe0b 	bl	8002e54 <HAL_UART_RxHalfCpltCallback>
}
 800323e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003240:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8003242:	0849      	lsrs	r1, r1, #1
 8003244:	f7fd fa4c 	bl	80006e0 <HAL_UARTEx_RxEventCallback>
 8003248:	e7f9      	b.n	800323e <UART_DMARxHalfCplt+0x12>

0800324a <UART_DMAReceiveCplt>:
{
 800324a:	b508      	push	{r3, lr}
 800324c:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800324e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003258:	d12b      	bne.n	80032b2 <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800325e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003260:	f102 030c 	add.w	r3, r2, #12
 8003264:	e853 3f00 	ldrex	r3, [r3]
 8003268:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326c:	320c      	adds	r2, #12
 800326e:	e842 3100 	strex	r1, r3, [r2]
 8003272:	2900      	cmp	r1, #0
 8003274:	d1f3      	bne.n	800325e <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003276:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003278:	f102 0314 	add.w	r3, r2, #20
 800327c:	e853 3f00 	ldrex	r3, [r3]
 8003280:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003284:	3214      	adds	r2, #20
 8003286:	e842 3100 	strex	r1, r3, [r2]
 800328a:	2900      	cmp	r1, #0
 800328c:	d1f3      	bne.n	8003276 <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800328e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003290:	f102 0314 	add.w	r3, r2, #20
 8003294:	e853 3f00 	ldrex	r3, [r3]
 8003298:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329c:	3214      	adds	r2, #20
 800329e:	e842 3100 	strex	r1, r3, [r2]
 80032a2:	2900      	cmp	r1, #0
 80032a4:	d1f3      	bne.n	800328e <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 80032a6:	2320      	movs	r3, #32
 80032a8:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032ac:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d007      	beq.n	80032c2 <UART_DMAReceiveCplt+0x78>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032b2:	2300      	movs	r3, #0
 80032b4:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032b6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d00f      	beq.n	80032dc <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 80032bc:	f7ff fdc9 	bl	8002e52 <HAL_UART_RxCpltCallback>
}
 80032c0:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032c2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c4:	f102 030c 	add.w	r3, r2, #12
 80032c8:	e853 3f00 	ldrex	r3, [r3]
 80032cc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d0:	320c      	adds	r2, #12
 80032d2:	e842 3100 	strex	r1, r3, [r2]
 80032d6:	2900      	cmp	r1, #0
 80032d8:	d1f3      	bne.n	80032c2 <UART_DMAReceiveCplt+0x78>
 80032da:	e7ea      	b.n	80032b2 <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032dc:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80032de:	f7fd f9ff 	bl	80006e0 <HAL_UARTEx_RxEventCallback>
 80032e2:	e7ed      	b.n	80032c0 <UART_DMAReceiveCplt+0x76>

080032e4 <UART_Start_Receive_DMA>:
{
 80032e4:	b530      	push	{r4, r5, lr}
 80032e6:	b083      	sub	sp, #12
 80032e8:	4604      	mov	r4, r0
 80032ea:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 80032ec:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 80032ee:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f0:	2500      	movs	r5, #0
 80032f2:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032f4:	2222      	movs	r2, #34	@ 0x22
 80032f6:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80032fa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80032fc:	481f      	ldr	r0, [pc, #124]	@ (800337c <UART_Start_Receive_DMA+0x98>)
 80032fe:	63d0      	str	r0, [r2, #60]	@ 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003300:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003302:	481f      	ldr	r0, [pc, #124]	@ (8003380 <UART_Start_Receive_DMA+0x9c>)
 8003304:	6410      	str	r0, [r2, #64]	@ 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003306:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003308:	481e      	ldr	r0, [pc, #120]	@ (8003384 <UART_Start_Receive_DMA+0xa0>)
 800330a:	64d0      	str	r0, [r2, #76]	@ 0x4c
  huart->hdmarx->XferAbortCallback = NULL;
 800330c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800330e:	6515      	str	r5, [r2, #80]	@ 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003310:	6820      	ldr	r0, [r4, #0]
 8003312:	460a      	mov	r2, r1
 8003314:	1d01      	adds	r1, r0, #4
 8003316:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003318:	f7fd fe98 	bl	800104c <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 800331c:	9501      	str	r5, [sp, #4]
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	9201      	str	r2, [sp, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	9301      	str	r3, [sp, #4]
 8003328:	9b01      	ldr	r3, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 800332a:	6923      	ldr	r3, [r4, #16]
 800332c:	b15b      	cbz	r3, 8003346 <UART_Start_Receive_DMA+0x62>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800332e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	f102 030c 	add.w	r3, r2, #12
 8003334:	e853 3f00 	ldrex	r3, [r3]
 8003338:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333c:	320c      	adds	r2, #12
 800333e:	e842 3100 	strex	r1, r3, [r2]
 8003342:	2900      	cmp	r1, #0
 8003344:	d1f3      	bne.n	800332e <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003346:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003348:	f102 0314 	add.w	r3, r2, #20
 800334c:	e853 3f00 	ldrex	r3, [r3]
 8003350:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003354:	3214      	adds	r2, #20
 8003356:	e842 3100 	strex	r1, r3, [r2]
 800335a:	2900      	cmp	r1, #0
 800335c:	d1f3      	bne.n	8003346 <UART_Start_Receive_DMA+0x62>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800335e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003360:	f102 0314 	add.w	r3, r2, #20
 8003364:	e853 3f00 	ldrex	r3, [r3]
 8003368:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336c:	3214      	adds	r2, #20
 800336e:	e842 3100 	strex	r1, r3, [r2]
 8003372:	2900      	cmp	r1, #0
 8003374:	d1f3      	bne.n	800335e <UART_Start_Receive_DMA+0x7a>
}
 8003376:	2000      	movs	r0, #0
 8003378:	b003      	add	sp, #12
 800337a:	bd30      	pop	{r4, r5, pc}
 800337c:	0800324b 	.word	0x0800324b
 8003380:	0800322d 	.word	0x0800322d
 8003384:	08002e59 	.word	0x08002e59

08003388 <HAL_UARTEx_ReceiveToIdle_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003388:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b20      	cmp	r3, #32
 8003390:	d129      	bne.n	80033e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
{
 8003392:	b510      	push	{r4, lr}
 8003394:	b082      	sub	sp, #8
 8003396:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8003398:	b339      	cbz	r1, 80033ea <HAL_UARTEx_ReceiveToIdle_DMA+0x62>
 800339a:	b912      	cbnz	r2, 80033a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x1a>
      return HAL_ERROR;
 800339c:	2001      	movs	r0, #1
}
 800339e:	b002      	add	sp, #8
 80033a0:	bd10      	pop	{r4, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80033a2:	2301      	movs	r3, #1
 80033a4:	6303      	str	r3, [r0, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033a6:	2300      	movs	r3, #0
 80033a8:	6343      	str	r3, [r0, #52]	@ 0x34
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80033aa:	f7ff ff9b 	bl	80032e4 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 80033ae:	2800      	cmp	r0, #0
 80033b0:	d1f5      	bne.n	800339e <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d001      	beq.n	80033bc <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
        status = HAL_ERROR;
 80033b8:	2001      	movs	r0, #1
    return status;
 80033ba:	e7f0      	b.n	800339e <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033bc:	2300      	movs	r3, #0
 80033be:	9301      	str	r3, [sp, #4]
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	9201      	str	r2, [sp, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	9301      	str	r3, [sp, #4]
 80033ca:	9b01      	ldr	r3, [sp, #4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033cc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ce:	f102 030c 	add.w	r3, r2, #12
 80033d2:	e853 3f00 	ldrex	r3, [r3]
 80033d6:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033da:	320c      	adds	r2, #12
 80033dc:	e842 3100 	strex	r1, r3, [r2]
 80033e0:	2900      	cmp	r1, #0
 80033e2:	d1f3      	bne.n	80033cc <HAL_UARTEx_ReceiveToIdle_DMA+0x44>
 80033e4:	e7db      	b.n	800339e <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
    return HAL_BUSY;
 80033e6:	2002      	movs	r0, #2
}
 80033e8:	4770      	bx	lr
      return HAL_ERROR;
 80033ea:	2001      	movs	r0, #1
 80033ec:	e7d7      	b.n	800339e <HAL_UARTEx_ReceiveToIdle_DMA+0x16>

080033ee <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80033ee:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80033f4:	9b01      	ldr	r3, [sp, #4]
 80033f6:	3301      	adds	r3, #1
 80033f8:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 80033fa:	9b01      	ldr	r3, [sp, #4]
 80033fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003400:	d815      	bhi.n	800342e <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003402:	6903      	ldr	r3, [r0, #16]
 8003404:	2b00      	cmp	r3, #0
 8003406:	daf5      	bge.n	80033f4 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800340c:	6903      	ldr	r3, [r0, #16]
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 8003414:	9b01      	ldr	r3, [sp, #4]
 8003416:	3301      	adds	r3, #1
 8003418:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 800341a:	9b01      	ldr	r3, [sp, #4]
 800341c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003420:	d808      	bhi.n	8003434 <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003422:	6903      	ldr	r3, [r0, #16]
 8003424:	f013 0f01 	tst.w	r3, #1
 8003428:	d1f4      	bne.n	8003414 <USB_CoreReset+0x26>

  return HAL_OK;
 800342a:	2000      	movs	r0, #0
 800342c:	e000      	b.n	8003430 <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 800342e:	2003      	movs	r0, #3
}
 8003430:	b002      	add	sp, #8
 8003432:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003434:	2003      	movs	r0, #3
 8003436:	e7fb      	b.n	8003430 <USB_CoreReset+0x42>

08003438 <USB_CoreInit>:
{
 8003438:	b084      	sub	sp, #16
 800343a:	b510      	push	{r4, lr}
 800343c:	4604      	mov	r4, r0
 800343e:	a803      	add	r0, sp, #12
 8003440:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003444:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d121      	bne.n	8003490 <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800344c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800344e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003452:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003454:	68e3      	ldr	r3, [r4, #12]
 8003456:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800345a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800345e:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003460:	68e3      	ldr	r3, [r4, #12]
 8003462:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003466:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8003468:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d00a      	beq.n	8003486 <USB_CoreInit+0x4e>
    ret = USB_CoreReset(USBx);
 8003470:	4620      	mov	r0, r4
 8003472:	f7ff ffbc 	bl	80033ee <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8003476:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d01c      	beq.n	80034b8 <USB_CoreInit+0x80>
}
 800347e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003482:	b004      	add	sp, #16
 8003484:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003486:	68e3      	ldr	r3, [r4, #12]
 8003488:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800348c:	60e3      	str	r3, [r4, #12]
 800348e:	e7ef      	b.n	8003470 <USB_CoreInit+0x38>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003490:	68e3      	ldr	r3, [r4, #12]
 8003492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003496:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8003498:	4620      	mov	r0, r4
 800349a:	f7ff ffa8 	bl	80033ee <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800349e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80034a2:	b923      	cbnz	r3, 80034ae <USB_CoreInit+0x76>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80034a4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80034a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034aa:	63a3      	str	r3, [r4, #56]	@ 0x38
 80034ac:	e7e3      	b.n	8003476 <USB_CoreInit+0x3e>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034ae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80034b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034b4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80034b6:	e7de      	b.n	8003476 <USB_CoreInit+0x3e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80034b8:	68a3      	ldr	r3, [r4, #8]
 80034ba:	f043 0306 	orr.w	r3, r3, #6
 80034be:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80034c0:	68a3      	ldr	r3, [r4, #8]
 80034c2:	f043 0320 	orr.w	r3, r3, #32
 80034c6:	60a3      	str	r3, [r4, #8]
 80034c8:	e7d9      	b.n	800347e <USB_CoreInit+0x46>
	...

080034cc <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80034cc:	2a02      	cmp	r2, #2
 80034ce:	d00a      	beq.n	80034e6 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 80034d0:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80034d2:	68c3      	ldr	r3, [r0, #12]
 80034d4:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 80034d8:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80034da:	68c3      	ldr	r3, [r0, #12]
 80034dc:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80034e0:	60c3      	str	r3, [r0, #12]
}
 80034e2:	2000      	movs	r0, #0
 80034e4:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80034e6:	4b23      	ldr	r3, [pc, #140]	@ (8003574 <USB_SetTurnaroundTime+0xa8>)
 80034e8:	440b      	add	r3, r1
 80034ea:	4a23      	ldr	r2, [pc, #140]	@ (8003578 <USB_SetTurnaroundTime+0xac>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d92f      	bls.n	8003550 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80034f0:	4b22      	ldr	r3, [pc, #136]	@ (800357c <USB_SetTurnaroundTime+0xb0>)
 80034f2:	440b      	add	r3, r1
 80034f4:	4a22      	ldr	r2, [pc, #136]	@ (8003580 <USB_SetTurnaroundTime+0xb4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d92c      	bls.n	8003554 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80034fa:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 80034fe:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 8003502:	4a20      	ldr	r2, [pc, #128]	@ (8003584 <USB_SetTurnaroundTime+0xb8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d927      	bls.n	8003558 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003508:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 800350c:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 8003510:	4a1d      	ldr	r2, [pc, #116]	@ (8003588 <USB_SetTurnaroundTime+0xbc>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d322      	bcc.n	800355c <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003516:	4b1d      	ldr	r3, [pc, #116]	@ (800358c <USB_SetTurnaroundTime+0xc0>)
 8003518:	440b      	add	r3, r1
 800351a:	4a1d      	ldr	r2, [pc, #116]	@ (8003590 <USB_SetTurnaroundTime+0xc4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d91f      	bls.n	8003560 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003520:	4b1c      	ldr	r3, [pc, #112]	@ (8003594 <USB_SetTurnaroundTime+0xc8>)
 8003522:	440b      	add	r3, r1
 8003524:	4a1c      	ldr	r2, [pc, #112]	@ (8003598 <USB_SetTurnaroundTime+0xcc>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d31c      	bcc.n	8003564 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800352a:	4b1c      	ldr	r3, [pc, #112]	@ (800359c <USB_SetTurnaroundTime+0xd0>)
 800352c:	440b      	add	r3, r1
 800352e:	4a1c      	ldr	r2, [pc, #112]	@ (80035a0 <USB_SetTurnaroundTime+0xd4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d319      	bcc.n	8003568 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003534:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 8003538:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 800353c:	4a19      	ldr	r2, [pc, #100]	@ (80035a4 <USB_SetTurnaroundTime+0xd8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d314      	bcc.n	800356c <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003542:	4b19      	ldr	r3, [pc, #100]	@ (80035a8 <USB_SetTurnaroundTime+0xdc>)
 8003544:	440b      	add	r3, r1
 8003546:	4a19      	ldr	r2, [pc, #100]	@ (80035ac <USB_SetTurnaroundTime+0xe0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d211      	bcs.n	8003570 <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 800354c:	2207      	movs	r2, #7
 800354e:	e7c0      	b.n	80034d2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 8003550:	220f      	movs	r2, #15
 8003552:	e7be      	b.n	80034d2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8003554:	220e      	movs	r2, #14
 8003556:	e7bc      	b.n	80034d2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8003558:	220d      	movs	r2, #13
 800355a:	e7ba      	b.n	80034d2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 800355c:	220c      	movs	r2, #12
 800355e:	e7b8      	b.n	80034d2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8003560:	220b      	movs	r2, #11
 8003562:	e7b6      	b.n	80034d2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8003564:	220a      	movs	r2, #10
 8003566:	e7b4      	b.n	80034d2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8003568:	2209      	movs	r2, #9
 800356a:	e7b2      	b.n	80034d2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 800356c:	2208      	movs	r2, #8
 800356e:	e7b0      	b.n	80034d2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 8003570:	2206      	movs	r2, #6
 8003572:	e7ae      	b.n	80034d2 <USB_SetTurnaroundTime+0x6>
 8003574:	ff275340 	.word	0xff275340
 8003578:	000c34ff 	.word	0x000c34ff
 800357c:	ff1b1e40 	.word	0xff1b1e40
 8003580:	000f423f 	.word	0x000f423f
 8003584:	00124f7f 	.word	0x00124f7f
 8003588:	0013d620 	.word	0x0013d620
 800358c:	fee5b660 	.word	0xfee5b660
 8003590:	0016e35f 	.word	0x0016e35f
 8003594:	feced300 	.word	0xfeced300
 8003598:	001b7740 	.word	0x001b7740
 800359c:	feb35bc0 	.word	0xfeb35bc0
 80035a0:	002191c0 	.word	0x002191c0
 80035a4:	00387520 	.word	0x00387520
 80035a8:	fe5954e0 	.word	0xfe5954e0
 80035ac:	00419ce0 	.word	0x00419ce0

080035b0 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80035b0:	6883      	ldr	r3, [r0, #8]
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	6083      	str	r3, [r0, #8]
}
 80035b8:	2000      	movs	r0, #0
 80035ba:	4770      	bx	lr

080035bc <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80035bc:	6883      	ldr	r3, [r0, #8]
 80035be:	f023 0301 	bic.w	r3, r3, #1
 80035c2:	6083      	str	r3, [r0, #8]
}
 80035c4:	2000      	movs	r0, #0
 80035c6:	4770      	bx	lr

080035c8 <USB_FlushTxFifo>:
{
 80035c8:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	9301      	str	r3, [sp, #4]
    count++;
 80035ce:	9b01      	ldr	r3, [sp, #4]
 80035d0:	3301      	adds	r3, #1
 80035d2:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80035d4:	9b01      	ldr	r3, [sp, #4]
 80035d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80035da:	d815      	bhi.n	8003608 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80035dc:	6903      	ldr	r3, [r0, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	daf5      	bge.n	80035ce <USB_FlushTxFifo+0x6>
  count = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80035e6:	0189      	lsls	r1, r1, #6
 80035e8:	f041 0120 	orr.w	r1, r1, #32
 80035ec:	6101      	str	r1, [r0, #16]
    count++;
 80035ee:	9b01      	ldr	r3, [sp, #4]
 80035f0:	3301      	adds	r3, #1
 80035f2:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80035f4:	9b01      	ldr	r3, [sp, #4]
 80035f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80035fa:	d808      	bhi.n	800360e <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80035fc:	6903      	ldr	r3, [r0, #16]
 80035fe:	f013 0f20 	tst.w	r3, #32
 8003602:	d1f4      	bne.n	80035ee <USB_FlushTxFifo+0x26>
  return HAL_OK;
 8003604:	2000      	movs	r0, #0
 8003606:	e000      	b.n	800360a <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8003608:	2003      	movs	r0, #3
}
 800360a:	b002      	add	sp, #8
 800360c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800360e:	2003      	movs	r0, #3
 8003610:	e7fb      	b.n	800360a <USB_FlushTxFifo+0x42>

08003612 <USB_FlushRxFifo>:
{
 8003612:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	9301      	str	r3, [sp, #4]
    count++;
 8003618:	9b01      	ldr	r3, [sp, #4]
 800361a:	3301      	adds	r3, #1
 800361c:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800361e:	9b01      	ldr	r3, [sp, #4]
 8003620:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003624:	d813      	bhi.n	800364e <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003626:	6903      	ldr	r3, [r0, #16]
 8003628:	2b00      	cmp	r3, #0
 800362a:	daf5      	bge.n	8003618 <USB_FlushRxFifo+0x6>
  count = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003630:	2310      	movs	r3, #16
 8003632:	6103      	str	r3, [r0, #16]
    count++;
 8003634:	9b01      	ldr	r3, [sp, #4]
 8003636:	3301      	adds	r3, #1
 8003638:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800363a:	9b01      	ldr	r3, [sp, #4]
 800363c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003640:	d808      	bhi.n	8003654 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003642:	6903      	ldr	r3, [r0, #16]
 8003644:	f013 0f10 	tst.w	r3, #16
 8003648:	d1f4      	bne.n	8003634 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 800364a:	2000      	movs	r0, #0
 800364c:	e000      	b.n	8003650 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 800364e:	2003      	movs	r0, #3
}
 8003650:	b002      	add	sp, #8
 8003652:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003654:	2003      	movs	r0, #3
 8003656:	e7fb      	b.n	8003650 <USB_FlushRxFifo+0x3e>

08003658 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8003658:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 800365c:	4319      	orrs	r1, r3
 800365e:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8003662:	2000      	movs	r0, #0
 8003664:	4770      	bx	lr
	...

08003668 <USB_DevInit>:
{
 8003668:	b084      	sub	sp, #16
 800366a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366c:	4604      	mov	r4, r0
 800366e:	a807      	add	r0, sp, #28
 8003670:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8003674:	2300      	movs	r3, #0
 8003676:	e006      	b.n	8003686 <USB_DevInit+0x1e>
    USBx->DIEPTXF[i] = 0U;
 8003678:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800367c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003680:	2100      	movs	r1, #0
 8003682:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8003684:	3301      	adds	r3, #1
 8003686:	2b0e      	cmp	r3, #14
 8003688:	d9f6      	bls.n	8003678 <USB_DevInit+0x10>
  if (cfg.vbus_sensing_enable == 0U)
 800368a:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
 800368e:	bb06      	cbnz	r6, 80036d2 <USB_DevInit+0x6a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003690:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 8003694:	f043 0302 	orr.w	r3, r3, #2
 8003698:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800369c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800369e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80036a2:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80036a4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80036a6:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80036aa:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80036ac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80036ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036b2:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036ba:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d115      	bne.n	80036ee <USB_DevInit+0x86>
    if (cfg.speed == USBD_HS_SPEED)
 80036c2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80036c6:	b96b      	cbnz	r3, 80036e4 <USB_DevInit+0x7c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80036c8:	2100      	movs	r1, #0
 80036ca:	4620      	mov	r0, r4
 80036cc:	f7ff ffc4 	bl	8003658 <USB_SetDevSpeed>
 80036d0:	e011      	b.n	80036f6 <USB_DevInit+0x8e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80036d2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80036d4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80036d8:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80036da:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80036dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80036e0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80036e2:	e7e7      	b.n	80036b4 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80036e4:	2101      	movs	r1, #1
 80036e6:	4620      	mov	r0, r4
 80036e8:	f7ff ffb6 	bl	8003658 <USB_SetDevSpeed>
 80036ec:	e003      	b.n	80036f6 <USB_DevInit+0x8e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80036ee:	2103      	movs	r1, #3
 80036f0:	4620      	mov	r0, r4
 80036f2:	f7ff ffb1 	bl	8003658 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80036f6:	2110      	movs	r1, #16
 80036f8:	4620      	mov	r0, r4
 80036fa:	f7ff ff65 	bl	80035c8 <USB_FlushTxFifo>
 80036fe:	4605      	mov	r5, r0
 8003700:	b100      	cbz	r0, 8003704 <USB_DevInit+0x9c>
    ret = HAL_ERROR;
 8003702:	2501      	movs	r5, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003704:	4620      	mov	r0, r4
 8003706:	f7ff ff84 	bl	8003612 <USB_FlushRxFifo>
 800370a:	b100      	cbz	r0, 800370e <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 800370c:	2501      	movs	r5, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800370e:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 8003712:	2300      	movs	r3, #0
 8003714:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003718:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800371c:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003720:	e00a      	b.n	8003738 <USB_DevInit+0xd0>
      if (i == 0U)
 8003722:	b9cb      	cbnz	r3, 8003758 <USB_DevInit+0xf0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003724:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8003728:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800372c:	2200      	movs	r2, #0
 800372e:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003730:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8003734:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003736:	3301      	adds	r3, #1
 8003738:	f89d 101c 	ldrb.w	r1, [sp, #28]
 800373c:	4299      	cmp	r1, r3
 800373e:	d910      	bls.n	8003762 <USB_DevInit+0xfa>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003740:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8003744:	f502 6110 	add.w	r1, r2, #2304	@ 0x900
 8003748:	f8d2 0900 	ldr.w	r0, [r2, #2304]	@ 0x900
 800374c:	2800      	cmp	r0, #0
 800374e:	dbe8      	blt.n	8003722 <USB_DevInit+0xba>
      USBx_INEP(i)->DIEPCTL = 0U;
 8003750:	2000      	movs	r0, #0
 8003752:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8003756:	e7e9      	b.n	800372c <USB_DevInit+0xc4>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003758:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800375c:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8003760:	e7e4      	b.n	800372c <USB_DevInit+0xc4>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003762:	2300      	movs	r3, #0
 8003764:	e00a      	b.n	800377c <USB_DevInit+0x114>
      if (i == 0U)
 8003766:	b1bb      	cbz	r3, 8003798 <USB_DevInit+0x130>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003768:	f04f 4790 	mov.w	r7, #1207959552	@ 0x48000000
 800376c:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003770:	2200      	movs	r2, #0
 8003772:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003774:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8003778:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800377a:	3301      	adds	r3, #1
 800377c:	4299      	cmp	r1, r3
 800377e:	d910      	bls.n	80037a2 <USB_DevInit+0x13a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003780:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8003784:	f502 6030 	add.w	r0, r2, #2816	@ 0xb00
 8003788:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	@ 0xb00
 800378c:	2f00      	cmp	r7, #0
 800378e:	dbea      	blt.n	8003766 <USB_DevInit+0xfe>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003790:	2700      	movs	r7, #0
 8003792:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8003796:	e7eb      	b.n	8003770 <USB_DevInit+0x108>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003798:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
 800379c:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 80037a0:	e7e6      	b.n	8003770 <USB_DevInit+0x108>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80037a2:	f8dc 3010 	ldr.w	r3, [ip, #16]
 80037a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037aa:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80037b2:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 80037b6:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80037b8:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80037bc:	b91b      	cbnz	r3, 80037c6 <USB_DevInit+0x15e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80037be:	69a3      	ldr	r3, [r4, #24]
 80037c0:	f043 0310 	orr.w	r3, r3, #16
 80037c4:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80037c6:	69a2      	ldr	r2, [r4, #24]
 80037c8:	4b0b      	ldr	r3, [pc, #44]	@ (80037f8 <USB_DevInit+0x190>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80037ce:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 80037d2:	b11b      	cbz	r3, 80037dc <USB_DevInit+0x174>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80037d4:	69a3      	ldr	r3, [r4, #24]
 80037d6:	f043 0308 	orr.w	r3, r3, #8
 80037da:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80037dc:	2e01      	cmp	r6, #1
 80037de:	d004      	beq.n	80037ea <USB_DevInit+0x182>
}
 80037e0:	4628      	mov	r0, r5
 80037e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80037e6:	b004      	add	sp, #16
 80037e8:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80037ea:	69a3      	ldr	r3, [r4, #24]
 80037ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80037f0:	f043 0304 	orr.w	r3, r3, #4
 80037f4:	61a3      	str	r3, [r4, #24]
 80037f6:	e7f3      	b.n	80037e0 <USB_DevInit+0x178>
 80037f8:	803c3800 	.word	0x803c3800

080037fc <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80037fc:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8003800:	f003 0306 	and.w	r3, r3, #6
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003804:	2b02      	cmp	r3, #2
 8003806:	d004      	beq.n	8003812 <USB_GetDevSpeed+0x16>
 8003808:	2b06      	cmp	r3, #6
 800380a:	d004      	beq.n	8003816 <USB_GetDevSpeed+0x1a>
 800380c:	b92b      	cbnz	r3, 800381a <USB_GetDevSpeed+0x1e>
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800380e:	2000      	movs	r0, #0
 8003810:	4770      	bx	lr
 8003812:	2002      	movs	r0, #2
 8003814:	4770      	bx	lr
 8003816:	2002      	movs	r0, #2
 8003818:	4770      	bx	lr
 800381a:	200f      	movs	r0, #15
}
 800381c:	4770      	bx	lr

0800381e <USB_ActivateEndpoint>:
{
 800381e:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8003820:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 8003824:	784b      	ldrb	r3, [r1, #1]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d023      	beq.n	8003872 <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800382a:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
 800382e:	f8d0 381c 	ldr.w	r3, [r0, #2076]	@ 0x81c
 8003832:	f00c 040f 	and.w	r4, ip, #15
 8003836:	2201      	movs	r2, #1
 8003838:	40a2      	lsls	r2, r4
 800383a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800383e:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003842:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8003846:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800384a:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800384e:	d10e      	bne.n	800386e <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003850:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003854:	688a      	ldr	r2, [r1, #8]
 8003856:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800385a:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800385c:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8003860:	4313      	orrs	r3, r2
 8003862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800386a:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800386e:	2000      	movs	r0, #0
 8003870:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003872:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8003876:	f00c 0e0f 	and.w	lr, ip, #15
 800387a:	fa03 f30e 	lsl.w	r3, r3, lr
 800387e:	b29b      	uxth	r3, r3
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003886:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 800388a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800388e:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8003892:	d1ec      	bne.n	800386e <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003894:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003898:	688a      	ldr	r2, [r1, #8]
 800389a:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800389e:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80038a0:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80038a4:	ea42 528c 	orr.w	r2, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038b2:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 80038b6:	e7da      	b.n	800386e <USB_ActivateEndpoint+0x50>

080038b8 <USB_DeactivateEndpoint>:
{
 80038b8:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 80038ba:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80038bc:	784a      	ldrb	r2, [r1, #1]
 80038be:	2a01      	cmp	r2, #1
 80038c0:	d026      	beq.n	8003910 <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80038c2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80038c6:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80038ca:	2a00      	cmp	r2, #0
 80038cc:	db52      	blt.n	8003974 <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80038ce:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 80038d2:	780a      	ldrb	r2, [r1, #0]
 80038d4:	f002 020f 	and.w	r2, r2, #15
 80038d8:	f04f 0c01 	mov.w	ip, #1
 80038dc:	fa0c f202 	lsl.w	r2, ip, r2
 80038e0:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 80038e4:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80038e8:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 80038ec:	7809      	ldrb	r1, [r1, #0]
 80038ee:	f001 010f 	and.w	r1, r1, #15
 80038f2:	fa0c fc01 	lsl.w	ip, ip, r1
 80038f6:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 80038fa:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80038fe:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8003902:	4a23      	ldr	r2, [pc, #140]	@ (8003990 <USB_DeactivateEndpoint+0xd8>)
 8003904:	400a      	ands	r2, r1
 8003906:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 800390a:	2000      	movs	r0, #0
 800390c:	bc30      	pop	{r4, r5}
 800390e:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003910:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003914:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8003918:	2a00      	cmp	r2, #0
 800391a:	db1e      	blt.n	800395a <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800391c:	f8d0 583c 	ldr.w	r5, [r0, #2108]	@ 0x83c
 8003920:	780a      	ldrb	r2, [r1, #0]
 8003922:	f002 020f 	and.w	r2, r2, #15
 8003926:	2401      	movs	r4, #1
 8003928:	fa04 f202 	lsl.w	r2, r4, r2
 800392c:	b292      	uxth	r2, r2
 800392e:	ea25 0202 	bic.w	r2, r5, r2
 8003932:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003936:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 800393a:	7809      	ldrb	r1, [r1, #0]
 800393c:	f001 010f 	and.w	r1, r1, #15
 8003940:	408c      	lsls	r4, r1
 8003942:	b2a4      	uxth	r4, r4
 8003944:	ea22 0204 	bic.w	r2, r2, r4
 8003948:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800394c:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 8003950:	4a10      	ldr	r2, [pc, #64]	@ (8003994 <USB_DeactivateEndpoint+0xdc>)
 8003952:	400a      	ands	r2, r1
 8003954:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8003958:	e7d7      	b.n	800390a <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800395a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 800395e:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8003962:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003966:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 800396a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800396e:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8003972:	e7d3      	b.n	800391c <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003974:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8003978:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800397c:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003980:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8003984:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003988:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 800398c:	e79f      	b.n	80038ce <USB_DeactivateEndpoint+0x16>
 800398e:	bf00      	nop
 8003990:	eff37800 	.word	0xeff37800
 8003994:	ec337800 	.word	0xec337800

08003998 <USB_EPStopXfer>:
{
 8003998:	b410      	push	{r4}
 800399a:	b083      	sub	sp, #12
 800399c:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 80039a2:	7848      	ldrb	r0, [r1, #1]
 80039a4:	2801      	cmp	r0, #1
 80039a6:	d00b      	beq.n	80039c0 <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80039a8:	780b      	ldrb	r3, [r1, #0]
 80039aa:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80039ae:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 80039b2:	2800      	cmp	r0, #0
 80039b4:	db2d      	blt.n	8003a12 <USB_EPStopXfer+0x7a>
  HAL_StatusTypeDef ret = HAL_OK;
 80039b6:	2000      	movs	r0, #0
}
 80039b8:	b003      	add	sp, #12
 80039ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039be:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039c0:	780b      	ldrb	r3, [r1, #0]
 80039c2:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80039c6:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 80039ca:	2c00      	cmp	r4, #0
 80039cc:	db01      	blt.n	80039d2 <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 80039ce:	2000      	movs	r0, #0
 80039d0:	e7f2      	b.n	80039b8 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80039d2:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 80039d6:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 80039da:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80039de:	780b      	ldrb	r3, [r1, #0]
 80039e0:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80039e4:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 80039e8:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 80039ec:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
        count++;
 80039f0:	9b01      	ldr	r3, [sp, #4]
 80039f2:	3301      	adds	r3, #1
 80039f4:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 80039f6:	9c01      	ldr	r4, [sp, #4]
 80039f8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80039fc:	429c      	cmp	r4, r3
 80039fe:	d8db      	bhi.n	80039b8 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003a00:	780b      	ldrb	r3, [r1, #0]
 8003a02:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8003a06:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	dbf0      	blt.n	80039f0 <USB_EPStopXfer+0x58>
  HAL_StatusTypeDef ret = HAL_OK;
 8003a0e:	2000      	movs	r0, #0
 8003a10:	e7d2      	b.n	80039b8 <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003a12:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8003a16:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 8003a1a:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003a1e:	780b      	ldrb	r3, [r1, #0]
 8003a20:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8003a24:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8003a28:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8003a2c:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
        count++;
 8003a30:	9b01      	ldr	r3, [sp, #4]
 8003a32:	3301      	adds	r3, #1
 8003a34:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8003a36:	9801      	ldr	r0, [sp, #4]
 8003a38:	f242 7310 	movw	r3, #10000	@ 0x2710
 8003a3c:	4298      	cmp	r0, r3
 8003a3e:	d808      	bhi.n	8003a52 <USB_EPStopXfer+0xba>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003a40:	780b      	ldrb	r3, [r1, #0]
 8003a42:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8003a46:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	dbf0      	blt.n	8003a30 <USB_EPStopXfer+0x98>
  HAL_StatusTypeDef ret = HAL_OK;
 8003a4e:	2000      	movs	r0, #0
 8003a50:	e7b2      	b.n	80039b8 <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 8003a52:	2001      	movs	r0, #1
 8003a54:	e7b0      	b.n	80039b8 <USB_EPStopXfer+0x20>

08003a56 <USB_WritePacket>:
{
 8003a56:	b510      	push	{r4, lr}
 8003a58:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8003a5c:	b984      	cbnz	r4, 8003a80 <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8003a5e:	3303      	adds	r3, #3
 8003a60:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8003a64:	f04f 0c00 	mov.w	ip, #0
 8003a68:	e008      	b.n	8003a7c <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003a6a:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8003a6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a72:	f851 4b04 	ldr.w	r4, [r1], #4
 8003a76:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8003a78:	f10c 0c01 	add.w	ip, ip, #1
 8003a7c:	45f4      	cmp	ip, lr
 8003a7e:	d3f4      	bcc.n	8003a6a <USB_WritePacket+0x14>
}
 8003a80:	2000      	movs	r0, #0
 8003a82:	bd10      	pop	{r4, pc}

08003a84 <USB_EPStartXfer>:
{
 8003a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a86:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8003a88:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8003a8a:	784b      	ldrb	r3, [r1, #1]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d02d      	beq.n	8003aec <USB_EPStartXfer+0x68>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a90:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 8003a94:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 8003a98:	691d      	ldr	r5, [r3, #16]
 8003a9a:	f36f 0512 	bfc	r5, #0, #19
 8003a9e:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003aa0:	691d      	ldr	r5, [r3, #16]
 8003aa2:	f36f 45dc 	bfc	r5, #19, #10
 8003aa6:	611d      	str	r5, [r3, #16]
    if (epnum == 0U)
 8003aa8:	2c00      	cmp	r4, #0
 8003aaa:	f040 80ce 	bne.w	8003c4a <USB_EPStartXfer+0x1c6>
      if (ep->xfer_len > 0U)
 8003aae:	690c      	ldr	r4, [r1, #16]
 8003ab0:	b10c      	cbz	r4, 8003ab6 <USB_EPStartXfer+0x32>
        ep->xfer_len = ep->maxpacket;
 8003ab2:	688c      	ldr	r4, [r1, #8]
 8003ab4:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 8003ab6:	688c      	ldr	r4, [r1, #8]
 8003ab8:	620c      	str	r4, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003aba:	691d      	ldr	r5, [r3, #16]
 8003abc:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003ac0:	432c      	orrs	r4, r5
 8003ac2:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003ac4:	691c      	ldr	r4, [r3, #16]
 8003ac6:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8003aca:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8003acc:	2a01      	cmp	r2, #1
 8003ace:	f000 80df 	beq.w	8003c90 <USB_EPStartXfer+0x20c>
    if (ep->type == EP_TYPE_ISOC)
 8003ad2:	790b      	ldrb	r3, [r1, #4]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	f000 80e1 	beq.w	8003c9c <USB_EPStartXfer+0x218>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003ada:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8003ade:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003ae2:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	b003      	add	sp, #12
 8003aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8003aec:	690b      	ldr	r3, [r1, #16]
 8003aee:	bb73      	cbnz	r3, 8003b4e <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003af0:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8003af4:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8003af8:	f36f 45dc 	bfc	r5, #19, #10
 8003afc:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b00:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8003b04:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8003b08:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b0c:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8003b10:	f36f 0512 	bfc	r5, #0, #19
 8003b14:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
    if (dma == 1U)
 8003b18:	2a01      	cmp	r2, #1
 8003b1a:	d054      	beq.n	8003bc6 <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b1c:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8003b20:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8003b24:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003b28:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8003b2c:	790b      	ldrb	r3, [r1, #4]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d072      	beq.n	8003c18 <USB_EPStartXfer+0x194>
        if (ep->xfer_len > 0U)
 8003b32:	690b      	ldr	r3, [r1, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0d6      	beq.n	8003ae6 <USB_EPStartXfer+0x62>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003b38:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
 8003b3c:	7809      	ldrb	r1, [r1, #0]
 8003b3e:	f001 010f 	and.w	r1, r1, #15
 8003b42:	2201      	movs	r2, #1
 8003b44:	408a      	lsls	r2, r1
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 8003b4c:	e7cb      	b.n	8003ae6 <USB_EPStartXfer+0x62>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b4e:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8003b52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b56:	691d      	ldr	r5, [r3, #16]
 8003b58:	f36f 0512 	bfc	r5, #0, #19
 8003b5c:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b5e:	691d      	ldr	r5, [r3, #16]
 8003b60:	f36f 45dc 	bfc	r5, #19, #10
 8003b64:	611d      	str	r5, [r3, #16]
      if (epnum == 0U)
 8003b66:	b984      	cbnz	r4, 8003b8a <USB_EPStartXfer+0x106>
        if (ep->xfer_len > ep->maxpacket)
 8003b68:	690e      	ldr	r6, [r1, #16]
 8003b6a:	688d      	ldr	r5, [r1, #8]
 8003b6c:	42ae      	cmp	r6, r5
 8003b6e:	d900      	bls.n	8003b72 <USB_EPStartXfer+0xee>
          ep->xfer_len = ep->maxpacket;
 8003b70:	610d      	str	r5, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b72:	691d      	ldr	r5, [r3, #16]
 8003b74:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8003b78:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003b7a:	691d      	ldr	r5, [r3, #16]
 8003b7c:	690e      	ldr	r6, [r1, #16]
 8003b7e:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 8003b82:	ea45 050c 	orr.w	r5, r5, ip
 8003b86:	611d      	str	r5, [r3, #16]
 8003b88:	e7c6      	b.n	8003b18 <USB_EPStartXfer+0x94>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003b8a:	690d      	ldr	r5, [r1, #16]
 8003b8c:	688e      	ldr	r6, [r1, #8]
 8003b8e:	4435      	add	r5, r6
 8003b90:	3d01      	subs	r5, #1
 8003b92:	fbb5 f5f6 	udiv	r5, r5, r6
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8003b96:	691e      	ldr	r6, [r3, #16]
 8003b98:	fa1f fc85 	uxth.w	ip, r5
 8003b9c:	4f49      	ldr	r7, [pc, #292]	@ (8003cc4 <USB_EPStartXfer+0x240>)
 8003b9e:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8003ba2:	4335      	orrs	r5, r6
 8003ba4:	611d      	str	r5, [r3, #16]
        if (ep->type == EP_TYPE_ISOC)
 8003ba6:	790d      	ldrb	r5, [r1, #4]
 8003ba8:	2d01      	cmp	r5, #1
 8003baa:	d1e6      	bne.n	8003b7a <USB_EPStartXfer+0xf6>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003bac:	691d      	ldr	r5, [r3, #16]
 8003bae:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 8003bb2:	611d      	str	r5, [r3, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8003bb4:	691d      	ldr	r5, [r3, #16]
 8003bb6:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 8003bba:	f00c 4cc0 	and.w	ip, ip, #1610612736	@ 0x60000000
 8003bbe:	ea45 050c 	orr.w	r5, r5, ip
 8003bc2:	611d      	str	r5, [r3, #16]
 8003bc4:	e7d9      	b.n	8003b7a <USB_EPStartXfer+0xf6>
      if ((uint32_t)ep->dma_addr != 0U)
 8003bc6:	69cb      	ldr	r3, [r1, #28]
 8003bc8:	b11b      	cbz	r3, 8003bd2 <USB_EPStartXfer+0x14e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003bca:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8003bce:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
      if (ep->type == EP_TYPE_ISOC)
 8003bd2:	790b      	ldrb	r3, [r1, #4]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d008      	beq.n	8003bea <USB_EPStartXfer+0x166>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003bd8:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8003bdc:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8003be0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003be4:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8003be8:	e77d      	b.n	8003ae6 <USB_EPStartXfer+0x62>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003bea:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8003bee:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003bf2:	d108      	bne.n	8003c06 <USB_EPStartXfer+0x182>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003bf4:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8003bf8:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8003bfc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003c00:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8003c04:	e7e8      	b.n	8003bd8 <USB_EPStartXfer+0x154>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003c06:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8003c0a:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8003c0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c12:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8003c16:	e7df      	b.n	8003bd8 <USB_EPStartXfer+0x154>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003c18:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8003c1c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003c20:	d10c      	bne.n	8003c3c <USB_EPStartXfer+0x1b8>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003c22:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8003c26:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003c2a:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003c2e:	9200      	str	r2, [sp, #0]
 8003c30:	8a0b      	ldrh	r3, [r1, #16]
 8003c32:	780a      	ldrb	r2, [r1, #0]
 8003c34:	68c9      	ldr	r1, [r1, #12]
 8003c36:	f7ff ff0e 	bl	8003a56 <USB_WritePacket>
 8003c3a:	e754      	b.n	8003ae6 <USB_EPStartXfer+0x62>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003c3c:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8003c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c44:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8003c48:	e7f1      	b.n	8003c2e <USB_EPStartXfer+0x1aa>
      if (ep->xfer_len == 0U)
 8003c4a:	690c      	ldr	r4, [r1, #16]
 8003c4c:	b954      	cbnz	r4, 8003c64 <USB_EPStartXfer+0x1e0>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003c4e:	691c      	ldr	r4, [r3, #16]
 8003c50:	688d      	ldr	r5, [r1, #8]
 8003c52:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8003c56:	432c      	orrs	r4, r5
 8003c58:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003c5a:	691c      	ldr	r4, [r3, #16]
 8003c5c:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8003c60:	611c      	str	r4, [r3, #16]
 8003c62:	e733      	b.n	8003acc <USB_EPStartXfer+0x48>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003c64:	688d      	ldr	r5, [r1, #8]
 8003c66:	442c      	add	r4, r5
 8003c68:	3c01      	subs	r4, #1
 8003c6a:	fbb4 f4f5 	udiv	r4, r4, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003c6e:	b2a4      	uxth	r4, r4
 8003c70:	fb04 f505 	mul.w	r5, r4, r5
 8003c74:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003c76:	691d      	ldr	r5, [r3, #16]
 8003c78:	4e12      	ldr	r6, [pc, #72]	@ (8003cc4 <USB_EPStartXfer+0x240>)
 8003c7a:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 8003c7e:	432c      	orrs	r4, r5
 8003c80:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003c82:	691c      	ldr	r4, [r3, #16]
 8003c84:	6a0d      	ldr	r5, [r1, #32]
 8003c86:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8003c8a:	432c      	orrs	r4, r5
 8003c8c:	611c      	str	r4, [r3, #16]
 8003c8e:	e71d      	b.n	8003acc <USB_EPStartXfer+0x48>
      if ((uint32_t)ep->xfer_buff != 0U)
 8003c90:	68ca      	ldr	r2, [r1, #12]
 8003c92:	2a00      	cmp	r2, #0
 8003c94:	f43f af1d 	beq.w	8003ad2 <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003c98:	615a      	str	r2, [r3, #20]
 8003c9a:	e71a      	b.n	8003ad2 <USB_EPStartXfer+0x4e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003c9c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8003ca0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003ca4:	d106      	bne.n	8003cb4 <USB_EPStartXfer+0x230>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003ca6:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8003caa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003cae:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8003cb2:	e712      	b.n	8003ada <USB_EPStartXfer+0x56>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003cb4:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8003cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cbc:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8003cc0:	e70b      	b.n	8003ada <USB_EPStartXfer+0x56>
 8003cc2:	bf00      	nop
 8003cc4:	1ff80000 	.word	0x1ff80000

08003cc8 <USB_ReadPacket>:
{
 8003cc8:	b510      	push	{r4, lr}
 8003cca:	4684      	mov	ip, r0
 8003ccc:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 8003cce:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 8003cd2:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	e005      	b.n	8003ce6 <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003cda:	f50c 5180 	add.w	r1, ip, #4096	@ 0x1000
 8003cde:	6809      	ldr	r1, [r1, #0]
 8003ce0:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	4573      	cmp	r3, lr
 8003ce8:	d3f7      	bcc.n	8003cda <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8003cea:	b17a      	cbz	r2, 8003d0c <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003cec:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 8003cf0:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 8003cf4:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003cf6:	b2cb      	uxtb	r3, r1
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	fa24 f303 	lsr.w	r3, r4, r3
 8003cfe:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8003d02:	3101      	adds	r1, #1
      remaining_bytes--;
 8003d04:	3a01      	subs	r2, #1
 8003d06:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8003d08:	2a00      	cmp	r2, #0
 8003d0a:	d1f4      	bne.n	8003cf6 <USB_ReadPacket+0x2e>
}
 8003d0c:	bd10      	pop	{r4, pc}

08003d0e <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8003d0e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8003d10:	784a      	ldrb	r2, [r1, #1]
 8003d12:	2a01      	cmp	r2, #1
 8003d14:	d014      	beq.n	8003d40 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003d16:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003d1a:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8003d1e:	2a00      	cmp	r2, #0
 8003d20:	db06      	blt.n	8003d30 <USB_EPSetStall+0x22>
 8003d22:	b12b      	cbz	r3, 8003d30 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003d24:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003d28:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d2c:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003d30:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003d34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003d38:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003d40:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003d44:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 8003d48:	2a00      	cmp	r2, #0
 8003d4a:	db06      	blt.n	8003d5a <USB_EPSetStall+0x4c>
 8003d4c:	b12b      	cbz	r3, 8003d5a <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003d4e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003d52:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d56:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003d5a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003d5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003d62:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8003d66:	e7e9      	b.n	8003d3c <USB_EPSetStall+0x2e>

08003d68 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8003d68:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8003d6a:	784a      	ldrb	r2, [r1, #1]
 8003d6c:	2a01      	cmp	r2, #1
 8003d6e:	d00e      	beq.n	8003d8e <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d70:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003d74:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003d78:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d7c:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d80:	790b      	ldrb	r3, [r1, #4]
 8003d82:	3b02      	subs	r3, #2
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d915      	bls.n	8003db6 <USB_EPClearStall+0x4e>
}
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d8e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003d92:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003d96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d9a:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d9e:	790b      	ldrb	r3, [r1, #4]
 8003da0:	3b02      	subs	r3, #2
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d8f0      	bhi.n	8003d8a <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003da8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003db0:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8003db4:	e7e9      	b.n	8003d8a <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003db6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003dba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dbe:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8003dc2:	e7e2      	b.n	8003d8a <USB_EPClearStall+0x22>

08003dc4 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003dc4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8003dc8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003dcc:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003dd0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8003dd4:	0109      	lsls	r1, r1, #4
 8003dd6:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 8003dda:	430b      	orrs	r3, r1
 8003ddc:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
}
 8003de0:	2000      	movs	r0, #0
 8003de2:	4770      	bx	lr

08003de4 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003de4:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8003de8:	f023 0303 	bic.w	r3, r3, #3
 8003dec:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003df0:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8003df4:	f023 0302 	bic.w	r3, r3, #2
 8003df8:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	4770      	bx	lr

08003e00 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e00:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8003e04:	f023 0303 	bic.w	r3, r3, #3
 8003e08:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e0c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8003e10:	f043 0302 	orr.w	r3, r3, #2
 8003e14:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8003e18:	2000      	movs	r0, #0
 8003e1a:	4770      	bx	lr

08003e1c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8003e1c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8003e1e:	6980      	ldr	r0, [r0, #24]
}
 8003e20:	4010      	ands	r0, r2
 8003e22:	4770      	bx	lr

08003e24 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003e24:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8003e28:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003e2c:	69c0      	ldr	r0, [r0, #28]
 8003e2e:	4018      	ands	r0, r3
}
 8003e30:	0c00      	lsrs	r0, r0, #16
 8003e32:	4770      	bx	lr

08003e34 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003e34:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8003e38:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003e3c:	69c0      	ldr	r0, [r0, #28]
 8003e3e:	4018      	ands	r0, r3
}
 8003e40:	b280      	uxth	r0, r0
 8003e42:	4770      	bx	lr

08003e44 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003e44:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8003e48:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003e4c:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 8003e50:	6940      	ldr	r0, [r0, #20]
}
 8003e52:	4010      	ands	r0, r2
 8003e54:	4770      	bx	lr

08003e56 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8003e56:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003e5a:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003e5e:	f001 0c0f 	and.w	ip, r1, #15
 8003e62:	fa23 f30c 	lsr.w	r3, r3, ip
 8003e66:	01db      	lsls	r3, r3, #7
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003e6c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8003e70:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8003e74:	6880      	ldr	r0, [r0, #8]
}
 8003e76:	4018      	ands	r0, r3
 8003e78:	4770      	bx	lr

08003e7a <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8003e7a:	6940      	ldr	r0, [r0, #20]
}
 8003e7c:	f000 0001 	and.w	r0, r0, #1
 8003e80:	4770      	bx	lr

08003e82 <USB_SetCurrentMode>:
{
 8003e82:	b538      	push	{r3, r4, r5, lr}
 8003e84:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e86:	68c3      	ldr	r3, [r0, #12]
 8003e88:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003e8c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003e8e:	2901      	cmp	r1, #1
 8003e90:	d013      	beq.n	8003eba <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8003e92:	bb19      	cbnz	r1, 8003edc <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e94:	68c3      	ldr	r3, [r0, #12]
 8003e96:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e9a:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8003e9c:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8003e9e:	200a      	movs	r0, #10
 8003ea0:	f7fc ff62 	bl	8000d68 <HAL_Delay>
      ms += 10U;
 8003ea4:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003ea6:	4628      	mov	r0, r5
 8003ea8:	f7ff ffe7 	bl	8003e7a <USB_GetMode>
 8003eac:	b108      	cbz	r0, 8003eb2 <USB_SetCurrentMode+0x30>
 8003eae:	2cc7      	cmp	r4, #199	@ 0xc7
 8003eb0:	d9f5      	bls.n	8003e9e <USB_SetCurrentMode+0x1c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003eb2:	2cc8      	cmp	r4, #200	@ 0xc8
 8003eb4:	d014      	beq.n	8003ee0 <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8003eb6:	2000      	movs	r0, #0
}
 8003eb8:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003eba:	68c3      	ldr	r3, [r0, #12]
 8003ebc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003ec0:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8003ec2:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8003ec4:	200a      	movs	r0, #10
 8003ec6:	f7fc ff4f 	bl	8000d68 <HAL_Delay>
      ms += 10U;
 8003eca:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003ecc:	4628      	mov	r0, r5
 8003ece:	f7ff ffd4 	bl	8003e7a <USB_GetMode>
 8003ed2:	2801      	cmp	r0, #1
 8003ed4:	d0ed      	beq.n	8003eb2 <USB_SetCurrentMode+0x30>
 8003ed6:	2cc7      	cmp	r4, #199	@ 0xc7
 8003ed8:	d9f4      	bls.n	8003ec4 <USB_SetCurrentMode+0x42>
 8003eda:	e7ea      	b.n	8003eb2 <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8003edc:	2001      	movs	r0, #1
 8003ede:	e7eb      	b.n	8003eb8 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	e7e9      	b.n	8003eb8 <USB_SetCurrentMode+0x36>

08003ee4 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003ee4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003ee8:	f36f 030a 	bfc	r3, #0, #11
 8003eec:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003ef0:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8003ef4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ef8:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8003efc:	2000      	movs	r0, #0
 8003efe:	4770      	bx	lr

08003f00 <USB_EP0_OutStart>:
{
 8003f00:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003f02:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003f04:	4b15      	ldr	r3, [pc, #84]	@ (8003f5c <USB_EP0_OutStart+0x5c>)
 8003f06:	429c      	cmp	r4, r3
 8003f08:	d903      	bls.n	8003f12 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f0a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	db16      	blt.n	8003f40 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003f12:	2400      	movs	r4, #0
 8003f14:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003f18:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8003f1c:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8003f20:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003f24:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8003f28:	f044 0418 	orr.w	r4, r4, #24
 8003f2c:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003f30:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8003f34:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 8003f38:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  if (dma == 1U)
 8003f3c:	2901      	cmp	r1, #1
 8003f3e:	d003      	beq.n	8003f48 <USB_EP0_OutStart+0x48>
}
 8003f40:	2000      	movs	r0, #0
 8003f42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f46:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003f48:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003f4c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003f50:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8003f54:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8003f58:	e7f2      	b.n	8003f40 <USB_EP0_OutStart+0x40>
 8003f5a:	bf00      	nop
 8003f5c:	4f54300a 	.word	0x4f54300a

08003f60 <USBD_HID_DataIn>:
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8003f60:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003f64:	33b0      	adds	r3, #176	@ 0xb0
 8003f66:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	7318      	strb	r0, [r3, #12]

  return (uint8_t)USBD_OK;
}
 8003f6e:	4770      	bx	lr

08003f70 <USBD_HID_GetDeviceQualifierDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8003f70:	230a      	movs	r3, #10
 8003f72:	8003      	strh	r3, [r0, #0]

  return USBD_HID_DeviceQualifierDesc;
}
 8003f74:	4800      	ldr	r0, [pc, #0]	@ (8003f78 <USBD_HID_GetDeviceQualifierDesc+0x8>)
 8003f76:	4770      	bx	lr
 8003f78:	20000058 	.word	0x20000058

08003f7c <USBD_HID_GetOtherSpeedCfgDesc>:
{
 8003f7c:	b510      	push	{r4, lr}
 8003f7e:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8003f80:	2181      	movs	r1, #129	@ 0x81
 8003f82:	4805      	ldr	r0, [pc, #20]	@ (8003f98 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
 8003f84:	f000 faf3 	bl	800456e <USBD_GetEpDesc>
  if (pEpDesc != NULL)
 8003f88:	b108      	cbz	r0, 8003f8e <USBD_HID_GetOtherSpeedCfgDesc+0x12>
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8003f8a:	220a      	movs	r2, #10
 8003f8c:	7182      	strb	r2, [r0, #6]
  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8003f8e:	2322      	movs	r3, #34	@ 0x22
 8003f90:	8023      	strh	r3, [r4, #0]
}
 8003f92:	4801      	ldr	r0, [pc, #4]	@ (8003f98 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
 8003f94:	bd10      	pop	{r4, pc}
 8003f96:	bf00      	nop
 8003f98:	20000070 	.word	0x20000070

08003f9c <USBD_HID_GetFSCfgDesc>:
{
 8003f9c:	b510      	push	{r4, lr}
 8003f9e:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8003fa0:	2181      	movs	r1, #129	@ 0x81
 8003fa2:	4805      	ldr	r0, [pc, #20]	@ (8003fb8 <USBD_HID_GetFSCfgDesc+0x1c>)
 8003fa4:	f000 fae3 	bl	800456e <USBD_GetEpDesc>
  if (pEpDesc != NULL)
 8003fa8:	b108      	cbz	r0, 8003fae <USBD_HID_GetFSCfgDesc+0x12>
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8003faa:	220a      	movs	r2, #10
 8003fac:	7182      	strb	r2, [r0, #6]
  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8003fae:	2322      	movs	r3, #34	@ 0x22
 8003fb0:	8023      	strh	r3, [r4, #0]
}
 8003fb2:	4801      	ldr	r0, [pc, #4]	@ (8003fb8 <USBD_HID_GetFSCfgDesc+0x1c>)
 8003fb4:	bd10      	pop	{r4, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000070 	.word	0x20000070

08003fbc <USBD_HID_GetHSCfgDesc>:
{
 8003fbc:	b510      	push	{r4, lr}
 8003fbe:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8003fc0:	2181      	movs	r1, #129	@ 0x81
 8003fc2:	4805      	ldr	r0, [pc, #20]	@ (8003fd8 <USBD_HID_GetHSCfgDesc+0x1c>)
 8003fc4:	f000 fad3 	bl	800456e <USBD_GetEpDesc>
  if (pEpDesc != NULL)
 8003fc8:	b108      	cbz	r0, 8003fce <USBD_HID_GetHSCfgDesc+0x12>
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8003fca:	2207      	movs	r2, #7
 8003fcc:	7182      	strb	r2, [r0, #6]
  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8003fce:	2322      	movs	r3, #34	@ 0x22
 8003fd0:	8023      	strh	r3, [r4, #0]
}
 8003fd2:	4801      	ldr	r0, [pc, #4]	@ (8003fd8 <USBD_HID_GetHSCfgDesc+0x1c>)
 8003fd4:	bd10      	pop	{r4, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20000070 	.word	0x20000070

08003fdc <USBD_HID_Setup>:
{
 8003fdc:	b530      	push	{r4, r5, lr}
 8003fde:	b083      	sub	sp, #12
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003fe0:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003fe4:	33b0      	adds	r3, #176	@ 0xb0
 8003fe6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  uint16_t status_info = 0U;
 8003fea:	2200      	movs	r2, #0
 8003fec:	f8ad 2006 	strh.w	r2, [sp, #6]
  if (hhid == NULL)
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 8082 	beq.w	80040fa <USBD_HID_Setup+0x11e>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003ff6:	780c      	ldrb	r4, [r1, #0]
 8003ff8:	f014 0460 	ands.w	r4, r4, #96	@ 0x60
 8003ffc:	d025      	beq.n	800404a <USBD_HID_Setup+0x6e>
 8003ffe:	2c20      	cmp	r4, #32
 8004000:	d175      	bne.n	80040ee <USBD_HID_Setup+0x112>
      switch (req->bRequest)
 8004002:	784a      	ldrb	r2, [r1, #1]
 8004004:	3a02      	subs	r2, #2
 8004006:	2a09      	cmp	r2, #9
 8004008:	d81b      	bhi.n	8004042 <USBD_HID_Setup+0x66>
 800400a:	e8df f002 	tbb	[pc, r2]
 800400e:	0914      	.short	0x0914
 8004010:	1a1a1a1a 	.word	0x1a1a1a1a
 8004014:	050f1a1a 	.word	0x050f1a1a
          hhid->Protocol = (uint8_t)(req->wValue);
 8004018:	788a      	ldrb	r2, [r1, #2]
 800401a:	601a      	str	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800401c:	2400      	movs	r4, #0
          break;
 800401e:	e069      	b.n	80040f4 <USBD_HID_Setup+0x118>
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004020:	2201      	movs	r2, #1
 8004022:	4619      	mov	r1, r3
 8004024:	f000 fe5a 	bl	8004cdc <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004028:	2400      	movs	r4, #0
          break;
 800402a:	e063      	b.n	80040f4 <USBD_HID_Setup+0x118>
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800402c:	884a      	ldrh	r2, [r1, #2]
 800402e:	0a12      	lsrs	r2, r2, #8
 8004030:	605a      	str	r2, [r3, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8004032:	2400      	movs	r4, #0
          break;
 8004034:	e05e      	b.n	80040f4 <USBD_HID_Setup+0x118>
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004036:	2201      	movs	r2, #1
 8004038:	1d19      	adds	r1, r3, #4
 800403a:	f000 fe4f 	bl	8004cdc <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800403e:	2400      	movs	r4, #0
          break;
 8004040:	e058      	b.n	80040f4 <USBD_HID_Setup+0x118>
          USBD_CtlError(pdev, req);
 8004042:	f000 fad1 	bl	80045e8 <USBD_CtlError>
          ret = USBD_FAIL;
 8004046:	2403      	movs	r4, #3
          break;
 8004048:	e054      	b.n	80040f4 <USBD_HID_Setup+0x118>
      switch (req->bRequest)
 800404a:	784d      	ldrb	r5, [r1, #1]
 800404c:	2d0b      	cmp	r5, #11
 800404e:	d84a      	bhi.n	80040e6 <USBD_HID_Setup+0x10a>
 8004050:	e8df f005 	tbb	[pc, r5]
 8004054:	49495006 	.word	0x49495006
 8004058:	49164949 	.word	0x49164949
 800405c:	3d2e4949 	.word	0x3d2e4949
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004060:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b03      	cmp	r3, #3
 8004068:	d003      	beq.n	8004072 <USBD_HID_Setup+0x96>
            USBD_CtlError(pdev, req);
 800406a:	f000 fabd 	bl	80045e8 <USBD_CtlError>
            ret = USBD_FAIL;
 800406e:	2403      	movs	r4, #3
 8004070:	e040      	b.n	80040f4 <USBD_HID_Setup+0x118>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004072:	2202      	movs	r2, #2
 8004074:	f10d 0106 	add.w	r1, sp, #6
 8004078:	f000 fe30 	bl	8004cdc <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800407c:	462c      	mov	r4, r5
 800407e:	e039      	b.n	80040f4 <USBD_HID_Setup+0x118>
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8004080:	884b      	ldrh	r3, [r1, #2]
 8004082:	0a1b      	lsrs	r3, r3, #8
 8004084:	2b22      	cmp	r3, #34	@ 0x22
 8004086:	d009      	beq.n	800409c <USBD_HID_Setup+0xc0>
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8004088:	2b21      	cmp	r3, #33	@ 0x21
 800408a:	d10d      	bne.n	80040a8 <USBD_HID_Setup+0xcc>
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800408c:	88ca      	ldrh	r2, [r1, #6]
 800408e:	2a09      	cmp	r2, #9
 8004090:	bf28      	it	cs
 8004092:	2209      	movcs	r2, #9
            pbuf = USBD_HID_Desc;
 8004094:	491a      	ldr	r1, [pc, #104]	@ (8004100 <USBD_HID_Setup+0x124>)
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8004096:	f000 fe21 	bl	8004cdc <USBD_CtlSendData>
          break;
 800409a:	e02b      	b.n	80040f4 <USBD_HID_Setup+0x118>
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800409c:	88ca      	ldrh	r2, [r1, #6]
 800409e:	2a4a      	cmp	r2, #74	@ 0x4a
 80040a0:	bf28      	it	cs
 80040a2:	224a      	movcs	r2, #74	@ 0x4a
            pbuf = HID_MOUSE_ReportDesc;
 80040a4:	4917      	ldr	r1, [pc, #92]	@ (8004104 <USBD_HID_Setup+0x128>)
 80040a6:	e7f6      	b.n	8004096 <USBD_HID_Setup+0xba>
            USBD_CtlError(pdev, req);
 80040a8:	f000 fa9e 	bl	80045e8 <USBD_CtlError>
            ret = USBD_FAIL;
 80040ac:	2403      	movs	r4, #3
            break;
 80040ae:	e021      	b.n	80040f4 <USBD_HID_Setup+0x118>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80040b0:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80040b4:	b2d2      	uxtb	r2, r2
 80040b6:	2a03      	cmp	r2, #3
 80040b8:	d003      	beq.n	80040c2 <USBD_HID_Setup+0xe6>
            USBD_CtlError(pdev, req);
 80040ba:	f000 fa95 	bl	80045e8 <USBD_CtlError>
            ret = USBD_FAIL;
 80040be:	2403      	movs	r4, #3
 80040c0:	e018      	b.n	80040f4 <USBD_HID_Setup+0x118>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80040c2:	2201      	movs	r2, #1
 80040c4:	f103 0108 	add.w	r1, r3, #8
 80040c8:	f000 fe08 	bl	8004cdc <USBD_CtlSendData>
 80040cc:	e012      	b.n	80040f4 <USBD_HID_Setup+0x118>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80040ce:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	2a03      	cmp	r2, #3
 80040d6:	d102      	bne.n	80040de <USBD_HID_Setup+0x102>
            hhid->AltSetting = (uint8_t)(req->wValue);
 80040d8:	788a      	ldrb	r2, [r1, #2]
 80040da:	609a      	str	r2, [r3, #8]
 80040dc:	e00a      	b.n	80040f4 <USBD_HID_Setup+0x118>
            USBD_CtlError(pdev, req);
 80040de:	f000 fa83 	bl	80045e8 <USBD_CtlError>
            ret = USBD_FAIL;
 80040e2:	2403      	movs	r4, #3
 80040e4:	e006      	b.n	80040f4 <USBD_HID_Setup+0x118>
          USBD_CtlError(pdev, req);
 80040e6:	f000 fa7f 	bl	80045e8 <USBD_CtlError>
          ret = USBD_FAIL;
 80040ea:	2403      	movs	r4, #3
          break;
 80040ec:	e002      	b.n	80040f4 <USBD_HID_Setup+0x118>
      USBD_CtlError(pdev, req);
 80040ee:	f000 fa7b 	bl	80045e8 <USBD_CtlError>
      ret = USBD_FAIL;
 80040f2:	2403      	movs	r4, #3
}
 80040f4:	4620      	mov	r0, r4
 80040f6:	b003      	add	sp, #12
 80040f8:	bd30      	pop	{r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80040fa:	2403      	movs	r4, #3
 80040fc:	e7fa      	b.n	80040f4 <USBD_HID_Setup+0x118>
 80040fe:	bf00      	nop
 8004100:	20000064 	.word	0x20000064
 8004104:	2000000c 	.word	0x2000000c

08004108 <USBD_HID_DeInit>:
{
 8004108:	b510      	push	{r4, lr}
 800410a:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800410c:	2181      	movs	r1, #129	@ 0x81
 800410e:	f000 ffef 	bl	80050f0 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	8723      	strh	r3, [r4, #56]	@ 0x38
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8004116:	8763      	strh	r3, [r4, #58]	@ 0x3a
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004118:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800411c:	33b0      	adds	r3, #176	@ 0xb0
 800411e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8004122:	b138      	cbz	r0, 8004134 <USBD_HID_DeInit+0x2c>
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004124:	f000 ffc6 	bl	80050b4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004128:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800412c:	33b0      	adds	r3, #176	@ 0xb0
 800412e:	2200      	movs	r2, #0
 8004130:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
 8004134:	2000      	movs	r0, #0
 8004136:	bd10      	pop	{r4, pc}

08004138 <USBD_HID_Init>:
{
 8004138:	b538      	push	{r3, r4, r5, lr}
 800413a:	4604      	mov	r4, r0
  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800413c:	2010      	movs	r0, #16
 800413e:	f000 ffb5 	bl	80050ac <USBD_static_malloc>
  if (hhid == NULL)
 8004142:	b1b0      	cbz	r0, 8004172 <USBD_HID_Init+0x3a>
 8004144:	4605      	mov	r5, r0
  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8004146:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800414a:	33b0      	adds	r3, #176	@ 0xb0
 800414c:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004150:	f8c4 02bc 	str.w	r0, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004154:	7c23      	ldrb	r3, [r4, #16]
 8004156:	b9a3      	cbnz	r3, 8004182 <USBD_HID_Init+0x4a>
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004158:	2307      	movs	r3, #7
 800415a:	8763      	strh	r3, [r4, #58]	@ 0x3a
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800415c:	2304      	movs	r3, #4
 800415e:	2203      	movs	r2, #3
 8004160:	2181      	movs	r1, #129	@ 0x81
 8004162:	4620      	mov	r0, r4
 8004164:	f000 ffb9 	bl	80050da <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8004168:	2301      	movs	r3, #1
 800416a:	8723      	strh	r3, [r4, #56]	@ 0x38
  hhid->state = USBD_HID_IDLE;
 800416c:	2000      	movs	r0, #0
 800416e:	7328      	strb	r0, [r5, #12]
}
 8004170:	bd38      	pop	{r3, r4, r5, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004172:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8004176:	33b0      	adds	r3, #176	@ 0xb0
 8004178:	2200      	movs	r2, #0
 800417a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 800417e:	2002      	movs	r0, #2
 8004180:	e7f6      	b.n	8004170 <USBD_HID_Init+0x38>
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8004182:	230a      	movs	r3, #10
 8004184:	8763      	strh	r3, [r4, #58]	@ 0x3a
 8004186:	e7e9      	b.n	800415c <USBD_HID_Init+0x24>

08004188 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004188:	b198      	cbz	r0, 80041b2 <USBD_Init+0x2a>
{
 800418a:	b508      	push	{r3, lr}
 800418c:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800418e:	2000      	movs	r0, #0
 8004190:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8004194:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004198:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800419c:	b109      	cbz	r1, 80041a2 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 800419e:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80041a2:	2101      	movs	r1, #1
 80041a4:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 80041a8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 ff34 	bl	8005018 <USBD_LL_Init>

  return ret;
}
 80041b0:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80041b2:	2003      	movs	r0, #3
}
 80041b4:	4770      	bx	lr

080041b6 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80041b6:	b510      	push	{r4, lr}
 80041b8:	b082      	sub	sp, #8
  uint16_t len = 0U;
 80041ba:	2300      	movs	r3, #0
 80041bc:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 80041c0:	b1b9      	cbz	r1, 80041f2 <USBD_RegisterClass+0x3c>
 80041c2:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80041c4:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80041c8:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 80041cc:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80041ce:	b143      	cbz	r3, 80041e2 <USBD_RegisterClass+0x2c>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80041d0:	32ae      	adds	r2, #174	@ 0xae
 80041d2:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 80041d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d8:	f10d 0006 	add.w	r0, sp, #6
 80041dc:	4798      	blx	r3
 80041de:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80041e2:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 80041e6:	3301      	adds	r3, #1
 80041e8:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 80041ec:	2000      	movs	r0, #0
}
 80041ee:	b002      	add	sp, #8
 80041f0:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80041f2:	2003      	movs	r0, #3
 80041f4:	e7fb      	b.n	80041ee <USBD_RegisterClass+0x38>

080041f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80041f6:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80041f8:	f000 ff67 	bl	80050ca <USBD_LL_Start>
}
 80041fc:	bd08      	pop	{r3, pc}

080041fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80041fe:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004200:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004204:	b113      	cbz	r3, 800420c <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800420a:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 800420c:	2000      	movs	r0, #0
 800420e:	e7fc      	b.n	800420a <USBD_SetClassConfig+0xc>

08004210 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004210:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004212:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	4798      	blx	r3
 800421a:	b900      	cbnz	r0, 800421e <USBD_ClrClassConfig+0xe>
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800421c:	bd08      	pop	{r3, pc}
    ret = USBD_FAIL;
 800421e:	2003      	movs	r0, #3
 8004220:	e7fc      	b.n	800421c <USBD_ClrClassConfig+0xc>

08004222 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004222:	b538      	push	{r3, r4, r5, lr}
 8004224:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004226:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 800422a:	4628      	mov	r0, r5
 800422c:	f000 f9c8 	bl	80045c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004230:	2301      	movs	r3, #1
 8004232:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004236:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 800423a:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800423e:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 8004242:	f001 031f 	and.w	r3, r1, #31
 8004246:	2b01      	cmp	r3, #1
 8004248:	d007      	beq.n	800425a <USBD_LL_SetupStage+0x38>
 800424a:	2b02      	cmp	r3, #2
 800424c:	d00a      	beq.n	8004264 <USBD_LL_SetupStage+0x42>
 800424e:	b973      	cbnz	r3, 800426e <USBD_LL_SetupStage+0x4c>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004250:	4629      	mov	r1, r5
 8004252:	4620      	mov	r0, r4
 8004254:	f000 fb8a 	bl	800496c <USBD_StdDevReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8004258:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800425a:	4629      	mov	r1, r5
 800425c:	4620      	mov	r0, r4
 800425e:	f000 fbc0 	bl	80049e2 <USBD_StdItfReq>
      break;
 8004262:	e7f9      	b.n	8004258 <USBD_LL_SetupStage+0x36>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004264:	4629      	mov	r1, r5
 8004266:	4620      	mov	r0, r4
 8004268:	f000 fbfd 	bl	8004a66 <USBD_StdEPReq>
      break;
 800426c:	e7f4      	b.n	8004258 <USBD_LL_SetupStage+0x36>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800426e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8004272:	4620      	mov	r0, r4
 8004274:	f000 ff44 	bl	8005100 <USBD_LL_StallEP>
      break;
 8004278:	e7ee      	b.n	8004258 <USBD_LL_SetupStage+0x36>

0800427a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800427a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427c:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800427e:	2301      	movs	r3, #1
 8004280:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004284:	2300      	movs	r3, #0
 8004286:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 800428a:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800428c:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8004290:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004294:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004298:	b1db      	cbz	r3, 80042d2 <USBD_LL_Reset+0x58>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	b1db      	cbz	r3, 80042d6 <USBD_LL_Reset+0x5c>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800429e:	2100      	movs	r1, #0
 80042a0:	4798      	blx	r3
 80042a2:	4607      	mov	r7, r0
 80042a4:	b9c8      	cbnz	r0, 80042da <USBD_LL_Reset+0x60>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80042a6:	2340      	movs	r3, #64	@ 0x40
 80042a8:	2200      	movs	r2, #0
 80042aa:	4611      	mov	r1, r2
 80042ac:	4620      	mov	r0, r4
 80042ae:	f000 ff14 	bl	80050da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80042b2:	2601      	movs	r6, #1
 80042b4:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80042b8:	2540      	movs	r5, #64	@ 0x40
 80042ba:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80042be:	462b      	mov	r3, r5
 80042c0:	2200      	movs	r2, #0
 80042c2:	2180      	movs	r1, #128	@ 0x80
 80042c4:	4620      	mov	r0, r4
 80042c6:	f000 ff08 	bl	80050da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80042ca:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80042cc:	6225      	str	r5, [r4, #32]

  return ret;
}
 80042ce:	4638      	mov	r0, r7
 80042d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 80042d2:	2700      	movs	r7, #0
 80042d4:	e7e7      	b.n	80042a6 <USBD_LL_Reset+0x2c>
 80042d6:	2700      	movs	r7, #0
 80042d8:	e7e5      	b.n	80042a6 <USBD_LL_Reset+0x2c>
        ret = USBD_FAIL;
 80042da:	2703      	movs	r7, #3
 80042dc:	e7e3      	b.n	80042a6 <USBD_LL_Reset+0x2c>

080042de <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80042de:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80042e0:	2000      	movs	r0, #0
 80042e2:	4770      	bx	lr

080042e4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80042e4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d004      	beq.n	80042f8 <USBD_LL_Suspend+0x14>
  {
    pdev->dev_old_state = pdev->dev_state;
 80042ee:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80042f8:	2304      	movs	r3, #4
 80042fa:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 80042fe:	2000      	movs	r0, #0
 8004300:	4770      	bx	lr

08004302 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004302:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b04      	cmp	r3, #4
 800430a:	d001      	beq.n	8004310 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800430c:	2000      	movs	r0, #0
 800430e:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8004310:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 8004314:	b2db      	uxtb	r3, r3
 8004316:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 800431a:	e7f7      	b.n	800430c <USBD_LL_Resume+0xa>

0800431c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800431c:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800431e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b03      	cmp	r3, #3
 8004326:	d001      	beq.n	800432c <USBD_LL_SOF+0x10>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 8004328:	2000      	movs	r0, #0
 800432a:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 800432c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0f9      	beq.n	8004328 <USBD_LL_SOF+0xc>
      if (pdev->pClass[0]->SOF != NULL)
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f6      	beq.n	8004328 <USBD_LL_SOF+0xc>
        (void)pdev->pClass[0]->SOF(pdev);
 800433a:	4798      	blx	r3
 800433c:	e7f4      	b.n	8004328 <USBD_LL_SOF+0xc>

0800433e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800433e:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8004340:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004344:	33ae      	adds	r3, #174	@ 0xae
 8004346:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800434a:	b15a      	cbz	r2, 8004364 <USBD_LL_IsoINIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800434c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b03      	cmp	r3, #3
 8004354:	d001      	beq.n	800435a <USBD_LL_IsoINIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8004356:	2000      	movs	r0, #0
}
 8004358:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800435a:	6a13      	ldr	r3, [r2, #32]
 800435c:	b123      	cbz	r3, 8004368 <USBD_LL_IsoINIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800435e:	4798      	blx	r3
  return USBD_OK;
 8004360:	2000      	movs	r0, #0
 8004362:	e7f9      	b.n	8004358 <USBD_LL_IsoINIncomplete+0x1a>
    return USBD_FAIL;
 8004364:	2003      	movs	r0, #3
 8004366:	e7f7      	b.n	8004358 <USBD_LL_IsoINIncomplete+0x1a>
  return USBD_OK;
 8004368:	2000      	movs	r0, #0
 800436a:	e7f5      	b.n	8004358 <USBD_LL_IsoINIncomplete+0x1a>

0800436c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800436c:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 800436e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004372:	33ae      	adds	r3, #174	@ 0xae
 8004374:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8004378:	b15a      	cbz	r2, 8004392 <USBD_LL_IsoOUTIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800437a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b03      	cmp	r3, #3
 8004382:	d001      	beq.n	8004388 <USBD_LL_IsoOUTIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8004384:	2000      	movs	r0, #0
}
 8004386:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8004388:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800438a:	b123      	cbz	r3, 8004396 <USBD_LL_IsoOUTIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800438c:	4798      	blx	r3
  return USBD_OK;
 800438e:	2000      	movs	r0, #0
 8004390:	e7f9      	b.n	8004386 <USBD_LL_IsoOUTIncomplete+0x1a>
    return USBD_FAIL;
 8004392:	2003      	movs	r0, #3
 8004394:	e7f7      	b.n	8004386 <USBD_LL_IsoOUTIncomplete+0x1a>
  return USBD_OK;
 8004396:	2000      	movs	r0, #0
 8004398:	e7f5      	b.n	8004386 <USBD_LL_IsoOUTIncomplete+0x1a>

0800439a <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800439a:	2000      	movs	r0, #0
 800439c:	4770      	bx	lr

0800439e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800439e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80043a0:	2301      	movs	r3, #1
 80043a2:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80043a6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80043aa:	b123      	cbz	r3, 80043b6 <USBD_LL_DevDisconnected+0x18>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	7901      	ldrb	r1, [r0, #4]
 80043b0:	4798      	blx	r3
 80043b2:	b910      	cbnz	r0, 80043ba <USBD_LL_DevDisconnected+0x1c>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 80043b4:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 80043b6:	2000      	movs	r0, #0
 80043b8:	e7fc      	b.n	80043b4 <USBD_LL_DevDisconnected+0x16>
      ret = USBD_FAIL;
 80043ba:	2003      	movs	r0, #3
 80043bc:	e7fa      	b.n	80043b4 <USBD_LL_DevDisconnected+0x16>

080043be <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 80043be:	2000      	movs	r0, #0
 80043c0:	4770      	bx	lr

080043c2 <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 80043c2:	2000      	movs	r0, #0
 80043c4:	4770      	bx	lr

080043c6 <USBD_LL_DataOutStage>:
{
 80043c6:	b538      	push	{r3, r4, r5, lr}
 80043c8:	4604      	mov	r4, r0
  if (epnum == 0U)
 80043ca:	460d      	mov	r5, r1
 80043cc:	2900      	cmp	r1, #0
 80043ce:	d142      	bne.n	8004456 <USBD_LL_DataOutStage+0x90>
 80043d0:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80043d2:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 80043d6:	2a03      	cmp	r2, #3
 80043d8:	d001      	beq.n	80043de <USBD_LL_DataOutStage+0x18>
  return USBD_OK;
 80043da:	4608      	mov	r0, r1
}
 80043dc:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 80043de:	f8d0 115c 	ldr.w	r1, [r0, #348]	@ 0x15c
 80043e2:	f8d0 2160 	ldr.w	r2, [r0, #352]	@ 0x160
 80043e6:	4291      	cmp	r1, r2
 80043e8:	d809      	bhi.n	80043fe <USBD_LL_DataOutStage+0x38>
        switch (pdev->request.bmRequest & 0x1FU)
 80043ea:	f890 32aa 	ldrb.w	r3, [r0, #682]	@ 0x2aa
 80043ee:	f003 031f 	and.w	r3, r3, #31
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d00e      	beq.n	8004414 <USBD_LL_DataOutStage+0x4e>
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d01b      	beq.n	8004432 <USBD_LL_DataOutStage+0x6c>
 80043fa:	4628      	mov	r0, r5
 80043fc:	e00f      	b.n	800441e <USBD_LL_DataOutStage+0x58>
        pep->rem_length -= pep->maxpacket;
 80043fe:	1a89      	subs	r1, r1, r2
 8004400:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004404:	428a      	cmp	r2, r1
 8004406:	bf28      	it	cs
 8004408:	460a      	movcs	r2, r1
 800440a:	4619      	mov	r1, r3
 800440c:	f000 fc7b 	bl	8004d06 <USBD_CtlContinueRx>
  return USBD_OK;
 8004410:	4628      	mov	r0, r5
 8004412:	e7e3      	b.n	80043dc <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004414:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8004418:	f7ff ffd1 	bl	80043be <USBD_CoreFindIF>
        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800441c:	b920      	cbnz	r0, 8004428 <USBD_LL_DataOutStage+0x62>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800441e:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b03      	cmp	r3, #3
 8004426:	d009      	beq.n	800443c <USBD_LL_DataOutStage+0x76>
        (void)USBD_CtlSendStatus(pdev);
 8004428:	4620      	mov	r0, r4
 800442a:	f000 fc74 	bl	8004d16 <USBD_CtlSendStatus>
  return USBD_OK;
 800442e:	4628      	mov	r0, r5
 8004430:	e7d4      	b.n	80043dc <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004432:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8004436:	f7ff ffc4 	bl	80043c2 <USBD_CoreFindEP>
            break;
 800443a:	e7ef      	b.n	800441c <USBD_LL_DataOutStage+0x56>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800443c:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8004440:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	2a00      	cmp	r2, #0
 8004448:	d0ee      	beq.n	8004428 <USBD_LL_DataOutStage+0x62>
              pdev->classId = idx;
 800444a:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	4620      	mov	r0, r4
 8004452:	4798      	blx	r3
 8004454:	e7e8      	b.n	8004428 <USBD_LL_DataOutStage+0x62>
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004456:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800445a:	f7ff ffb2 	bl	80043c2 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800445e:	b990      	cbnz	r0, 8004486 <USBD_LL_DataOutStage+0xc0>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004460:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b03      	cmp	r3, #3
 8004468:	d1b8      	bne.n	80043dc <USBD_LL_DataOutStage+0x16>
        if (pdev->pClass[idx]->DataOut != NULL)
 800446a:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800446e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8004472:	699a      	ldr	r2, [r3, #24]
 8004474:	2a00      	cmp	r2, #0
 8004476:	d0b1      	beq.n	80043dc <USBD_LL_DataOutStage+0x16>
          pdev->classId = idx;
 8004478:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	4629      	mov	r1, r5
 8004480:	4620      	mov	r0, r4
 8004482:	4798      	blx	r3
      if (ret != USBD_OK)
 8004484:	e7aa      	b.n	80043dc <USBD_LL_DataOutStage+0x16>
  return USBD_OK;
 8004486:	2000      	movs	r0, #0
 8004488:	e7a8      	b.n	80043dc <USBD_LL_DataOutStage+0x16>

0800448a <USBD_LL_DataInStage>:
{
 800448a:	b538      	push	{r3, r4, r5, lr}
 800448c:	4604      	mov	r4, r0
  if (epnum == 0U)
 800448e:	460d      	mov	r5, r1
 8004490:	2900      	cmp	r1, #0
 8004492:	d14b      	bne.n	800452c <USBD_LL_DataInStage+0xa2>
 8004494:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004496:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800449a:	2a02      	cmp	r2, #2
 800449c:	d007      	beq.n	80044ae <USBD_LL_DataInStage+0x24>
    if (pdev->dev_test_mode != 0U)
 800449e:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 80044a2:	b118      	cbz	r0, 80044ac <USBD_LL_DataInStage+0x22>
      pdev->dev_test_mode = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 80044aa:	4628      	mov	r0, r5
}
 80044ac:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 80044ae:	69c2      	ldr	r2, [r0, #28]
 80044b0:	6a01      	ldr	r1, [r0, #32]
 80044b2:	428a      	cmp	r2, r1
 80044b4:	d80e      	bhi.n	80044d4 <USBD_LL_DataInStage+0x4a>
        if ((pep->maxpacket == pep->rem_length) &&
 80044b6:	428a      	cmp	r2, r1
 80044b8:	d018      	beq.n	80044ec <USBD_LL_DataInStage+0x62>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044ba:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d027      	beq.n	8004514 <USBD_LL_DataInStage+0x8a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80044c4:	2180      	movs	r1, #128	@ 0x80
 80044c6:	4620      	mov	r0, r4
 80044c8:	f000 fe1a 	bl	8005100 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80044cc:	4620      	mov	r0, r4
 80044ce:	f000 fc2d 	bl	8004d2c <USBD_CtlReceiveStatus>
 80044d2:	e7e4      	b.n	800449e <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 80044d4:	1a52      	subs	r2, r2, r1
 80044d6:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80044d8:	4619      	mov	r1, r3
 80044da:	f000 fc0c 	bl	8004cf6 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80044de:	2300      	movs	r3, #0
 80044e0:	461a      	mov	r2, r3
 80044e2:	4619      	mov	r1, r3
 80044e4:	4620      	mov	r0, r4
 80044e6:	f000 fe2b 	bl	8005140 <USBD_LL_PrepareReceive>
 80044ea:	e7d8      	b.n	800449e <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 80044ec:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 80044ee:	4299      	cmp	r1, r3
 80044f0:	d8e3      	bhi.n	80044ba <USBD_LL_DataInStage+0x30>
            (pep->total_length < pdev->ep0_data_len))
 80044f2:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d2df      	bcs.n	80044ba <USBD_LL_DataInStage+0x30>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80044fa:	2200      	movs	r2, #0
 80044fc:	4611      	mov	r1, r2
 80044fe:	f000 fbfa 	bl	8004cf6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004502:	2100      	movs	r1, #0
 8004504:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004508:	460b      	mov	r3, r1
 800450a:	460a      	mov	r2, r1
 800450c:	4620      	mov	r0, r4
 800450e:	f000 fe17 	bl	8005140 <USBD_LL_PrepareReceive>
 8004512:	e7c4      	b.n	800449e <USBD_LL_DataInStage+0x14>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004514:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8004518:	68da      	ldr	r2, [r3, #12]
 800451a:	2a00      	cmp	r2, #0
 800451c:	d0d2      	beq.n	80044c4 <USBD_LL_DataInStage+0x3a>
              pdev->classId = 0U;
 800451e:	2200      	movs	r2, #0
 8004520:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	4620      	mov	r0, r4
 8004528:	4798      	blx	r3
 800452a:	e7cb      	b.n	80044c4 <USBD_LL_DataInStage+0x3a>
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800452c:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8004530:	f7ff ff47 	bl	80043c2 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004534:	b990      	cbnz	r0, 800455c <USBD_LL_DataInStage+0xd2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004536:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b03      	cmp	r3, #3
 800453e:	d1b5      	bne.n	80044ac <USBD_LL_DataInStage+0x22>
        if (pdev->pClass[idx]->DataIn != NULL)
 8004540:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8004544:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8004548:	695a      	ldr	r2, [r3, #20]
 800454a:	2a00      	cmp	r2, #0
 800454c:	d0ae      	beq.n	80044ac <USBD_LL_DataInStage+0x22>
          pdev->classId = idx;
 800454e:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	4629      	mov	r1, r5
 8004556:	4620      	mov	r0, r4
 8004558:	4798      	blx	r3
          if (ret != USBD_OK)
 800455a:	e7a7      	b.n	80044ac <USBD_LL_DataInStage+0x22>
  return USBD_OK;
 800455c:	2000      	movs	r0, #0
 800455e:	e7a5      	b.n	80044ac <USBD_LL_DataInStage+0x22>

08004560 <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 8004560:	880b      	ldrh	r3, [r1, #0]
 8004562:	7802      	ldrb	r2, [r0, #0]
 8004564:	4413      	add	r3, r2
 8004566:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8004568:	7803      	ldrb	r3, [r0, #0]

  return (pnext);
}
 800456a:	4418      	add	r0, r3
 800456c:	4770      	bx	lr

0800456e <USBD_GetEpDesc>:
  if (desc->wTotalLength > desc->bLength)
 800456e:	8842      	ldrh	r2, [r0, #2]
 8004570:	7803      	ldrb	r3, [r0, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d918      	bls.n	80045a8 <USBD_GetEpDesc+0x3a>
{
 8004576:	b530      	push	{r4, r5, lr}
 8004578:	b083      	sub	sp, #12
 800457a:	4604      	mov	r4, r0
 800457c:	460d      	mov	r5, r1
    ptr = desc->bLength;
 800457e:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (ptr < desc->wTotalLength)
 8004582:	8863      	ldrh	r3, [r4, #2]
 8004584:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004588:	429a      	cmp	r2, r3
 800458a:	d20a      	bcs.n	80045a2 <USBD_GetEpDesc+0x34>
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800458c:	f10d 0106 	add.w	r1, sp, #6
 8004590:	f7ff ffe6 	bl	8004560 <USBD_GetNextDesc>
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8004594:	7843      	ldrb	r3, [r0, #1]
 8004596:	2b05      	cmp	r3, #5
 8004598:	d1f3      	bne.n	8004582 <USBD_GetEpDesc+0x14>
        if (pEpDesc->bEndpointAddress == EpAddr)
 800459a:	7883      	ldrb	r3, [r0, #2]
 800459c:	42ab      	cmp	r3, r5
 800459e:	d1f0      	bne.n	8004582 <USBD_GetEpDesc+0x14>
 80045a0:	e000      	b.n	80045a4 <USBD_GetEpDesc+0x36>
 80045a2:	2000      	movs	r0, #0
}
 80045a4:	b003      	add	sp, #12
 80045a6:	bd30      	pop	{r4, r5, pc}
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80045a8:	2000      	movs	r0, #0
}
 80045aa:	4770      	bx	lr

080045ac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80045ac:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 80045ae:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80045b0:	e002      	b.n	80045b8 <USBD_GetLen+0xc>
  {
    len++;
 80045b2:	3001      	adds	r0, #1
 80045b4:	b2c0      	uxtb	r0, r0
    pbuff++;
 80045b6:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 80045b8:	781a      	ldrb	r2, [r3, #0]
 80045ba:	2a00      	cmp	r2, #0
 80045bc:	d1f9      	bne.n	80045b2 <USBD_GetLen+0x6>
  }

  return len;
}
 80045be:	4770      	bx	lr

080045c0 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80045c0:	780b      	ldrb	r3, [r1, #0]
 80045c2:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80045c4:	784b      	ldrb	r3, [r1, #1]
 80045c6:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 80045c8:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 80045ca:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80045cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 80045d0:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 80045d2:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 80045d4:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 80045d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 80045da:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 80045dc:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 80045de:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 80045e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 80045e4:	80c3      	strh	r3, [r0, #6]
}
 80045e6:	4770      	bx	lr

080045e8 <USBD_CtlError>:
{
 80045e8:	b510      	push	{r4, lr}
 80045ea:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80045ec:	2180      	movs	r1, #128	@ 0x80
 80045ee:	f000 fd87 	bl	8005100 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80045f2:	2100      	movs	r1, #0
 80045f4:	4620      	mov	r0, r4
 80045f6:	f000 fd83 	bl	8005100 <USBD_LL_StallEP>
}
 80045fa:	bd10      	pop	{r4, pc}

080045fc <USBD_GetDescriptor>:
{
 80045fc:	b530      	push	{r4, r5, lr}
 80045fe:	b083      	sub	sp, #12
 8004600:	4604      	mov	r4, r0
 8004602:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800460a:	884a      	ldrh	r2, [r1, #2]
 800460c:	0a13      	lsrs	r3, r2, #8
 800460e:	3b01      	subs	r3, #1
 8004610:	2b06      	cmp	r3, #6
 8004612:	f200 80ab 	bhi.w	800476c <USBD_GetDescriptor+0x170>
 8004616:	e8df f003 	tbb	[pc, r3]
 800461a:	1f04      	.short	0x1f04
 800461c:	8da9a933 	.word	0x8da9a933
 8004620:	9a          	.byte	0x9a
 8004621:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004622:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f10d 0106 	add.w	r1, sp, #6
 800462c:	7c00      	ldrb	r0, [r0, #16]
 800462e:	4798      	blx	r3
  if (req->wLength != 0U)
 8004630:	88ea      	ldrh	r2, [r5, #6]
 8004632:	2a00      	cmp	r2, #0
 8004634:	f000 80a3 	beq.w	800477e <USBD_GetDescriptor+0x182>
    if (len != 0U)
 8004638:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 8099 	beq.w	8004774 <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 8004642:	429a      	cmp	r2, r3
 8004644:	bf28      	it	cs
 8004646:	461a      	movcs	r2, r3
 8004648:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800464c:	4601      	mov	r1, r0
 800464e:	4620      	mov	r0, r4
 8004650:	f000 fb44 	bl	8004cdc <USBD_CtlSendData>
}
 8004654:	b003      	add	sp, #12
 8004656:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004658:	7c03      	ldrb	r3, [r0, #16]
 800465a:	b943      	cbnz	r3, 800466e <USBD_GetDescriptor+0x72>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800465c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004662:	f10d 0006 	add.w	r0, sp, #6
 8004666:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004668:	2302      	movs	r3, #2
 800466a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800466c:	e7e0      	b.n	8004630 <USBD_GetDescriptor+0x34>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800466e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004674:	f10d 0006 	add.w	r0, sp, #6
 8004678:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800467a:	2302      	movs	r3, #2
 800467c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800467e:	e7d7      	b.n	8004630 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	2a05      	cmp	r2, #5
 8004684:	d852      	bhi.n	800472c <USBD_GetDescriptor+0x130>
 8004686:	e8df f002 	tbb	[pc, r2]
 800468a:	1003      	.short	0x1003
 800468c:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004690:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	b123      	cbz	r3, 80046a2 <USBD_GetDescriptor+0xa6>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004698:	f10d 0106 	add.w	r1, sp, #6
 800469c:	7c00      	ldrb	r0, [r0, #16]
 800469e:	4798      	blx	r3
  if (err != 0U)
 80046a0:	e7c6      	b.n	8004630 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80046a2:	4629      	mov	r1, r5
 80046a4:	f7ff ffa0 	bl	80045e8 <USBD_CtlError>
  if (err != 0U)
 80046a8:	e7d4      	b.n	8004654 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80046aa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	b123      	cbz	r3, 80046bc <USBD_GetDescriptor+0xc0>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80046b2:	f10d 0106 	add.w	r1, sp, #6
 80046b6:	7c00      	ldrb	r0, [r0, #16]
 80046b8:	4798      	blx	r3
  if (err != 0U)
 80046ba:	e7b9      	b.n	8004630 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80046bc:	4629      	mov	r1, r5
 80046be:	f7ff ff93 	bl	80045e8 <USBD_CtlError>
  if (err != 0U)
 80046c2:	e7c7      	b.n	8004654 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80046c4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	b123      	cbz	r3, 80046d6 <USBD_GetDescriptor+0xda>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80046cc:	f10d 0106 	add.w	r1, sp, #6
 80046d0:	7c00      	ldrb	r0, [r0, #16]
 80046d2:	4798      	blx	r3
  if (err != 0U)
 80046d4:	e7ac      	b.n	8004630 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80046d6:	4629      	mov	r1, r5
 80046d8:	f7ff ff86 	bl	80045e8 <USBD_CtlError>
  if (err != 0U)
 80046dc:	e7ba      	b.n	8004654 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80046de:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	b123      	cbz	r3, 80046f0 <USBD_GetDescriptor+0xf4>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80046e6:	f10d 0106 	add.w	r1, sp, #6
 80046ea:	7c00      	ldrb	r0, [r0, #16]
 80046ec:	4798      	blx	r3
  if (err != 0U)
 80046ee:	e79f      	b.n	8004630 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80046f0:	4629      	mov	r1, r5
 80046f2:	f7ff ff79 	bl	80045e8 <USBD_CtlError>
  if (err != 0U)
 80046f6:	e7ad      	b.n	8004654 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80046f8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	b123      	cbz	r3, 800470a <USBD_GetDescriptor+0x10e>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004700:	f10d 0106 	add.w	r1, sp, #6
 8004704:	7c00      	ldrb	r0, [r0, #16]
 8004706:	4798      	blx	r3
  if (err != 0U)
 8004708:	e792      	b.n	8004630 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800470a:	4629      	mov	r1, r5
 800470c:	f7ff ff6c 	bl	80045e8 <USBD_CtlError>
  if (err != 0U)
 8004710:	e7a0      	b.n	8004654 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004712:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	b123      	cbz	r3, 8004724 <USBD_GetDescriptor+0x128>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800471a:	f10d 0106 	add.w	r1, sp, #6
 800471e:	7c00      	ldrb	r0, [r0, #16]
 8004720:	4798      	blx	r3
  if (err != 0U)
 8004722:	e785      	b.n	8004630 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004724:	4629      	mov	r1, r5
 8004726:	f7ff ff5f 	bl	80045e8 <USBD_CtlError>
  if (err != 0U)
 800472a:	e793      	b.n	8004654 <USBD_GetDescriptor+0x58>
          USBD_CtlError(pdev, req);
 800472c:	4629      	mov	r1, r5
 800472e:	f7ff ff5b 	bl	80045e8 <USBD_CtlError>
  if (err != 0U)
 8004732:	e78f      	b.n	8004654 <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004734:	7c03      	ldrb	r3, [r0, #16]
 8004736:	b933      	cbnz	r3, 8004746 <USBD_GetDescriptor+0x14a>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8004738:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800473c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800473e:	f10d 0006 	add.w	r0, sp, #6
 8004742:	4798      	blx	r3
  if (err != 0U)
 8004744:	e774      	b.n	8004630 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8004746:	4629      	mov	r1, r5
 8004748:	f7ff ff4e 	bl	80045e8 <USBD_CtlError>
  if (err != 0U)
 800474c:	e782      	b.n	8004654 <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800474e:	7c03      	ldrb	r3, [r0, #16]
 8004750:	b943      	cbnz	r3, 8004764 <USBD_GetDescriptor+0x168>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8004752:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004758:	f10d 0006 	add.w	r0, sp, #6
 800475c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800475e:	2307      	movs	r3, #7
 8004760:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004762:	e765      	b.n	8004630 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8004764:	4629      	mov	r1, r5
 8004766:	f7ff ff3f 	bl	80045e8 <USBD_CtlError>
  if (err != 0U)
 800476a:	e773      	b.n	8004654 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 800476c:	4629      	mov	r1, r5
 800476e:	f7ff ff3b 	bl	80045e8 <USBD_CtlError>
    return;
 8004772:	e76f      	b.n	8004654 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 8004774:	4629      	mov	r1, r5
 8004776:	4620      	mov	r0, r4
 8004778:	f7ff ff36 	bl	80045e8 <USBD_CtlError>
 800477c:	e76a      	b.n	8004654 <USBD_GetDescriptor+0x58>
    (void)USBD_CtlSendStatus(pdev);
 800477e:	4620      	mov	r0, r4
 8004780:	f000 fac9 	bl	8004d16 <USBD_CtlSendStatus>
 8004784:	e766      	b.n	8004654 <USBD_GetDescriptor+0x58>

08004786 <USBD_SetAddress>:
{
 8004786:	b538      	push	{r3, r4, r5, lr}
 8004788:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800478a:	888b      	ldrh	r3, [r1, #4]
 800478c:	b9fb      	cbnz	r3, 80047ce <USBD_SetAddress+0x48>
 800478e:	88cb      	ldrh	r3, [r1, #6]
 8004790:	b9eb      	cbnz	r3, 80047ce <USBD_SetAddress+0x48>
 8004792:	884b      	ldrh	r3, [r1, #2]
 8004794:	2b7f      	cmp	r3, #127	@ 0x7f
 8004796:	d81a      	bhi.n	80047ce <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004798:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800479c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d00c      	beq.n	80047c0 <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 80047a6:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80047aa:	4629      	mov	r1, r5
 80047ac:	f000 fcb8 	bl	8005120 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80047b0:	4620      	mov	r0, r4
 80047b2:	f000 fab0 	bl	8004d16 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80047b6:	b135      	cbz	r5, 80047c6 <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80047b8:	2302      	movs	r3, #2
 80047ba:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80047be:	e009      	b.n	80047d4 <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 80047c0:	f7ff ff12 	bl	80045e8 <USBD_CtlError>
 80047c4:	e006      	b.n	80047d4 <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80047c6:	2301      	movs	r3, #1
 80047c8:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80047cc:	e002      	b.n	80047d4 <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 80047ce:	4620      	mov	r0, r4
 80047d0:	f7ff ff0a 	bl	80045e8 <USBD_CtlError>
}
 80047d4:	bd38      	pop	{r3, r4, r5, pc}
	...

080047d8 <USBD_SetConfig>:
{
 80047d8:	b570      	push	{r4, r5, r6, lr}
 80047da:	4604      	mov	r4, r0
 80047dc:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 80047de:	788d      	ldrb	r5, [r1, #2]
 80047e0:	4b2f      	ldr	r3, [pc, #188]	@ (80048a0 <USBD_SetConfig+0xc8>)
 80047e2:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80047e4:	2d01      	cmp	r5, #1
 80047e6:	d810      	bhi.n	800480a <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 80047e8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d00f      	beq.n	8004812 <USBD_SetConfig+0x3a>
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d026      	beq.n	8004844 <USBD_SetConfig+0x6c>
      USBD_CtlError(pdev, req);
 80047f6:	f7ff fef7 	bl	80045e8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80047fa:	4b29      	ldr	r3, [pc, #164]	@ (80048a0 <USBD_SetConfig+0xc8>)
 80047fc:	7819      	ldrb	r1, [r3, #0]
 80047fe:	4620      	mov	r0, r4
 8004800:	f7ff fd06 	bl	8004210 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8004804:	2503      	movs	r5, #3
}
 8004806:	4628      	mov	r0, r5
 8004808:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 800480a:	f7ff feed 	bl	80045e8 <USBD_CtlError>
    return USBD_FAIL;
 800480e:	2503      	movs	r5, #3
 8004810:	e7f9      	b.n	8004806 <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 8004812:	b1a5      	cbz	r5, 800483e <USBD_SetConfig+0x66>
        pdev->dev_config = cfgidx;
 8004814:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8004816:	4629      	mov	r1, r5
 8004818:	f7ff fcf1 	bl	80041fe <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800481c:	4605      	mov	r5, r0
 800481e:	b138      	cbz	r0, 8004830 <USBD_SetConfig+0x58>
          USBD_CtlError(pdev, req);
 8004820:	4631      	mov	r1, r6
 8004822:	4620      	mov	r0, r4
 8004824:	f7ff fee0 	bl	80045e8 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004828:	2302      	movs	r3, #2
 800482a:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800482e:	e7ea      	b.n	8004806 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8004830:	4620      	mov	r0, r4
 8004832:	f000 fa70 	bl	8004d16 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004836:	2303      	movs	r3, #3
 8004838:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800483c:	e7e3      	b.n	8004806 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800483e:	f000 fa6a 	bl	8004d16 <USBD_CtlSendStatus>
 8004842:	e7e0      	b.n	8004806 <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 8004844:	b1cd      	cbz	r5, 800487a <USBD_SetConfig+0xa2>
      else if (cfgidx != pdev->dev_config)
 8004846:	6841      	ldr	r1, [r0, #4]
 8004848:	428d      	cmp	r5, r1
 800484a:	d025      	beq.n	8004898 <USBD_SetConfig+0xc0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800484c:	b2c9      	uxtb	r1, r1
 800484e:	f7ff fcdf 	bl	8004210 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004852:	4b13      	ldr	r3, [pc, #76]	@ (80048a0 <USBD_SetConfig+0xc8>)
 8004854:	7819      	ldrb	r1, [r3, #0]
 8004856:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8004858:	4620      	mov	r0, r4
 800485a:	f7ff fcd0 	bl	80041fe <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800485e:	4605      	mov	r5, r0
 8004860:	b1b0      	cbz	r0, 8004890 <USBD_SetConfig+0xb8>
          USBD_CtlError(pdev, req);
 8004862:	4631      	mov	r1, r6
 8004864:	4620      	mov	r0, r4
 8004866:	f7ff febf 	bl	80045e8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800486a:	7921      	ldrb	r1, [r4, #4]
 800486c:	4620      	mov	r0, r4
 800486e:	f7ff fccf 	bl	8004210 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004872:	2302      	movs	r3, #2
 8004874:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8004878:	e7c5      	b.n	8004806 <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800487a:	2302      	movs	r3, #2
 800487c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8004880:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004882:	4629      	mov	r1, r5
 8004884:	f7ff fcc4 	bl	8004210 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8004888:	4620      	mov	r0, r4
 800488a:	f000 fa44 	bl	8004d16 <USBD_CtlSendStatus>
 800488e:	e7ba      	b.n	8004806 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8004890:	4620      	mov	r0, r4
 8004892:	f000 fa40 	bl	8004d16 <USBD_CtlSendStatus>
 8004896:	e7b6      	b.n	8004806 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8004898:	f000 fa3d 	bl	8004d16 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800489c:	2500      	movs	r5, #0
 800489e:	e7b2      	b.n	8004806 <USBD_SetConfig+0x2e>
 80048a0:	200002f4 	.word	0x200002f4

080048a4 <USBD_GetConfig>:
{
 80048a4:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 80048a6:	88cb      	ldrh	r3, [r1, #6]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d10b      	bne.n	80048c4 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 80048ac:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d909      	bls.n	80048ca <USBD_GetConfig+0x26>
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	d111      	bne.n	80048de <USBD_GetConfig+0x3a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80048ba:	2201      	movs	r2, #1
 80048bc:	1d01      	adds	r1, r0, #4
 80048be:	f000 fa0d 	bl	8004cdc <USBD_CtlSendData>
        break;
 80048c2:	e001      	b.n	80048c8 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 80048c4:	f7ff fe90 	bl	80045e8 <USBD_CtlError>
}
 80048c8:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 80048ca:	b25b      	sxtb	r3, r3
 80048cc:	b13b      	cbz	r3, 80048de <USBD_GetConfig+0x3a>
        pdev->dev_default_config = 0U;
 80048ce:	4601      	mov	r1, r0
 80048d0:	2300      	movs	r3, #0
 80048d2:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80048d6:	2201      	movs	r2, #1
 80048d8:	f000 fa00 	bl	8004cdc <USBD_CtlSendData>
        break;
 80048dc:	e7f4      	b.n	80048c8 <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 80048de:	f7ff fe83 	bl	80045e8 <USBD_CtlError>
}
 80048e2:	e7f1      	b.n	80048c8 <USBD_GetConfig+0x24>

080048e4 <USBD_GetStatus>:
{
 80048e4:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80048e6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80048ea:	3b01      	subs	r3, #1
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d812      	bhi.n	8004916 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 80048f0:	88cb      	ldrh	r3, [r1, #6]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d10c      	bne.n	8004910 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 80048fa:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 80048fe:	b10b      	cbz	r3, 8004904 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004900:	2302      	movs	r3, #2
 8004902:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8004904:	2202      	movs	r2, #2
 8004906:	f100 010c 	add.w	r1, r0, #12
 800490a:	f000 f9e7 	bl	8004cdc <USBD_CtlSendData>
}
 800490e:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8004910:	f7ff fe6a 	bl	80045e8 <USBD_CtlError>
        break;
 8004914:	e7fb      	b.n	800490e <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8004916:	f7ff fe67 	bl	80045e8 <USBD_CtlError>
}
 800491a:	e7f8      	b.n	800490e <USBD_GetStatus+0x2a>

0800491c <USBD_SetFeature>:
{
 800491c:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800491e:	884b      	ldrh	r3, [r1, #2]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d004      	beq.n	800492e <USBD_SetFeature+0x12>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8004924:	2b02      	cmp	r3, #2
 8004926:	d007      	beq.n	8004938 <USBD_SetFeature+0x1c>
    USBD_CtlError(pdev, req);
 8004928:	f7ff fe5e 	bl	80045e8 <USBD_CtlError>
}
 800492c:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800492e:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8004932:	f000 f9f0 	bl	8004d16 <USBD_CtlSendStatus>
 8004936:	e7f9      	b.n	800492c <USBD_SetFeature+0x10>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8004938:	888b      	ldrh	r3, [r1, #4]
 800493a:	0a1b      	lsrs	r3, r3, #8
 800493c:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8004940:	f000 f9e9 	bl	8004d16 <USBD_CtlSendStatus>
 8004944:	e7f2      	b.n	800492c <USBD_SetFeature+0x10>

08004946 <USBD_ClrFeature>:
{
 8004946:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8004948:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800494c:	3b01      	subs	r3, #1
 800494e:	2b02      	cmp	r3, #2
 8004950:	d809      	bhi.n	8004966 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004952:	884b      	ldrh	r3, [r1, #2]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d000      	beq.n	800495a <USBD_ClrFeature+0x14>
}
 8004958:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800495a:	2300      	movs	r3, #0
 800495c:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8004960:	f000 f9d9 	bl	8004d16 <USBD_CtlSendStatus>
 8004964:	e7f8      	b.n	8004958 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8004966:	f7ff fe3f 	bl	80045e8 <USBD_CtlError>
}
 800496a:	e7f5      	b.n	8004958 <USBD_ClrFeature+0x12>

0800496c <USBD_StdDevReq>:
{
 800496c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800496e:	780c      	ldrb	r4, [r1, #0]
 8004970:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8004974:	2c20      	cmp	r4, #32
 8004976:	d006      	beq.n	8004986 <USBD_StdDevReq+0x1a>
 8004978:	2c40      	cmp	r4, #64	@ 0x40
 800497a:	d004      	beq.n	8004986 <USBD_StdDevReq+0x1a>
 800497c:	b16c      	cbz	r4, 800499a <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 800497e:	f7ff fe33 	bl	80045e8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004982:	2400      	movs	r4, #0
      break;
 8004984:	e007      	b.n	8004996 <USBD_StdDevReq+0x2a>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8004986:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800498a:	33ae      	adds	r3, #174	@ 0xae
 800498c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	4798      	blx	r3
 8004994:	4604      	mov	r4, r0
}
 8004996:	4620      	mov	r0, r4
 8004998:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800499a:	784d      	ldrb	r5, [r1, #1]
 800499c:	2d09      	cmp	r5, #9
 800499e:	d81d      	bhi.n	80049dc <USBD_StdDevReq+0x70>
 80049a0:	e8df f005 	tbb	[pc, r5]
 80049a4:	161c1912 	.word	0x161c1912
 80049a8:	1c05081c 	.word	0x1c05081c
 80049ac:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 80049ae:	f7ff fe25 	bl	80045fc <USBD_GetDescriptor>
          break;
 80049b2:	e7f0      	b.n	8004996 <USBD_StdDevReq+0x2a>
          USBD_SetAddress(pdev, req);
 80049b4:	f7ff fee7 	bl	8004786 <USBD_SetAddress>
          break;
 80049b8:	e7ed      	b.n	8004996 <USBD_StdDevReq+0x2a>
          ret = USBD_SetConfig(pdev, req);
 80049ba:	f7ff ff0d 	bl	80047d8 <USBD_SetConfig>
 80049be:	4604      	mov	r4, r0
          break;
 80049c0:	e7e9      	b.n	8004996 <USBD_StdDevReq+0x2a>
          USBD_GetConfig(pdev, req);
 80049c2:	f7ff ff6f 	bl	80048a4 <USBD_GetConfig>
          break;
 80049c6:	e7e6      	b.n	8004996 <USBD_StdDevReq+0x2a>
          USBD_GetStatus(pdev, req);
 80049c8:	f7ff ff8c 	bl	80048e4 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80049cc:	462c      	mov	r4, r5
          break;
 80049ce:	e7e2      	b.n	8004996 <USBD_StdDevReq+0x2a>
          USBD_SetFeature(pdev, req);
 80049d0:	f7ff ffa4 	bl	800491c <USBD_SetFeature>
          break;
 80049d4:	e7df      	b.n	8004996 <USBD_StdDevReq+0x2a>
          USBD_ClrFeature(pdev, req);
 80049d6:	f7ff ffb6 	bl	8004946 <USBD_ClrFeature>
          break;
 80049da:	e7dc      	b.n	8004996 <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 80049dc:	f7ff fe04 	bl	80045e8 <USBD_CtlError>
          break;
 80049e0:	e7d9      	b.n	8004996 <USBD_StdDevReq+0x2a>

080049e2 <USBD_StdItfReq>:
{
 80049e2:	b570      	push	{r4, r5, r6, lr}
 80049e4:	4605      	mov	r5, r0
 80049e6:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80049e8:	780b      	ldrb	r3, [r1, #0]
 80049ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80049ee:	2b20      	cmp	r3, #32
 80049f0:	d007      	beq.n	8004a02 <USBD_StdItfReq+0x20>
 80049f2:	2b40      	cmp	r3, #64	@ 0x40
 80049f4:	d005      	beq.n	8004a02 <USBD_StdItfReq+0x20>
 80049f6:	b123      	cbz	r3, 8004a02 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 80049f8:	f7ff fdf6 	bl	80045e8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80049fc:	2600      	movs	r6, #0
}
 80049fe:	4630      	mov	r0, r6
 8004a00:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8004a02:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 8004a06:	3b01      	subs	r3, #1
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d826      	bhi.n	8004a5a <USBD_StdItfReq+0x78>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004a0c:	7921      	ldrb	r1, [r4, #4]
 8004a0e:	2901      	cmp	r1, #1
 8004a10:	d905      	bls.n	8004a1e <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 8004a12:	4621      	mov	r1, r4
 8004a14:	4628      	mov	r0, r5
 8004a16:	f7ff fde7 	bl	80045e8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004a1a:	2600      	movs	r6, #0
 8004a1c:	e7ef      	b.n	80049fe <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8004a1e:	4628      	mov	r0, r5
 8004a20:	f7ff fccd 	bl	80043be <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004a24:	b968      	cbnz	r0, 8004a42 <USBD_StdItfReq+0x60>
              if (pdev->pClass[idx]->Setup != NULL)
 8004a26:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 8004a2a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8004a2e:	6891      	ldr	r1, [r2, #8]
 8004a30:	b189      	cbz	r1, 8004a56 <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 8004a32:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8004a36:	6893      	ldr	r3, [r2, #8]
 8004a38:	4621      	mov	r1, r4
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	4798      	blx	r3
 8004a3e:	4606      	mov	r6, r0
 8004a40:	e000      	b.n	8004a44 <USBD_StdItfReq+0x62>
              ret = USBD_FAIL;
 8004a42:	2603      	movs	r6, #3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004a44:	88e3      	ldrh	r3, [r4, #6]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1d9      	bne.n	80049fe <USBD_StdItfReq+0x1c>
 8004a4a:	2e00      	cmp	r6, #0
 8004a4c:	d1d7      	bne.n	80049fe <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 8004a4e:	4628      	mov	r0, r5
 8004a50:	f000 f961 	bl	8004d16 <USBD_CtlSendStatus>
 8004a54:	e7d3      	b.n	80049fe <USBD_StdItfReq+0x1c>
                ret = USBD_FAIL;
 8004a56:	2603      	movs	r6, #3
 8004a58:	e7f4      	b.n	8004a44 <USBD_StdItfReq+0x62>
          USBD_CtlError(pdev, req);
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	f7ff fdc3 	bl	80045e8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004a62:	2600      	movs	r6, #0
          break;
 8004a64:	e7cb      	b.n	80049fe <USBD_StdItfReq+0x1c>

08004a66 <USBD_StdEPReq>:
{
 8004a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a6a:	4606      	mov	r6, r0
 8004a6c:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 8004a6e:	888b      	ldrh	r3, [r1, #4]
 8004a70:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004a72:	780c      	ldrb	r4, [r1, #0]
 8004a74:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8004a78:	2c20      	cmp	r4, #32
 8004a7a:	d008      	beq.n	8004a8e <USBD_StdEPReq+0x28>
 8004a7c:	2c40      	cmp	r4, #64	@ 0x40
 8004a7e:	d006      	beq.n	8004a8e <USBD_StdEPReq+0x28>
 8004a80:	b1dc      	cbz	r4, 8004aba <USBD_StdEPReq+0x54>
      USBD_CtlError(pdev, req);
 8004a82:	f7ff fdb1 	bl	80045e8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004a86:	2400      	movs	r4, #0
}
 8004a88:	4620      	mov	r0, r4
 8004a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8004a8e:	4639      	mov	r1, r7
 8004a90:	4630      	mov	r0, r6
 8004a92:	f7ff fc96 	bl	80043c2 <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004a96:	4604      	mov	r4, r0
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	f040 80f8 	bne.w	8004c8e <USBD_StdEPReq+0x228>
        pdev->classId = idx;
 8004a9e:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 8004aa2:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8004aa6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0eb      	beq.n	8004a88 <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	4798      	blx	r3
 8004ab6:	4604      	mov	r4, r0
 8004ab8:	e7e6      	b.n	8004a88 <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 8004aba:	f891 8001 	ldrb.w	r8, [r1, #1]
 8004abe:	f1b8 0f01 	cmp.w	r8, #1
 8004ac2:	d031      	beq.n	8004b28 <USBD_StdEPReq+0xc2>
 8004ac4:	f1b8 0f03 	cmp.w	r8, #3
 8004ac8:	d005      	beq.n	8004ad6 <USBD_StdEPReq+0x70>
 8004aca:	f1b8 0f00 	cmp.w	r8, #0
 8004ace:	d067      	beq.n	8004ba0 <USBD_StdEPReq+0x13a>
          USBD_CtlError(pdev, req);
 8004ad0:	f7ff fd8a 	bl	80045e8 <USBD_CtlError>
          break;
 8004ad4:	e7d8      	b.n	8004a88 <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 8004ad6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d004      	beq.n	8004aea <USBD_StdEPReq+0x84>
 8004ae0:	2b03      	cmp	r3, #3
 8004ae2:	d012      	beq.n	8004b0a <USBD_StdEPReq+0xa4>
              USBD_CtlError(pdev, req);
 8004ae4:	f7ff fd80 	bl	80045e8 <USBD_CtlError>
              break;
 8004ae8:	e7ce      	b.n	8004a88 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004aea:	b10f      	cbz	r7, 8004af0 <USBD_StdEPReq+0x8a>
 8004aec:	2f80      	cmp	r7, #128	@ 0x80
 8004aee:	d104      	bne.n	8004afa <USBD_StdEPReq+0x94>
                USBD_CtlError(pdev, req);
 8004af0:	4629      	mov	r1, r5
 8004af2:	4630      	mov	r0, r6
 8004af4:	f7ff fd78 	bl	80045e8 <USBD_CtlError>
 8004af8:	e7c6      	b.n	8004a88 <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004afa:	4639      	mov	r1, r7
 8004afc:	f000 fb00 	bl	8005100 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004b00:	2180      	movs	r1, #128	@ 0x80
 8004b02:	4630      	mov	r0, r6
 8004b04:	f000 fafc 	bl	8005100 <USBD_LL_StallEP>
 8004b08:	e7be      	b.n	8004a88 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004b0a:	884b      	ldrh	r3, [r1, #2]
 8004b0c:	b923      	cbnz	r3, 8004b18 <USBD_StdEPReq+0xb2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004b0e:	b11f      	cbz	r7, 8004b18 <USBD_StdEPReq+0xb2>
 8004b10:	2f80      	cmp	r7, #128	@ 0x80
 8004b12:	d001      	beq.n	8004b18 <USBD_StdEPReq+0xb2>
 8004b14:	88cb      	ldrh	r3, [r1, #6]
 8004b16:	b11b      	cbz	r3, 8004b20 <USBD_StdEPReq+0xba>
              (void)USBD_CtlSendStatus(pdev);
 8004b18:	4630      	mov	r0, r6
 8004b1a:	f000 f8fc 	bl	8004d16 <USBD_CtlSendStatus>
              break;
 8004b1e:	e7b3      	b.n	8004a88 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004b20:	4639      	mov	r1, r7
 8004b22:	f000 faed 	bl	8005100 <USBD_LL_StallEP>
 8004b26:	e7f7      	b.n	8004b18 <USBD_StdEPReq+0xb2>
          switch (pdev->dev_state)
 8004b28:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d004      	beq.n	8004b3c <USBD_StdEPReq+0xd6>
 8004b32:	2b03      	cmp	r3, #3
 8004b34:	d012      	beq.n	8004b5c <USBD_StdEPReq+0xf6>
              USBD_CtlError(pdev, req);
 8004b36:	f7ff fd57 	bl	80045e8 <USBD_CtlError>
              break;
 8004b3a:	e7a5      	b.n	8004a88 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004b3c:	b10f      	cbz	r7, 8004b42 <USBD_StdEPReq+0xdc>
 8004b3e:	2f80      	cmp	r7, #128	@ 0x80
 8004b40:	d104      	bne.n	8004b4c <USBD_StdEPReq+0xe6>
                USBD_CtlError(pdev, req);
 8004b42:	4629      	mov	r1, r5
 8004b44:	4630      	mov	r0, r6
 8004b46:	f7ff fd4f 	bl	80045e8 <USBD_CtlError>
 8004b4a:	e79d      	b.n	8004a88 <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004b4c:	4639      	mov	r1, r7
 8004b4e:	f000 fad7 	bl	8005100 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004b52:	2180      	movs	r1, #128	@ 0x80
 8004b54:	4630      	mov	r0, r6
 8004b56:	f000 fad3 	bl	8005100 <USBD_LL_StallEP>
 8004b5a:	e795      	b.n	8004a88 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004b5c:	884b      	ldrh	r3, [r1, #2]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d192      	bne.n	8004a88 <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004b62:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 8004b66:	d117      	bne.n	8004b98 <USBD_StdEPReq+0x132>
                (void)USBD_CtlSendStatus(pdev);
 8004b68:	4630      	mov	r0, r6
 8004b6a:	f000 f8d4 	bl	8004d16 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8004b6e:	4639      	mov	r1, r7
 8004b70:	4630      	mov	r0, r6
 8004b72:	f7ff fc26 	bl	80043c2 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004b76:	2800      	cmp	r0, #0
 8004b78:	d186      	bne.n	8004a88 <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 8004b7a:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 8004b7e:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 8004b82:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8004b86:	6892      	ldr	r2, [r2, #8]
 8004b88:	2a00      	cmp	r2, #0
 8004b8a:	f000 8082 	beq.w	8004c92 <USBD_StdEPReq+0x22c>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8004b8e:	4629      	mov	r1, r5
 8004b90:	4630      	mov	r0, r6
 8004b92:	4790      	blx	r2
 8004b94:	4604      	mov	r4, r0
 8004b96:	e777      	b.n	8004a88 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004b98:	4639      	mov	r1, r7
 8004b9a:	f000 fab9 	bl	8005110 <USBD_LL_ClearStallEP>
 8004b9e:	e7e3      	b.n	8004b68 <USBD_StdEPReq+0x102>
          switch (pdev->dev_state)
 8004ba0:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	2a02      	cmp	r2, #2
 8004ba8:	d005      	beq.n	8004bb6 <USBD_StdEPReq+0x150>
 8004baa:	2a03      	cmp	r2, #3
 8004bac:	d027      	beq.n	8004bfe <USBD_StdEPReq+0x198>
              USBD_CtlError(pdev, req);
 8004bae:	f7ff fd1b 	bl	80045e8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004bb2:	4644      	mov	r4, r8
              break;
 8004bb4:	e768      	b.n	8004a88 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004bb6:	b10f      	cbz	r7, 8004bbc <USBD_StdEPReq+0x156>
 8004bb8:	2f80      	cmp	r7, #128	@ 0x80
 8004bba:	d113      	bne.n	8004be4 <USBD_StdEPReq+0x17e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004bbc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004bc0:	d114      	bne.n	8004bec <USBD_StdEPReq+0x186>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004bc2:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004bc6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8004bca:	00b9      	lsls	r1, r7, #2
 8004bcc:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8004bd0:	4431      	add	r1, r6
 8004bd2:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004bd8:	2202      	movs	r2, #2
 8004bda:	4630      	mov	r0, r6
 8004bdc:	f000 f87e 	bl	8004cdc <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004be0:	4644      	mov	r4, r8
              break;
 8004be2:	e751      	b.n	8004a88 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 8004be4:	f7ff fd00 	bl	80045e8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004be8:	4644      	mov	r4, r8
                break;
 8004bea:	e74d      	b.n	8004a88 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004bec:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 8004bf0:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8004bf4:	00b9      	lsls	r1, r7, #2
 8004bf6:	3110      	adds	r1, #16
 8004bf8:	4431      	add	r1, r6
 8004bfa:	3104      	adds	r1, #4
 8004bfc:	e7ea      	b.n	8004bd4 <USBD_StdEPReq+0x16e>
              if ((ep_addr & 0x80U) == 0x80U)
 8004bfe:	b25b      	sxtb	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	db1f      	blt.n	8004c44 <USBD_StdEPReq+0x1de>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004c04:	f007 020f 	and.w	r2, r7, #15
 8004c08:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004c0c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004c10:	f8b2 2164 	ldrh.w	r2, [r2, #356]	@ 0x164
 8004c14:	b31a      	cbz	r2, 8004c5e <USBD_StdEPReq+0x1f8>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	db25      	blt.n	8004c66 <USBD_StdEPReq+0x200>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004c1a:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004c1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004c22:	009c      	lsls	r4, r3, #2
 8004c24:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 8004c28:	4434      	add	r4, r6
 8004c2a:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004c2c:	b10f      	cbz	r7, 8004c32 <USBD_StdEPReq+0x1cc>
 8004c2e:	2f80      	cmp	r7, #128	@ 0x80
 8004c30:	d122      	bne.n	8004c78 <USBD_StdEPReq+0x212>
                pep->status = 0x0000U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004c36:	2202      	movs	r2, #2
 8004c38:	4621      	mov	r1, r4
 8004c3a:	4630      	mov	r0, r6
 8004c3c:	f000 f84e 	bl	8004cdc <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004c40:	4644      	mov	r4, r8
              break;
 8004c42:	e721      	b.n	8004a88 <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004c44:	f007 020f 	and.w	r2, r7, #15
 8004c48:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004c4c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004c50:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8004c52:	2a00      	cmp	r2, #0
 8004c54:	d1df      	bne.n	8004c16 <USBD_StdEPReq+0x1b0>
                  USBD_CtlError(pdev, req);
 8004c56:	f7ff fcc7 	bl	80045e8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004c5a:	4644      	mov	r4, r8
                  break;
 8004c5c:	e714      	b.n	8004a88 <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 8004c5e:	f7ff fcc3 	bl	80045e8 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004c62:	4644      	mov	r4, r8
                  break;
 8004c64:	e710      	b.n	8004a88 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004c66:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
 8004c6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004c6e:	009c      	lsls	r4, r3, #2
 8004c70:	3410      	adds	r4, #16
 8004c72:	4434      	add	r4, r6
 8004c74:	3404      	adds	r4, #4
 8004c76:	e7d9      	b.n	8004c2c <USBD_StdEPReq+0x1c6>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004c78:	4639      	mov	r1, r7
 8004c7a:	4630      	mov	r0, r6
 8004c7c:	f000 fa00 	bl	8005080 <USBD_LL_IsStallEP>
 8004c80:	b110      	cbz	r0, 8004c88 <USBD_StdEPReq+0x222>
                pep->status = 0x0001U;
 8004c82:	2301      	movs	r3, #1
 8004c84:	6023      	str	r3, [r4, #0]
 8004c86:	e7d6      	b.n	8004c36 <USBD_StdEPReq+0x1d0>
                pep->status = 0x0000U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	6023      	str	r3, [r4, #0]
 8004c8c:	e7d3      	b.n	8004c36 <USBD_StdEPReq+0x1d0>
  USBD_StatusTypeDef ret = USBD_OK;
 8004c8e:	2400      	movs	r4, #0
 8004c90:	e6fa      	b.n	8004a88 <USBD_StdEPReq+0x22>
 8004c92:	4604      	mov	r4, r0
 8004c94:	e6f8      	b.n	8004a88 <USBD_StdEPReq+0x22>

08004c96 <USBD_GetString>:
  if (desc == NULL)
 8004c96:	b300      	cbz	r0, 8004cda <USBD_GetString+0x44>
{
 8004c98:	b570      	push	{r4, r5, r6, lr}
 8004c9a:	460d      	mov	r5, r1
 8004c9c:	4616      	mov	r6, r2
 8004c9e:	4604      	mov	r4, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8004ca0:	f7ff fc84 	bl	80045ac <USBD_GetLen>
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	0043      	lsls	r3, r0, #1
 8004ca8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cac:	d806      	bhi.n	8004cbc <USBD_GetString+0x26>
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8004cb2:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	706b      	strb	r3, [r5, #1]
  idx++;
 8004cb8:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8004cba:	e00a      	b.n	8004cd2 <USBD_GetString+0x3c>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8004cbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004cc0:	e7f6      	b.n	8004cb0 <USBD_GetString+0x1a>
    unicode[idx] = *pdesc;
 8004cc2:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8004cc4:	3401      	adds	r4, #1
    idx++;
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8004cca:	2100      	movs	r1, #0
 8004ccc:	54a9      	strb	r1, [r5, r2]
    idx++;
 8004cce:	3302      	adds	r3, #2
 8004cd0:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8004cd2:	7822      	ldrb	r2, [r4, #0]
 8004cd4:	2a00      	cmp	r2, #0
 8004cd6:	d1f4      	bne.n	8004cc2 <USBD_GetString+0x2c>
}
 8004cd8:	bd70      	pop	{r4, r5, r6, pc}
 8004cda:	4770      	bx	lr

08004cdc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8004cdc:	b508      	push	{r3, lr}
 8004cde:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8004ce6:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8004ce8:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004cea:	460a      	mov	r2, r1
 8004cec:	2100      	movs	r1, #0
 8004cee:	f000 fa1f 	bl	8005130 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	bd08      	pop	{r3, pc}

08004cf6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8004cf6:	b508      	push	{r3, lr}
 8004cf8:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004cfa:	460a      	mov	r2, r1
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	f000 fa17 	bl	8005130 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004d02:	2000      	movs	r0, #0
 8004d04:	bd08      	pop	{r3, pc}

08004d06 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8004d06:	b508      	push	{r3, lr}
 8004d08:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004d0a:	460a      	mov	r2, r1
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	f000 fa17 	bl	8005140 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004d12:	2000      	movs	r0, #0
 8004d14:	bd08      	pop	{r3, pc}

08004d16 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004d16:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004d18:	2204      	movs	r2, #4
 8004d1a:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004d1e:	2300      	movs	r3, #0
 8004d20:	461a      	mov	r2, r3
 8004d22:	4619      	mov	r1, r3
 8004d24:	f000 fa04 	bl	8005130 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004d28:	2000      	movs	r0, #0
 8004d2a:	bd08      	pop	{r3, pc}

08004d2c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004d2c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004d2e:	2205      	movs	r2, #5
 8004d30:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004d34:	2300      	movs	r3, #0
 8004d36:	461a      	mov	r2, r3
 8004d38:	4619      	mov	r1, r3
 8004d3a:	f000 fa01 	bl	8005140 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004d3e:	2000      	movs	r0, #0
 8004d40:	bd08      	pop	{r3, pc}
	...

08004d44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004d44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004d46:	2200      	movs	r2, #0
 8004d48:	490b      	ldr	r1, [pc, #44]	@ (8004d78 <MX_USB_DEVICE_Init+0x34>)
 8004d4a:	480c      	ldr	r0, [pc, #48]	@ (8004d7c <MX_USB_DEVICE_Init+0x38>)
 8004d4c:	f7ff fa1c 	bl	8004188 <USBD_Init>
 8004d50:	b948      	cbnz	r0, 8004d66 <MX_USB_DEVICE_Init+0x22>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8004d52:	490b      	ldr	r1, [pc, #44]	@ (8004d80 <MX_USB_DEVICE_Init+0x3c>)
 8004d54:	4809      	ldr	r0, [pc, #36]	@ (8004d7c <MX_USB_DEVICE_Init+0x38>)
 8004d56:	f7ff fa2e 	bl	80041b6 <USBD_RegisterClass>
 8004d5a:	b938      	cbnz	r0, 8004d6c <MX_USB_DEVICE_Init+0x28>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004d5c:	4807      	ldr	r0, [pc, #28]	@ (8004d7c <MX_USB_DEVICE_Init+0x38>)
 8004d5e:	f7ff fa4a 	bl	80041f6 <USBD_Start>
 8004d62:	b930      	cbnz	r0, 8004d72 <MX_USB_DEVICE_Init+0x2e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004d64:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004d66:	f7fb fce1 	bl	800072c <Error_Handler>
 8004d6a:	e7f2      	b.n	8004d52 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8004d6c:	f7fb fcde 	bl	800072c <Error_Handler>
 8004d70:	e7f4      	b.n	8004d5c <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8004d72:	f7fb fcdb 	bl	800072c <Error_Handler>
}
 8004d76:	e7f5      	b.n	8004d64 <MX_USB_DEVICE_Init+0x20>
 8004d78:	20000100 	.word	0x20000100
 8004d7c:	200002f8 	.word	0x200002f8
 8004d80:	20000094 	.word	0x20000094

08004d84 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004d84:	2312      	movs	r3, #18
 8004d86:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8004d88:	4800      	ldr	r0, [pc, #0]	@ (8004d8c <USBD_FS_DeviceDescriptor+0x8>)
 8004d8a:	4770      	bx	lr
 8004d8c:	200000ec 	.word	0x200000ec

08004d90 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004d90:	2304      	movs	r3, #4
 8004d92:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8004d94:	4800      	ldr	r0, [pc, #0]	@ (8004d98 <USBD_FS_LangIDStrDescriptor+0x8>)
 8004d96:	4770      	bx	lr
 8004d98:	200000e8 	.word	0x200000e8

08004d9c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d21e      	bcs.n	8004de0 <IntToUnicode+0x44>
{
 8004da2:	b500      	push	{lr}
 8004da4:	e010      	b.n	8004dc8 <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004da6:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 8004daa:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 8004dae:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8004db0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004db4:	f10c 0c01 	add.w	ip, ip, #1
 8004db8:	f04f 0e00 	mov.w	lr, #0
 8004dbc:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d209      	bcs.n	8004ddc <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 8004dc8:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 8004dcc:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 8004dd0:	d2e9      	bcs.n	8004da6 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8004dd2:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 8004dd6:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 8004dda:	e7e8      	b.n	8004dae <IntToUnicode+0x12>
  }
}
 8004ddc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004de0:	4770      	bx	lr
	...

08004de4 <Get_SerialNum>:
{
 8004de4:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004de6:	4b0b      	ldr	r3, [pc, #44]	@ (8004e14 <Get_SerialNum+0x30>)
 8004de8:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	@ 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004dec:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	@ 0xa14
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004df0:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	@ 0xa18
  if (deviceserial0 != 0)
 8004df4:	18c0      	adds	r0, r0, r3
 8004df6:	d100      	bne.n	8004dfa <Get_SerialNum+0x16>
}
 8004df8:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004dfa:	4d07      	ldr	r5, [pc, #28]	@ (8004e18 <Get_SerialNum+0x34>)
 8004dfc:	2208      	movs	r2, #8
 8004dfe:	4629      	mov	r1, r5
 8004e00:	f7ff ffcc 	bl	8004d9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004e04:	2204      	movs	r2, #4
 8004e06:	f105 0110 	add.w	r1, r5, #16
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	f7ff ffc6 	bl	8004d9c <IntToUnicode>
}
 8004e10:	e7f2      	b.n	8004df8 <Get_SerialNum+0x14>
 8004e12:	bf00      	nop
 8004e14:	1fff7000 	.word	0x1fff7000
 8004e18:	200000ce 	.word	0x200000ce

08004e1c <USBD_FS_SerialStrDescriptor>:
{
 8004e1c:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004e1e:	231a      	movs	r3, #26
 8004e20:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8004e22:	f7ff ffdf 	bl	8004de4 <Get_SerialNum>
}
 8004e26:	4801      	ldr	r0, [pc, #4]	@ (8004e2c <USBD_FS_SerialStrDescriptor+0x10>)
 8004e28:	bd08      	pop	{r3, pc}
 8004e2a:	bf00      	nop
 8004e2c:	200000cc 	.word	0x200000cc

08004e30 <USBD_FS_ProductStrDescriptor>:
{
 8004e30:	b508      	push	{r3, lr}
 8004e32:	460a      	mov	r2, r1
  if(speed == 0)
 8004e34:	b928      	cbnz	r0, 8004e42 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004e36:	4905      	ldr	r1, [pc, #20]	@ (8004e4c <USBD_FS_ProductStrDescriptor+0x1c>)
 8004e38:	4805      	ldr	r0, [pc, #20]	@ (8004e50 <USBD_FS_ProductStrDescriptor+0x20>)
 8004e3a:	f7ff ff2c 	bl	8004c96 <USBD_GetString>
}
 8004e3e:	4803      	ldr	r0, [pc, #12]	@ (8004e4c <USBD_FS_ProductStrDescriptor+0x1c>)
 8004e40:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004e42:	4902      	ldr	r1, [pc, #8]	@ (8004e4c <USBD_FS_ProductStrDescriptor+0x1c>)
 8004e44:	4802      	ldr	r0, [pc, #8]	@ (8004e50 <USBD_FS_ProductStrDescriptor+0x20>)
 8004e46:	f7ff ff26 	bl	8004c96 <USBD_GetString>
 8004e4a:	e7f8      	b.n	8004e3e <USBD_FS_ProductStrDescriptor+0xe>
 8004e4c:	200005d4 	.word	0x200005d4
 8004e50:	080068a8 	.word	0x080068a8

08004e54 <USBD_FS_ManufacturerStrDescriptor>:
{
 8004e54:	b510      	push	{r4, lr}
 8004e56:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004e58:	4c03      	ldr	r4, [pc, #12]	@ (8004e68 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004e5a:	4621      	mov	r1, r4
 8004e5c:	4803      	ldr	r0, [pc, #12]	@ (8004e6c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004e5e:	f7ff ff1a 	bl	8004c96 <USBD_GetString>
}
 8004e62:	4620      	mov	r0, r4
 8004e64:	bd10      	pop	{r4, pc}
 8004e66:	bf00      	nop
 8004e68:	200005d4 	.word	0x200005d4
 8004e6c:	080068c0 	.word	0x080068c0

08004e70 <USBD_FS_ConfigStrDescriptor>:
{
 8004e70:	b508      	push	{r3, lr}
 8004e72:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8004e74:	b928      	cbnz	r0, 8004e82 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004e76:	4905      	ldr	r1, [pc, #20]	@ (8004e8c <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004e78:	4805      	ldr	r0, [pc, #20]	@ (8004e90 <USBD_FS_ConfigStrDescriptor+0x20>)
 8004e7a:	f7ff ff0c 	bl	8004c96 <USBD_GetString>
}
 8004e7e:	4803      	ldr	r0, [pc, #12]	@ (8004e8c <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004e80:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004e82:	4902      	ldr	r1, [pc, #8]	@ (8004e8c <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004e84:	4802      	ldr	r0, [pc, #8]	@ (8004e90 <USBD_FS_ConfigStrDescriptor+0x20>)
 8004e86:	f7ff ff06 	bl	8004c96 <USBD_GetString>
 8004e8a:	e7f8      	b.n	8004e7e <USBD_FS_ConfigStrDescriptor+0xe>
 8004e8c:	200005d4 	.word	0x200005d4
 8004e90:	080068cc 	.word	0x080068cc

08004e94 <USBD_FS_InterfaceStrDescriptor>:
{
 8004e94:	b508      	push	{r3, lr}
 8004e96:	460a      	mov	r2, r1
  if(speed == 0)
 8004e98:	b928      	cbnz	r0, 8004ea6 <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004e9a:	4905      	ldr	r1, [pc, #20]	@ (8004eb0 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004e9c:	4805      	ldr	r0, [pc, #20]	@ (8004eb4 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8004e9e:	f7ff fefa 	bl	8004c96 <USBD_GetString>
}
 8004ea2:	4803      	ldr	r0, [pc, #12]	@ (8004eb0 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004ea4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004ea6:	4902      	ldr	r1, [pc, #8]	@ (8004eb0 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004ea8:	4802      	ldr	r0, [pc, #8]	@ (8004eb4 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8004eaa:	f7ff fef4 	bl	8004c96 <USBD_GetString>
 8004eae:	e7f8      	b.n	8004ea2 <USBD_FS_InterfaceStrDescriptor+0xe>
 8004eb0:	200005d4 	.word	0x200005d4
 8004eb4:	080068d8 	.word	0x080068d8

08004eb8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004eb8:	b530      	push	{r4, r5, lr}
 8004eba:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	9303      	str	r3, [sp, #12]
 8004ec0:	9304      	str	r3, [sp, #16]
 8004ec2:	9305      	str	r3, [sp, #20]
 8004ec4:	9306      	str	r3, [sp, #24]
 8004ec6:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8004ec8:	6803      	ldr	r3, [r0, #0]
 8004eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ece:	d001      	beq.n	8004ed4 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004ed0:	b009      	add	sp, #36	@ 0x24
 8004ed2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ed4:	2500      	movs	r5, #0
 8004ed6:	9501      	str	r5, [sp, #4]
 8004ed8:	4c16      	ldr	r4, [pc, #88]	@ (8004f34 <HAL_PCD_MspInit+0x7c>)
 8004eda:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004edc:	f043 0301 	orr.w	r3, r3, #1
 8004ee0:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ee2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	9301      	str	r3, [sp, #4]
 8004eea:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004eec:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004ef0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004efa:	230a      	movs	r3, #10
 8004efc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004efe:	a903      	add	r1, sp, #12
 8004f00:	480d      	ldr	r0, [pc, #52]	@ (8004f38 <HAL_PCD_MspInit+0x80>)
 8004f02:	f7fc fa23 	bl	800134c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004f06:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004f08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f0e:	9502      	str	r5, [sp, #8]
 8004f10:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004f12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f16:	6463      	str	r3, [r4, #68]	@ 0x44
 8004f18:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f1e:	9302      	str	r3, [sp, #8]
 8004f20:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8004f22:	462a      	mov	r2, r5
 8004f24:	4629      	mov	r1, r5
 8004f26:	2043      	movs	r0, #67	@ 0x43
 8004f28:	f7fb ff86 	bl	8000e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8004f2c:	2043      	movs	r0, #67	@ 0x43
 8004f2e:	f7fb ff93 	bl	8000e58 <HAL_NVIC_EnableIRQ>
}
 8004f32:	e7cd      	b.n	8004ed0 <HAL_PCD_MspInit+0x18>
 8004f34:	40023800 	.word	0x40023800
 8004f38:	40020000 	.word	0x40020000

08004f3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004f3c:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004f3e:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 8004f42:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004f46:	f7ff f96c 	bl	8004222 <USBD_LL_SetupStage>
}
 8004f4a:	bd08      	pop	{r3, pc}

08004f4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004f4c:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004f4e:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8004f52:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004f56:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 8004f5a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004f5e:	f7ff fa32 	bl	80043c6 <USBD_LL_DataOutStage>
}
 8004f62:	bd08      	pop	{r3, pc}

08004f64 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004f64:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004f66:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8004f6a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004f6e:	6a1a      	ldr	r2, [r3, #32]
 8004f70:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004f74:	f7ff fa89 	bl	800448a <USBD_LL_DataInStage>
}
 8004f78:	bd08      	pop	{r3, pc}

08004f7a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004f7a:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004f7c:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004f80:	f7ff f9cc 	bl	800431c <USBD_LL_SOF>
}
 8004f84:	bd08      	pop	{r3, pc}

08004f86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004f86:	b510      	push	{r4, lr}
 8004f88:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004f8a:	79c3      	ldrb	r3, [r0, #7]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d109      	bne.n	8004fa4 <HAL_PCD_ResetCallback+0x1e>
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004f90:	2101      	movs	r1, #1
 8004f92:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8004f96:	f7ff f9a2 	bl	80042de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004f9a:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8004f9e:	f7ff f96c 	bl	800427a <USBD_LL_Reset>
}
 8004fa2:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004fa4:	f7fb fbc2 	bl	800072c <Error_Handler>
 8004fa8:	e7f2      	b.n	8004f90 <HAL_PCD_ResetCallback+0xa>
	...

08004fac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004fac:	b510      	push	{r4, lr}
 8004fae:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004fb0:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004fb4:	f7ff f996 	bl	80042e4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8004fb8:	6822      	ldr	r2, [r4, #0]
 8004fba:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8004fbe:	f043 0301 	orr.w	r3, r3, #1
 8004fc2:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004fc6:	7ae3      	ldrb	r3, [r4, #11]
 8004fc8:	b123      	cbz	r3, 8004fd4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004fca:	4a03      	ldr	r2, [pc, #12]	@ (8004fd8 <HAL_PCD_SuspendCallback+0x2c>)
 8004fcc:	6913      	ldr	r3, [r2, #16]
 8004fce:	f043 0306 	orr.w	r3, r3, #6
 8004fd2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8004fd4:	bd10      	pop	{r4, pc}
 8004fd6:	bf00      	nop
 8004fd8:	e000ed00 	.word	0xe000ed00

08004fdc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004fdc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004fde:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004fe2:	f7ff f98e 	bl	8004302 <USBD_LL_Resume>
}
 8004fe6:	bd08      	pop	{r3, pc}

08004fe8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004fe8:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004fea:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004fee:	f7ff f9bd 	bl	800436c <USBD_LL_IsoOUTIncomplete>
}
 8004ff2:	bd08      	pop	{r3, pc}

08004ff4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004ff4:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004ff6:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004ffa:	f7ff f9a0 	bl	800433e <USBD_LL_IsoINIncomplete>
}
 8004ffe:	bd08      	pop	{r3, pc}

08005000 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005000:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005002:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8005006:	f7ff f9c8 	bl	800439a <USBD_LL_DevConnected>
}
 800500a:	bd08      	pop	{r3, pc}

0800500c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800500c:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800500e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8005012:	f7ff f9c4 	bl	800439e <USBD_LL_DevDisconnected>
}
 8005016:	bd08      	pop	{r3, pc}

08005018 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8005018:	7802      	ldrb	r2, [r0, #0]
 800501a:	b10a      	cbz	r2, 8005020 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 800501c:	2000      	movs	r0, #0
 800501e:	4770      	bx	lr
{
 8005020:	b510      	push	{r4, lr}
 8005022:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 8005024:	4815      	ldr	r0, [pc, #84]	@ (800507c <USBD_LL_Init+0x64>)
 8005026:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800502a:	f8c3 02c8 	str.w	r0, [r3, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800502e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005032:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8005034:	2304      	movs	r3, #4
 8005036:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005038:	2202      	movs	r2, #2
 800503a:	71c2      	strb	r2, [r0, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800503c:	2300      	movs	r3, #0
 800503e:	7183      	strb	r3, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005040:	7242      	strb	r2, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005042:	7283      	strb	r3, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005044:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005046:	7303      	strb	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8005048:	7383      	strb	r3, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800504a:	73c3      	strb	r3, [r0, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800504c:	f7fc fad9 	bl	8001602 <HAL_PCD_Init>
 8005050:	b980      	cbnz	r0, 8005074 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8005052:	4c0a      	ldr	r4, [pc, #40]	@ (800507c <USBD_LL_Init+0x64>)
 8005054:	2180      	movs	r1, #128	@ 0x80
 8005056:	4620      	mov	r0, r4
 8005058:	f7fd f898 	bl	800218c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800505c:	2240      	movs	r2, #64	@ 0x40
 800505e:	2100      	movs	r1, #0
 8005060:	4620      	mov	r0, r4
 8005062:	f7fd f86d 	bl	8002140 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005066:	2280      	movs	r2, #128	@ 0x80
 8005068:	2101      	movs	r1, #1
 800506a:	4620      	mov	r0, r4
 800506c:	f7fd f868 	bl	8002140 <HAL_PCDEx_SetTxFiFo>
}
 8005070:	2000      	movs	r0, #0
 8005072:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8005074:	f7fb fb5a 	bl	800072c <Error_Handler>
 8005078:	e7eb      	b.n	8005052 <USBD_LL_Init+0x3a>
 800507a:	bf00      	nop
 800507c:	200007e8 	.word	0x200007e8

08005080 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005080:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8

  if((ep_addr & 0x80) == 0x80)
 8005084:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005088:	d108      	bne.n	800509c <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800508a:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800508e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8005092:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005096:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
  }
}
 800509a:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800509c:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80050a0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80050a4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80050a8:	7d98      	ldrb	r0, [r3, #22]
 80050aa:	4770      	bx	lr

080050ac <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 80050ac:	4800      	ldr	r0, [pc, #0]	@ (80050b0 <USBD_static_malloc+0x4>)
 80050ae:	4770      	bx	lr
 80050b0:	200007d4 	.word	0x200007d4

080050b4 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 80050b4:	4770      	bx	lr

080050b6 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80050b6:	2803      	cmp	r0, #3
 80050b8:	d805      	bhi.n	80050c6 <USBD_Get_USB_Status+0x10>
 80050ba:	e8df f000 	tbb	[pc, r0]
 80050be:	0405      	.short	0x0405
 80050c0:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80050c2:	2001      	movs	r0, #1
    break;
 80050c4:	4770      	bx	lr
      usb_status = USBD_FAIL;
 80050c6:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80050c8:	4770      	bx	lr

080050ca <USBD_LL_Start>:
{
 80050ca:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80050cc:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80050d0:	f7fc fb18 	bl	8001704 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80050d4:	f7ff ffef 	bl	80050b6 <USBD_Get_USB_Status>
}
 80050d8:	bd08      	pop	{r3, pc}

080050da <USBD_LL_OpenEP>:
{
 80050da:	b508      	push	{r3, lr}
 80050dc:	4694      	mov	ip, r2
 80050de:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80050e0:	4663      	mov	r3, ip
 80050e2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80050e6:	f7fc fbec 	bl	80018c2 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80050ea:	f7ff ffe4 	bl	80050b6 <USBD_Get_USB_Status>
}
 80050ee:	bd08      	pop	{r3, pc}

080050f0 <USBD_LL_CloseEP>:
{
 80050f0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80050f2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80050f6:	f7fc fc2a 	bl	800194e <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80050fa:	f7ff ffdc 	bl	80050b6 <USBD_Get_USB_Status>
}
 80050fe:	bd08      	pop	{r3, pc}

08005100 <USBD_LL_StallEP>:
{
 8005100:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005102:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005106:	f7fc fca4 	bl	8001a52 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800510a:	f7ff ffd4 	bl	80050b6 <USBD_Get_USB_Status>
}
 800510e:	bd08      	pop	{r3, pc}

08005110 <USBD_LL_ClearStallEP>:
{
 8005110:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005112:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005116:	f7fc fcdf 	bl	8001ad8 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800511a:	f7ff ffcc 	bl	80050b6 <USBD_Get_USB_Status>
}
 800511e:	bd08      	pop	{r3, pc}

08005120 <USBD_LL_SetUSBAddress>:
{
 8005120:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005122:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005126:	f7fc fbb9 	bl	800189c <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800512a:	f7ff ffc4 	bl	80050b6 <USBD_Get_USB_Status>
}
 800512e:	bd08      	pop	{r3, pc}

08005130 <USBD_LL_Transmit>:
{
 8005130:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005132:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005136:	f7fc fc67 	bl	8001a08 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800513a:	f7ff ffbc 	bl	80050b6 <USBD_Get_USB_Status>
}
 800513e:	bd08      	pop	{r3, pc}

08005140 <USBD_LL_PrepareReceive>:
{
 8005140:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005142:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005146:	f7fc fc3a 	bl	80019be <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800514a:	f7ff ffb4 	bl	80050b6 <USBD_Get_USB_Status>
}
 800514e:	bd08      	pop	{r3, pc}

08005150 <wait_for_string>:

char last_str[MAX_STR];
char txbuf[MAX_STR];

// Private functions
esp01_result_t wait_for_string(char *str, uint32_t timeout) {
 8005150:	b538      	push	{r3, r4, r5, lr}
 8005152:	4605      	mov	r5, r0
    uint32_t end_time = uwTick + timeout;
 8005154:	4b08      	ldr	r3, [pc, #32]	@ (8005178 <wait_for_string+0x28>)
 8005156:	681c      	ldr	r4, [r3, #0]
 8005158:	440c      	add	r4, r1
    while (uwTick <= end_time) {
 800515a:	4b07      	ldr	r3, [pc, #28]	@ (8005178 <wait_for_string+0x28>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	42a3      	cmp	r3, r4
 8005160:	d807      	bhi.n	8005172 <wait_for_string+0x22>
        if (strcmp(str, last_str) == 0)
 8005162:	4906      	ldr	r1, [pc, #24]	@ (800517c <wait_for_string+0x2c>)
 8005164:	4628      	mov	r0, r5
 8005166:	f7fb f83b 	bl	80001e0 <strcmp>
 800516a:	2800      	cmp	r0, #0
 800516c:	d1f5      	bne.n	800515a <wait_for_string+0xa>
            return ESP01_OK;
 800516e:	2000      	movs	r0, #0
 8005170:	e000      	b.n	8005174 <wait_for_string+0x24>
    }
    return ESP01_Error;
 8005172:	2001      	movs	r0, #1
}
 8005174:	bd38      	pop	{r3, r4, r5, pc}
 8005176:	bf00      	nop
 8005178:	200002f0 	.word	0x200002f0
 800517c:	20000e4c 	.word	0x20000e4c

08005180 <esp01_process_response>:

esp01_result_t esp01_process_response(esp01_handler_t *esp01, char *str) {
 8005180:	b530      	push	{r4, r5, lr}
 8005182:	b08d      	sub	sp, #52	@ 0x34
 8005184:	460c      	mov	r4, r1
    esp01_result_t res = ESP01_OK;

    strncpy(last_str, str, MAX_STR - 1);
 8005186:	4d26      	ldr	r5, [pc, #152]	@ (8005220 <esp01_process_response+0xa0>)
 8005188:	227f      	movs	r2, #127	@ 0x7f
 800518a:	4628      	mov	r0, r5
 800518c:	f000 fbc1 	bl	8005912 <strncpy>

    if (strstr(last_str, "+CIPSNTPTIME:") != 0) {
 8005190:	4924      	ldr	r1, [pc, #144]	@ (8005224 <esp01_process_response+0xa4>)
 8005192:	4628      	mov	r0, r5
 8005194:	f000 fbd0 	bl	8005938 <strstr>
 8005198:	b310      	cbz	r0, 80051e0 <esp01_process_response+0x60>
        //printf("Got a time: %s\n", &last_str[13]);
        printf("%s\n", last_str);
 800519a:	4628      	mov	r0, r5
 800519c:	f000 fa9c 	bl	80056d8 <puts>

        int tokens;
        char command[14]; strncpy(&command, &last_str[0], 13);
 80051a0:	220d      	movs	r2, #13
 80051a2:	4629      	mov	r1, r5
 80051a4:	a808      	add	r0, sp, #32
 80051a6:	f000 fbb4 	bl	8005912 <strncpy>
        char day[4]; strncpy(&day, &last_str[13], 3);
 80051aa:	2203      	movs	r2, #3
 80051ac:	f105 010d 	add.w	r1, r5, #13
 80051b0:	a806      	add	r0, sp, #24
 80051b2:	f000 fbae 	bl	8005912 <strncpy>
        char month[4]; strncpy(&month, &last_str[17], 3);
 80051b6:	2203      	movs	r2, #3
 80051b8:	f105 0111 	add.w	r1, r5, #17
 80051bc:	a807      	add	r0, sp, #28
 80051be:	f000 fba8 	bl	8005912 <strncpy>
        int minute;
        int second;
        int year;

        //tokens = sscanf(last_str, "%s:%s %s %d %d:%d:%d %d", command, day, month, &date, &hour, &minute, &second, &year);
        printf("tok=%d, day=%s m=%s date=%d hour=%d min=%d sec=%d year=%d\n", tokens, day, month, date, hour, minute, second, year);
 80051c2:	2300      	movs	r3, #0
 80051c4:	9304      	str	r3, [sp, #16]
 80051c6:	9303      	str	r3, [sp, #12]
 80051c8:	9302      	str	r3, [sp, #8]
 80051ca:	9301      	str	r3, [sp, #4]
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	ab07      	add	r3, sp, #28
 80051d0:	aa06      	add	r2, sp, #24
 80051d2:	2100      	movs	r1, #0
 80051d4:	4814      	ldr	r0, [pc, #80]	@ (8005228 <esp01_process_response+0xa8>)
 80051d6:	f000 fa17 	bl	8005608 <iprintf>
    } else {
        printf("Got string: %s\n", str);
    }

    return res;
}
 80051da:	2000      	movs	r0, #0
 80051dc:	b00d      	add	sp, #52	@ 0x34
 80051de:	bd30      	pop	{r4, r5, pc}
    } else if (strstr(last_str, "WIFI DISCONNECT") != 0) {
 80051e0:	4912      	ldr	r1, [pc, #72]	@ (800522c <esp01_process_response+0xac>)
 80051e2:	480f      	ldr	r0, [pc, #60]	@ (8005220 <esp01_process_response+0xa0>)
 80051e4:	f000 fba8 	bl	8005938 <strstr>
 80051e8:	b118      	cbz	r0, 80051f2 <esp01_process_response+0x72>
        printf("Wifi disconnected\n");
 80051ea:	4811      	ldr	r0, [pc, #68]	@ (8005230 <esp01_process_response+0xb0>)
 80051ec:	f000 fa74 	bl	80056d8 <puts>
 80051f0:	e7f3      	b.n	80051da <esp01_process_response+0x5a>
    } else if (strstr(last_str, "WIFI CONNECTED") != 0) {
 80051f2:	4910      	ldr	r1, [pc, #64]	@ (8005234 <esp01_process_response+0xb4>)
 80051f4:	480a      	ldr	r0, [pc, #40]	@ (8005220 <esp01_process_response+0xa0>)
 80051f6:	f000 fb9f 	bl	8005938 <strstr>
 80051fa:	b118      	cbz	r0, 8005204 <esp01_process_response+0x84>
        printf("Wifi connected\n");
 80051fc:	480e      	ldr	r0, [pc, #56]	@ (8005238 <esp01_process_response+0xb8>)
 80051fe:	f000 fa6b 	bl	80056d8 <puts>
 8005202:	e7ea      	b.n	80051da <esp01_process_response+0x5a>
    } else if (strstr(last_str, "WIFI GOT IP") != 0) {
 8005204:	490d      	ldr	r1, [pc, #52]	@ (800523c <esp01_process_response+0xbc>)
 8005206:	4806      	ldr	r0, [pc, #24]	@ (8005220 <esp01_process_response+0xa0>)
 8005208:	f000 fb96 	bl	8005938 <strstr>
 800520c:	b118      	cbz	r0, 8005216 <esp01_process_response+0x96>
        printf("Got IP\n");
 800520e:	480c      	ldr	r0, [pc, #48]	@ (8005240 <esp01_process_response+0xc0>)
 8005210:	f000 fa62 	bl	80056d8 <puts>
 8005214:	e7e1      	b.n	80051da <esp01_process_response+0x5a>
        printf("Got string: %s\n", str);
 8005216:	4621      	mov	r1, r4
 8005218:	480a      	ldr	r0, [pc, #40]	@ (8005244 <esp01_process_response+0xc4>)
 800521a:	f000 f9f5 	bl	8005608 <iprintf>
 800521e:	e7dc      	b.n	80051da <esp01_process_response+0x5a>
 8005220:	20000e4c 	.word	0x20000e4c
 8005224:	080068e8 	.word	0x080068e8
 8005228:	080068f8 	.word	0x080068f8
 800522c:	08006934 	.word	0x08006934
 8005230:	08006944 	.word	0x08006944
 8005234:	08006958 	.word	0x08006958
 8005238:	08006968 	.word	0x08006968
 800523c:	08006978 	.word	0x08006978
 8005240:	08006984 	.word	0x08006984
 8005244:	0800698c 	.word	0x0800698c

08005248 <esp01_set_wifi_mode>:
        return ESP01_Error;

    return res;
}

esp01_result_t esp01_set_wifi_mode(esp01_handler_t *esp01, uint8_t mode) {
 8005248:	b538      	push	{r3, r4, r5, lr}
 800524a:	4604      	mov	r4, r0
 800524c:	460a      	mov	r2, r1
    esp01_result_t res = ESP01_OK;

    sprintf(txbuf, "AT+CWMODE_CUR=%d\r\n", mode);
 800524e:	4d10      	ldr	r5, [pc, #64]	@ (8005290 <esp01_set_wifi_mode+0x48>)
 8005250:	4910      	ldr	r1, [pc, #64]	@ (8005294 <esp01_set_wifi_mode+0x4c>)
 8005252:	4628      	mov	r0, r5
 8005254:	f000 fa48 	bl	80056e8 <siprintf>

    if (HAL_UART_Transmit(esp01->uart, (uint8_t*) &txbuf, strlen(txbuf), 100) != HAL_OK) {
 8005258:	4628      	mov	r0, r5
 800525a:	f7fa ffcb 	bl	80001f4 <strlen>
 800525e:	2364      	movs	r3, #100	@ 0x64
 8005260:	b282      	uxth	r2, r0
 8005262:	4629      	mov	r1, r5
 8005264:	6820      	ldr	r0, [r4, #0]
 8005266:	f7fd fd80 	bl	8002d6a <HAL_UART_Transmit>
 800526a:	b938      	cbnz	r0, 800527c <esp01_set_wifi_mode+0x34>
        printf("HAL Transmit Error\n");
        return ESP01_Error;
    }

    if (wait_for_string("OK", 100) != ESP01_OK)
 800526c:	2164      	movs	r1, #100	@ 0x64
 800526e:	480a      	ldr	r0, [pc, #40]	@ (8005298 <esp01_set_wifi_mode+0x50>)
 8005270:	f7ff ff6e 	bl	8005150 <wait_for_string>
 8005274:	4604      	mov	r4, r0
 8005276:	b138      	cbz	r0, 8005288 <esp01_set_wifi_mode+0x40>
        return ESP01_Error;
 8005278:	2401      	movs	r4, #1
 800527a:	e003      	b.n	8005284 <esp01_set_wifi_mode+0x3c>
        printf("HAL Transmit Error\n");
 800527c:	4807      	ldr	r0, [pc, #28]	@ (800529c <esp01_set_wifi_mode+0x54>)
 800527e:	f000 fa2b 	bl	80056d8 <puts>
        return ESP01_Error;
 8005282:	2401      	movs	r4, #1

    HAL_Delay(100);

    return res;
}
 8005284:	4620      	mov	r0, r4
 8005286:	bd38      	pop	{r3, r4, r5, pc}
    HAL_Delay(100);
 8005288:	2064      	movs	r0, #100	@ 0x64
 800528a:	f7fb fd6d 	bl	8000d68 <HAL_Delay>
    return res;
 800528e:	e7f9      	b.n	8005284 <esp01_set_wifi_mode+0x3c>
 8005290:	20000dcc 	.word	0x20000dcc
 8005294:	080069c0 	.word	0x080069c0
 8005298:	080069bc 	.word	0x080069bc
 800529c:	080069a8 	.word	0x080069a8

080052a0 <esp01_wifi_connect>:

esp01_result_t esp01_wifi_connect(esp01_handler_t *esp01, char *ssid, char *pwd) {
 80052a0:	b538      	push	{r3, r4, r5, lr}
 80052a2:	4604      	mov	r4, r0
 80052a4:	4613      	mov	r3, r2
    esp01_result_t res = ESP01_OK;

    sprintf(txbuf, "AT+CWJAP_CUR=\"%s\",\"%s\"\r\n", ssid, pwd);
 80052a6:	4d11      	ldr	r5, [pc, #68]	@ (80052ec <esp01_wifi_connect+0x4c>)
 80052a8:	460a      	mov	r2, r1
 80052aa:	4911      	ldr	r1, [pc, #68]	@ (80052f0 <esp01_wifi_connect+0x50>)
 80052ac:	4628      	mov	r0, r5
 80052ae:	f000 fa1b 	bl	80056e8 <siprintf>

    if (HAL_UART_Transmit(esp01->uart, (uint8_t*) &txbuf, strlen(txbuf), 100) != HAL_OK) {
 80052b2:	4628      	mov	r0, r5
 80052b4:	f7fa ff9e 	bl	80001f4 <strlen>
 80052b8:	2364      	movs	r3, #100	@ 0x64
 80052ba:	b282      	uxth	r2, r0
 80052bc:	4629      	mov	r1, r5
 80052be:	6820      	ldr	r0, [r4, #0]
 80052c0:	f7fd fd53 	bl	8002d6a <HAL_UART_Transmit>
 80052c4:	b940      	cbnz	r0, 80052d8 <esp01_wifi_connect+0x38>
        printf("HAL Transmit Error\n");
        return ESP01_Error;
    }

    if (wait_for_string("OK", 1000) != ESP01_OK)
 80052c6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80052ca:	480a      	ldr	r0, [pc, #40]	@ (80052f4 <esp01_wifi_connect+0x54>)
 80052cc:	f7ff ff40 	bl	8005150 <wait_for_string>
 80052d0:	4604      	mov	r4, r0
 80052d2:	b138      	cbz	r0, 80052e4 <esp01_wifi_connect+0x44>
        return ESP01_Error;
 80052d4:	2401      	movs	r4, #1
 80052d6:	e003      	b.n	80052e0 <esp01_wifi_connect+0x40>
        printf("HAL Transmit Error\n");
 80052d8:	4807      	ldr	r0, [pc, #28]	@ (80052f8 <esp01_wifi_connect+0x58>)
 80052da:	f000 f9fd 	bl	80056d8 <puts>
        return ESP01_Error;
 80052de:	2401      	movs	r4, #1

    HAL_Delay(100);

    return res;
}
 80052e0:	4620      	mov	r0, r4
 80052e2:	bd38      	pop	{r3, r4, r5, pc}
    HAL_Delay(100);
 80052e4:	2064      	movs	r0, #100	@ 0x64
 80052e6:	f7fb fd3f 	bl	8000d68 <HAL_Delay>
    return res;
 80052ea:	e7f9      	b.n	80052e0 <esp01_wifi_connect+0x40>
 80052ec:	20000dcc 	.word	0x20000dcc
 80052f0:	080069d4 	.word	0x080069d4
 80052f4:	080069bc 	.word	0x080069bc
 80052f8:	080069a8 	.word	0x080069a8

080052fc <esp01_set_ntp>:

esp01_result_t esp01_set_ntp(esp01_handler_t *esp01, uint8_t config, uint8_t timezone, char *ntp) {
 80052fc:	b530      	push	{r4, r5, lr}
 80052fe:	b083      	sub	sp, #12
 8005300:	4604      	mov	r4, r0
    esp01_result_t res = ESP01_OK;

    sprintf(txbuf, "AT+CIPSNTPCFG=%d,%d,\"%s\"\r\n", config, timezone, ntp);
 8005302:	4d13      	ldr	r5, [pc, #76]	@ (8005350 <esp01_set_ntp+0x54>)
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	4613      	mov	r3, r2
 8005308:	460a      	mov	r2, r1
 800530a:	4912      	ldr	r1, [pc, #72]	@ (8005354 <esp01_set_ntp+0x58>)
 800530c:	4628      	mov	r0, r5
 800530e:	f000 f9eb 	bl	80056e8 <siprintf>

    if (HAL_UART_Transmit(esp01->uart, (uint8_t*) &txbuf, strlen(txbuf), 100) != HAL_OK) {
 8005312:	4628      	mov	r0, r5
 8005314:	f7fa ff6e 	bl	80001f4 <strlen>
 8005318:	2364      	movs	r3, #100	@ 0x64
 800531a:	b282      	uxth	r2, r0
 800531c:	4629      	mov	r1, r5
 800531e:	6820      	ldr	r0, [r4, #0]
 8005320:	f7fd fd23 	bl	8002d6a <HAL_UART_Transmit>
 8005324:	b940      	cbnz	r0, 8005338 <esp01_set_ntp+0x3c>
        printf("HAL Transmit Error\n");
        return ESP01_Error;
    }

    if (wait_for_string("OK", 1000) != ESP01_OK)
 8005326:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800532a:	480b      	ldr	r0, [pc, #44]	@ (8005358 <esp01_set_ntp+0x5c>)
 800532c:	f7ff ff10 	bl	8005150 <wait_for_string>
 8005330:	4604      	mov	r4, r0
 8005332:	b140      	cbz	r0, 8005346 <esp01_set_ntp+0x4a>
        return ESP01_Error;
 8005334:	2401      	movs	r4, #1
 8005336:	e003      	b.n	8005340 <esp01_set_ntp+0x44>
        printf("HAL Transmit Error\n");
 8005338:	4808      	ldr	r0, [pc, #32]	@ (800535c <esp01_set_ntp+0x60>)
 800533a:	f000 f9cd 	bl	80056d8 <puts>
        return ESP01_Error;
 800533e:	2401      	movs	r4, #1

    HAL_Delay(100);

    return res;
}
 8005340:	4620      	mov	r0, r4
 8005342:	b003      	add	sp, #12
 8005344:	bd30      	pop	{r4, r5, pc}
    HAL_Delay(100);
 8005346:	2064      	movs	r0, #100	@ 0x64
 8005348:	f7fb fd0e 	bl	8000d68 <HAL_Delay>
    return res;
 800534c:	e7f8      	b.n	8005340 <esp01_set_ntp+0x44>
 800534e:	bf00      	nop
 8005350:	20000dcc 	.word	0x20000dcc
 8005354:	080069f0 	.word	0x080069f0
 8005358:	080069bc 	.word	0x080069bc
 800535c:	080069a8 	.word	0x080069a8

08005360 <esp01_get_ntp_time>:

esp01_result_t esp01_get_ntp_time(esp01_handler_t *esp01) {
 8005360:	b570      	push	{r4, r5, r6, lr}
 8005362:	4605      	mov	r5, r0
    esp01_result_t res = ESP01_OK;

    sprintf(txbuf, "AT+CIPSNTPTIME?\r\n");
 8005364:	4e12      	ldr	r6, [pc, #72]	@ (80053b0 <esp01_get_ntp_time+0x50>)
 8005366:	46b4      	mov	ip, r6
 8005368:	4c12      	ldr	r4, [pc, #72]	@ (80053b4 <esp01_get_ntp_time+0x54>)
 800536a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800536c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005370:	6823      	ldr	r3, [r4, #0]
 8005372:	f8ac 3000 	strh.w	r3, [ip]

    if (HAL_UART_Transmit(esp01->uart, (uint8_t*) &txbuf, strlen(txbuf), 100) != HAL_OK) {
 8005376:	4630      	mov	r0, r6
 8005378:	f7fa ff3c 	bl	80001f4 <strlen>
 800537c:	2364      	movs	r3, #100	@ 0x64
 800537e:	b282      	uxth	r2, r0
 8005380:	4631      	mov	r1, r6
 8005382:	6828      	ldr	r0, [r5, #0]
 8005384:	f7fd fcf1 	bl	8002d6a <HAL_UART_Transmit>
 8005388:	b940      	cbnz	r0, 800539c <esp01_get_ntp_time+0x3c>
        printf("HAL Transmit Error\n");
        return ESP01_Error;
    }

    if (wait_for_string("OK", 1000) != ESP01_OK)
 800538a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800538e:	480a      	ldr	r0, [pc, #40]	@ (80053b8 <esp01_get_ntp_time+0x58>)
 8005390:	f7ff fede 	bl	8005150 <wait_for_string>
 8005394:	4604      	mov	r4, r0
 8005396:	b138      	cbz	r0, 80053a8 <esp01_get_ntp_time+0x48>
        return ESP01_Error;
 8005398:	2401      	movs	r4, #1
 800539a:	e003      	b.n	80053a4 <esp01_get_ntp_time+0x44>
        printf("HAL Transmit Error\n");
 800539c:	4807      	ldr	r0, [pc, #28]	@ (80053bc <esp01_get_ntp_time+0x5c>)
 800539e:	f000 f99b 	bl	80056d8 <puts>
        return ESP01_Error;
 80053a2:	2401      	movs	r4, #1

    HAL_Delay(100);

    return res;
}
 80053a4:	4620      	mov	r0, r4
 80053a6:	bd70      	pop	{r4, r5, r6, pc}
    HAL_Delay(100);
 80053a8:	2064      	movs	r0, #100	@ 0x64
 80053aa:	f7fb fcdd 	bl	8000d68 <HAL_Delay>
    return res;
 80053ae:	e7f9      	b.n	80053a4 <esp01_get_ntp_time+0x44>
 80053b0:	20000dcc 	.word	0x20000dcc
 80053b4:	08006a0c 	.word	0x08006a0c
 80053b8:	080069bc 	.word	0x080069bc
 80053bc:	080069a8 	.word	0x080069a8

080053c0 <esp01_init>:

esp01_result_t esp01_init(esp01_handler_t *esp01, UART_HandleTypeDef *uart) {
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	4604      	mov	r4, r0
    esp01_result_t res = ESP01_OK;

    esp01->uart = uart;
 80053c4:	6001      	str	r1, [r0, #0]

    sprintf(txbuf, "AT\r\n");
 80053c6:	4d1d      	ldr	r5, [pc, #116]	@ (800543c <esp01_init+0x7c>)
 80053c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005440 <esp01_init+0x80>)
 80053ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80053ce:	6028      	str	r0, [r5, #0]
 80053d0:	7129      	strb	r1, [r5, #4]

    if (HAL_UART_Transmit(esp01->uart, (uint8_t*) &txbuf, strlen(txbuf), 100) != HAL_OK) {
 80053d2:	4628      	mov	r0, r5
 80053d4:	f7fa ff0e 	bl	80001f4 <strlen>
 80053d8:	2364      	movs	r3, #100	@ 0x64
 80053da:	b282      	uxth	r2, r0
 80053dc:	4629      	mov	r1, r5
 80053de:	6820      	ldr	r0, [r4, #0]
 80053e0:	f7fd fcc3 	bl	8002d6a <HAL_UART_Transmit>
 80053e4:	b938      	cbnz	r0, 80053f6 <esp01_init+0x36>
        printf("HAL Transmit Error\n");
        return ESP01_Error;
    }

    if (wait_for_string("OK", 1000) != ESP01_OK)
 80053e6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80053ea:	4816      	ldr	r0, [pc, #88]	@ (8005444 <esp01_init+0x84>)
 80053ec:	f7ff feb0 	bl	8005150 <wait_for_string>
 80053f0:	b138      	cbz	r0, 8005402 <esp01_init+0x42>
        return ESP01_Error;
 80053f2:	2401      	movs	r4, #1
 80053f4:	e003      	b.n	80053fe <esp01_init+0x3e>
        printf("HAL Transmit Error\n");
 80053f6:	4814      	ldr	r0, [pc, #80]	@ (8005448 <esp01_init+0x88>)
 80053f8:	f000 f96e 	bl	80056d8 <puts>
        return ESP01_Error;
 80053fc:	2401      	movs	r4, #1
        return ESP01_Error;

    HAL_Delay(100);

    return res;
}
 80053fe:	4620      	mov	r0, r4
 8005400:	bd38      	pop	{r3, r4, r5, pc}
    sprintf(txbuf, "AT+GMR\r\n");
 8005402:	4d0e      	ldr	r5, [pc, #56]	@ (800543c <esp01_init+0x7c>)
 8005404:	4a11      	ldr	r2, [pc, #68]	@ (800544c <esp01_init+0x8c>)
 8005406:	462b      	mov	r3, r5
 8005408:	ca07      	ldmia	r2, {r0, r1, r2}
 800540a:	c303      	stmia	r3!, {r0, r1}
 800540c:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(esp01->uart, (uint8_t*) &txbuf, strlen(txbuf), 100);
 800540e:	4628      	mov	r0, r5
 8005410:	f7fa fef0 	bl	80001f4 <strlen>
 8005414:	2364      	movs	r3, #100	@ 0x64
 8005416:	b282      	uxth	r2, r0
 8005418:	4629      	mov	r1, r5
 800541a:	6820      	ldr	r0, [r4, #0]
 800541c:	f7fd fca5 	bl	8002d6a <HAL_UART_Transmit>
    if (wait_for_string("OK", 1000) != ESP01_OK)
 8005420:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005424:	4807      	ldr	r0, [pc, #28]	@ (8005444 <esp01_init+0x84>)
 8005426:	f7ff fe93 	bl	8005150 <wait_for_string>
 800542a:	4604      	mov	r4, r0
 800542c:	b108      	cbz	r0, 8005432 <esp01_init+0x72>
        return ESP01_Error;
 800542e:	2401      	movs	r4, #1
 8005430:	e7e5      	b.n	80053fe <esp01_init+0x3e>
    HAL_Delay(100);
 8005432:	2064      	movs	r0, #100	@ 0x64
 8005434:	f7fb fc98 	bl	8000d68 <HAL_Delay>
    return res;
 8005438:	e7e1      	b.n	80053fe <esp01_init+0x3e>
 800543a:	bf00      	nop
 800543c:	20000dcc 	.word	0x20000dcc
 8005440:	08006a20 	.word	0x08006a20
 8005444:	080069bc 	.word	0x080069bc
 8005448:	080069a8 	.word	0x080069a8
 800544c:	08006a28 	.word	0x08006a28

08005450 <esp01_receive>:

void esp01_receive(esp01_handler_t *esp01, char ch) {
 8005450:	b510      	push	{r4, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	f88d 1007 	strb.w	r1, [sp, #7]

    static char str[256] = "";

    switch (ch) {
 8005458:	b2cb      	uxtb	r3, r1
 800545a:	2b0a      	cmp	r3, #10
 800545c:	d007      	beq.n	800546e <esp01_receive+0x1e>
 800545e:	2b0d      	cmp	r3, #13
 8005460:	d107      	bne.n	8005472 <esp01_receive+0x22>
    case '\r':
        esp01_process_response(esp01, str);
 8005462:	4c07      	ldr	r4, [pc, #28]	@ (8005480 <esp01_receive+0x30>)
 8005464:	4621      	mov	r1, r4
 8005466:	f7ff fe8b 	bl	8005180 <esp01_process_response>
        str[0] = 0;
 800546a:	2300      	movs	r3, #0
 800546c:	7023      	strb	r3, [r4, #0]
        break;
    default:
        strncat(str, &ch, 1);
    }

}
 800546e:	b002      	add	sp, #8
 8005470:	bd10      	pop	{r4, pc}
        strncat(str, &ch, 1);
 8005472:	2201      	movs	r2, #1
 8005474:	f10d 0107 	add.w	r1, sp, #7
 8005478:	4801      	ldr	r0, [pc, #4]	@ (8005480 <esp01_receive+0x30>)
 800547a:	f000 fa37 	bl	80058ec <strncat>
}
 800547e:	e7f6      	b.n	800546e <esp01_receive+0x1e>
 8005480:	20000ccc 	.word	0x20000ccc

08005484 <std>:
 8005484:	2300      	movs	r3, #0
 8005486:	b510      	push	{r4, lr}
 8005488:	4604      	mov	r4, r0
 800548a:	e9c0 3300 	strd	r3, r3, [r0]
 800548e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005492:	6083      	str	r3, [r0, #8]
 8005494:	8181      	strh	r1, [r0, #12]
 8005496:	6643      	str	r3, [r0, #100]	@ 0x64
 8005498:	81c2      	strh	r2, [r0, #14]
 800549a:	6183      	str	r3, [r0, #24]
 800549c:	4619      	mov	r1, r3
 800549e:	2208      	movs	r2, #8
 80054a0:	305c      	adds	r0, #92	@ 0x5c
 80054a2:	f000 fa1b 	bl	80058dc <memset>
 80054a6:	4b0d      	ldr	r3, [pc, #52]	@ (80054dc <std+0x58>)
 80054a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80054aa:	4b0d      	ldr	r3, [pc, #52]	@ (80054e0 <std+0x5c>)
 80054ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80054ae:	4b0d      	ldr	r3, [pc, #52]	@ (80054e4 <std+0x60>)
 80054b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80054b2:	4b0d      	ldr	r3, [pc, #52]	@ (80054e8 <std+0x64>)
 80054b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80054b6:	4b0d      	ldr	r3, [pc, #52]	@ (80054ec <std+0x68>)
 80054b8:	6224      	str	r4, [r4, #32]
 80054ba:	429c      	cmp	r4, r3
 80054bc:	d006      	beq.n	80054cc <std+0x48>
 80054be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80054c2:	4294      	cmp	r4, r2
 80054c4:	d002      	beq.n	80054cc <std+0x48>
 80054c6:	33d0      	adds	r3, #208	@ 0xd0
 80054c8:	429c      	cmp	r4, r3
 80054ca:	d105      	bne.n	80054d8 <std+0x54>
 80054cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80054d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054d4:	f000 bab6 	b.w	8005a44 <__retarget_lock_init_recursive>
 80054d8:	bd10      	pop	{r4, pc}
 80054da:	bf00      	nop
 80054dc:	0800572d 	.word	0x0800572d
 80054e0:	0800574f 	.word	0x0800574f
 80054e4:	08005787 	.word	0x08005787
 80054e8:	080057ab 	.word	0x080057ab
 80054ec:	20000ecc 	.word	0x20000ecc

080054f0 <stdio_exit_handler>:
 80054f0:	4a02      	ldr	r2, [pc, #8]	@ (80054fc <stdio_exit_handler+0xc>)
 80054f2:	4903      	ldr	r1, [pc, #12]	@ (8005500 <stdio_exit_handler+0x10>)
 80054f4:	4803      	ldr	r0, [pc, #12]	@ (8005504 <stdio_exit_handler+0x14>)
 80054f6:	f000 b869 	b.w	80055cc <_fwalk_sglue>
 80054fa:	bf00      	nop
 80054fc:	2000011c 	.word	0x2000011c
 8005500:	08006591 	.word	0x08006591
 8005504:	2000012c 	.word	0x2000012c

08005508 <cleanup_stdio>:
 8005508:	6841      	ldr	r1, [r0, #4]
 800550a:	4b0c      	ldr	r3, [pc, #48]	@ (800553c <cleanup_stdio+0x34>)
 800550c:	4299      	cmp	r1, r3
 800550e:	b510      	push	{r4, lr}
 8005510:	4604      	mov	r4, r0
 8005512:	d001      	beq.n	8005518 <cleanup_stdio+0x10>
 8005514:	f001 f83c 	bl	8006590 <_fflush_r>
 8005518:	68a1      	ldr	r1, [r4, #8]
 800551a:	4b09      	ldr	r3, [pc, #36]	@ (8005540 <cleanup_stdio+0x38>)
 800551c:	4299      	cmp	r1, r3
 800551e:	d002      	beq.n	8005526 <cleanup_stdio+0x1e>
 8005520:	4620      	mov	r0, r4
 8005522:	f001 f835 	bl	8006590 <_fflush_r>
 8005526:	68e1      	ldr	r1, [r4, #12]
 8005528:	4b06      	ldr	r3, [pc, #24]	@ (8005544 <cleanup_stdio+0x3c>)
 800552a:	4299      	cmp	r1, r3
 800552c:	d004      	beq.n	8005538 <cleanup_stdio+0x30>
 800552e:	4620      	mov	r0, r4
 8005530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005534:	f001 b82c 	b.w	8006590 <_fflush_r>
 8005538:	bd10      	pop	{r4, pc}
 800553a:	bf00      	nop
 800553c:	20000ecc 	.word	0x20000ecc
 8005540:	20000f34 	.word	0x20000f34
 8005544:	20000f9c 	.word	0x20000f9c

08005548 <global_stdio_init.part.0>:
 8005548:	b510      	push	{r4, lr}
 800554a:	4b0b      	ldr	r3, [pc, #44]	@ (8005578 <global_stdio_init.part.0+0x30>)
 800554c:	4c0b      	ldr	r4, [pc, #44]	@ (800557c <global_stdio_init.part.0+0x34>)
 800554e:	4a0c      	ldr	r2, [pc, #48]	@ (8005580 <global_stdio_init.part.0+0x38>)
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	4620      	mov	r0, r4
 8005554:	2200      	movs	r2, #0
 8005556:	2104      	movs	r1, #4
 8005558:	f7ff ff94 	bl	8005484 <std>
 800555c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005560:	2201      	movs	r2, #1
 8005562:	2109      	movs	r1, #9
 8005564:	f7ff ff8e 	bl	8005484 <std>
 8005568:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800556c:	2202      	movs	r2, #2
 800556e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005572:	2112      	movs	r1, #18
 8005574:	f7ff bf86 	b.w	8005484 <std>
 8005578:	20001004 	.word	0x20001004
 800557c:	20000ecc 	.word	0x20000ecc
 8005580:	080054f1 	.word	0x080054f1

08005584 <__sfp_lock_acquire>:
 8005584:	4801      	ldr	r0, [pc, #4]	@ (800558c <__sfp_lock_acquire+0x8>)
 8005586:	f000 ba5e 	b.w	8005a46 <__retarget_lock_acquire_recursive>
 800558a:	bf00      	nop
 800558c:	2000100d 	.word	0x2000100d

08005590 <__sfp_lock_release>:
 8005590:	4801      	ldr	r0, [pc, #4]	@ (8005598 <__sfp_lock_release+0x8>)
 8005592:	f000 ba59 	b.w	8005a48 <__retarget_lock_release_recursive>
 8005596:	bf00      	nop
 8005598:	2000100d 	.word	0x2000100d

0800559c <__sinit>:
 800559c:	b510      	push	{r4, lr}
 800559e:	4604      	mov	r4, r0
 80055a0:	f7ff fff0 	bl	8005584 <__sfp_lock_acquire>
 80055a4:	6a23      	ldr	r3, [r4, #32]
 80055a6:	b11b      	cbz	r3, 80055b0 <__sinit+0x14>
 80055a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055ac:	f7ff bff0 	b.w	8005590 <__sfp_lock_release>
 80055b0:	4b04      	ldr	r3, [pc, #16]	@ (80055c4 <__sinit+0x28>)
 80055b2:	6223      	str	r3, [r4, #32]
 80055b4:	4b04      	ldr	r3, [pc, #16]	@ (80055c8 <__sinit+0x2c>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1f5      	bne.n	80055a8 <__sinit+0xc>
 80055bc:	f7ff ffc4 	bl	8005548 <global_stdio_init.part.0>
 80055c0:	e7f2      	b.n	80055a8 <__sinit+0xc>
 80055c2:	bf00      	nop
 80055c4:	08005509 	.word	0x08005509
 80055c8:	20001004 	.word	0x20001004

080055cc <_fwalk_sglue>:
 80055cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055d0:	4607      	mov	r7, r0
 80055d2:	4688      	mov	r8, r1
 80055d4:	4614      	mov	r4, r2
 80055d6:	2600      	movs	r6, #0
 80055d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055dc:	f1b9 0901 	subs.w	r9, r9, #1
 80055e0:	d505      	bpl.n	80055ee <_fwalk_sglue+0x22>
 80055e2:	6824      	ldr	r4, [r4, #0]
 80055e4:	2c00      	cmp	r4, #0
 80055e6:	d1f7      	bne.n	80055d8 <_fwalk_sglue+0xc>
 80055e8:	4630      	mov	r0, r6
 80055ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055ee:	89ab      	ldrh	r3, [r5, #12]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d907      	bls.n	8005604 <_fwalk_sglue+0x38>
 80055f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055f8:	3301      	adds	r3, #1
 80055fa:	d003      	beq.n	8005604 <_fwalk_sglue+0x38>
 80055fc:	4629      	mov	r1, r5
 80055fe:	4638      	mov	r0, r7
 8005600:	47c0      	blx	r8
 8005602:	4306      	orrs	r6, r0
 8005604:	3568      	adds	r5, #104	@ 0x68
 8005606:	e7e9      	b.n	80055dc <_fwalk_sglue+0x10>

08005608 <iprintf>:
 8005608:	b40f      	push	{r0, r1, r2, r3}
 800560a:	b507      	push	{r0, r1, r2, lr}
 800560c:	4906      	ldr	r1, [pc, #24]	@ (8005628 <iprintf+0x20>)
 800560e:	ab04      	add	r3, sp, #16
 8005610:	6808      	ldr	r0, [r1, #0]
 8005612:	f853 2b04 	ldr.w	r2, [r3], #4
 8005616:	6881      	ldr	r1, [r0, #8]
 8005618:	9301      	str	r3, [sp, #4]
 800561a:	f000 fc91 	bl	8005f40 <_vfiprintf_r>
 800561e:	b003      	add	sp, #12
 8005620:	f85d eb04 	ldr.w	lr, [sp], #4
 8005624:	b004      	add	sp, #16
 8005626:	4770      	bx	lr
 8005628:	20000128 	.word	0x20000128

0800562c <_puts_r>:
 800562c:	6a03      	ldr	r3, [r0, #32]
 800562e:	b570      	push	{r4, r5, r6, lr}
 8005630:	6884      	ldr	r4, [r0, #8]
 8005632:	4605      	mov	r5, r0
 8005634:	460e      	mov	r6, r1
 8005636:	b90b      	cbnz	r3, 800563c <_puts_r+0x10>
 8005638:	f7ff ffb0 	bl	800559c <__sinit>
 800563c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800563e:	07db      	lsls	r3, r3, #31
 8005640:	d405      	bmi.n	800564e <_puts_r+0x22>
 8005642:	89a3      	ldrh	r3, [r4, #12]
 8005644:	0598      	lsls	r0, r3, #22
 8005646:	d402      	bmi.n	800564e <_puts_r+0x22>
 8005648:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800564a:	f000 f9fc 	bl	8005a46 <__retarget_lock_acquire_recursive>
 800564e:	89a3      	ldrh	r3, [r4, #12]
 8005650:	0719      	lsls	r1, r3, #28
 8005652:	d502      	bpl.n	800565a <_puts_r+0x2e>
 8005654:	6923      	ldr	r3, [r4, #16]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d135      	bne.n	80056c6 <_puts_r+0x9a>
 800565a:	4621      	mov	r1, r4
 800565c:	4628      	mov	r0, r5
 800565e:	f000 f8e7 	bl	8005830 <__swsetup_r>
 8005662:	b380      	cbz	r0, 80056c6 <_puts_r+0x9a>
 8005664:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005668:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800566a:	07da      	lsls	r2, r3, #31
 800566c:	d405      	bmi.n	800567a <_puts_r+0x4e>
 800566e:	89a3      	ldrh	r3, [r4, #12]
 8005670:	059b      	lsls	r3, r3, #22
 8005672:	d402      	bmi.n	800567a <_puts_r+0x4e>
 8005674:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005676:	f000 f9e7 	bl	8005a48 <__retarget_lock_release_recursive>
 800567a:	4628      	mov	r0, r5
 800567c:	bd70      	pop	{r4, r5, r6, pc}
 800567e:	2b00      	cmp	r3, #0
 8005680:	da04      	bge.n	800568c <_puts_r+0x60>
 8005682:	69a2      	ldr	r2, [r4, #24]
 8005684:	429a      	cmp	r2, r3
 8005686:	dc17      	bgt.n	80056b8 <_puts_r+0x8c>
 8005688:	290a      	cmp	r1, #10
 800568a:	d015      	beq.n	80056b8 <_puts_r+0x8c>
 800568c:	6823      	ldr	r3, [r4, #0]
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	6022      	str	r2, [r4, #0]
 8005692:	7019      	strb	r1, [r3, #0]
 8005694:	68a3      	ldr	r3, [r4, #8]
 8005696:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800569a:	3b01      	subs	r3, #1
 800569c:	60a3      	str	r3, [r4, #8]
 800569e:	2900      	cmp	r1, #0
 80056a0:	d1ed      	bne.n	800567e <_puts_r+0x52>
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	da11      	bge.n	80056ca <_puts_r+0x9e>
 80056a6:	4622      	mov	r2, r4
 80056a8:	210a      	movs	r1, #10
 80056aa:	4628      	mov	r0, r5
 80056ac:	f000 f881 	bl	80057b2 <__swbuf_r>
 80056b0:	3001      	adds	r0, #1
 80056b2:	d0d7      	beq.n	8005664 <_puts_r+0x38>
 80056b4:	250a      	movs	r5, #10
 80056b6:	e7d7      	b.n	8005668 <_puts_r+0x3c>
 80056b8:	4622      	mov	r2, r4
 80056ba:	4628      	mov	r0, r5
 80056bc:	f000 f879 	bl	80057b2 <__swbuf_r>
 80056c0:	3001      	adds	r0, #1
 80056c2:	d1e7      	bne.n	8005694 <_puts_r+0x68>
 80056c4:	e7ce      	b.n	8005664 <_puts_r+0x38>
 80056c6:	3e01      	subs	r6, #1
 80056c8:	e7e4      	b.n	8005694 <_puts_r+0x68>
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	6022      	str	r2, [r4, #0]
 80056d0:	220a      	movs	r2, #10
 80056d2:	701a      	strb	r2, [r3, #0]
 80056d4:	e7ee      	b.n	80056b4 <_puts_r+0x88>
	...

080056d8 <puts>:
 80056d8:	4b02      	ldr	r3, [pc, #8]	@ (80056e4 <puts+0xc>)
 80056da:	4601      	mov	r1, r0
 80056dc:	6818      	ldr	r0, [r3, #0]
 80056de:	f7ff bfa5 	b.w	800562c <_puts_r>
 80056e2:	bf00      	nop
 80056e4:	20000128 	.word	0x20000128

080056e8 <siprintf>:
 80056e8:	b40e      	push	{r1, r2, r3}
 80056ea:	b510      	push	{r4, lr}
 80056ec:	b09d      	sub	sp, #116	@ 0x74
 80056ee:	ab1f      	add	r3, sp, #124	@ 0x7c
 80056f0:	9002      	str	r0, [sp, #8]
 80056f2:	9006      	str	r0, [sp, #24]
 80056f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80056f8:	480a      	ldr	r0, [pc, #40]	@ (8005724 <siprintf+0x3c>)
 80056fa:	9107      	str	r1, [sp, #28]
 80056fc:	9104      	str	r1, [sp, #16]
 80056fe:	490a      	ldr	r1, [pc, #40]	@ (8005728 <siprintf+0x40>)
 8005700:	f853 2b04 	ldr.w	r2, [r3], #4
 8005704:	9105      	str	r1, [sp, #20]
 8005706:	2400      	movs	r4, #0
 8005708:	a902      	add	r1, sp, #8
 800570a:	6800      	ldr	r0, [r0, #0]
 800570c:	9301      	str	r3, [sp, #4]
 800570e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005710:	f000 faf0 	bl	8005cf4 <_svfiprintf_r>
 8005714:	9b02      	ldr	r3, [sp, #8]
 8005716:	701c      	strb	r4, [r3, #0]
 8005718:	b01d      	add	sp, #116	@ 0x74
 800571a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800571e:	b003      	add	sp, #12
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	20000128 	.word	0x20000128
 8005728:	ffff0208 	.word	0xffff0208

0800572c <__sread>:
 800572c:	b510      	push	{r4, lr}
 800572e:	460c      	mov	r4, r1
 8005730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005734:	f000 f938 	bl	80059a8 <_read_r>
 8005738:	2800      	cmp	r0, #0
 800573a:	bfab      	itete	ge
 800573c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800573e:	89a3      	ldrhlt	r3, [r4, #12]
 8005740:	181b      	addge	r3, r3, r0
 8005742:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005746:	bfac      	ite	ge
 8005748:	6563      	strge	r3, [r4, #84]	@ 0x54
 800574a:	81a3      	strhlt	r3, [r4, #12]
 800574c:	bd10      	pop	{r4, pc}

0800574e <__swrite>:
 800574e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005752:	461f      	mov	r7, r3
 8005754:	898b      	ldrh	r3, [r1, #12]
 8005756:	05db      	lsls	r3, r3, #23
 8005758:	4605      	mov	r5, r0
 800575a:	460c      	mov	r4, r1
 800575c:	4616      	mov	r6, r2
 800575e:	d505      	bpl.n	800576c <__swrite+0x1e>
 8005760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005764:	2302      	movs	r3, #2
 8005766:	2200      	movs	r2, #0
 8005768:	f000 f90c 	bl	8005984 <_lseek_r>
 800576c:	89a3      	ldrh	r3, [r4, #12]
 800576e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005772:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005776:	81a3      	strh	r3, [r4, #12]
 8005778:	4632      	mov	r2, r6
 800577a:	463b      	mov	r3, r7
 800577c:	4628      	mov	r0, r5
 800577e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005782:	f000 b923 	b.w	80059cc <_write_r>

08005786 <__sseek>:
 8005786:	b510      	push	{r4, lr}
 8005788:	460c      	mov	r4, r1
 800578a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800578e:	f000 f8f9 	bl	8005984 <_lseek_r>
 8005792:	1c43      	adds	r3, r0, #1
 8005794:	89a3      	ldrh	r3, [r4, #12]
 8005796:	bf15      	itete	ne
 8005798:	6560      	strne	r0, [r4, #84]	@ 0x54
 800579a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800579e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80057a2:	81a3      	strheq	r3, [r4, #12]
 80057a4:	bf18      	it	ne
 80057a6:	81a3      	strhne	r3, [r4, #12]
 80057a8:	bd10      	pop	{r4, pc}

080057aa <__sclose>:
 80057aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ae:	f000 b8d9 	b.w	8005964 <_close_r>

080057b2 <__swbuf_r>:
 80057b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b4:	460e      	mov	r6, r1
 80057b6:	4614      	mov	r4, r2
 80057b8:	4605      	mov	r5, r0
 80057ba:	b118      	cbz	r0, 80057c4 <__swbuf_r+0x12>
 80057bc:	6a03      	ldr	r3, [r0, #32]
 80057be:	b90b      	cbnz	r3, 80057c4 <__swbuf_r+0x12>
 80057c0:	f7ff feec 	bl	800559c <__sinit>
 80057c4:	69a3      	ldr	r3, [r4, #24]
 80057c6:	60a3      	str	r3, [r4, #8]
 80057c8:	89a3      	ldrh	r3, [r4, #12]
 80057ca:	071a      	lsls	r2, r3, #28
 80057cc:	d501      	bpl.n	80057d2 <__swbuf_r+0x20>
 80057ce:	6923      	ldr	r3, [r4, #16]
 80057d0:	b943      	cbnz	r3, 80057e4 <__swbuf_r+0x32>
 80057d2:	4621      	mov	r1, r4
 80057d4:	4628      	mov	r0, r5
 80057d6:	f000 f82b 	bl	8005830 <__swsetup_r>
 80057da:	b118      	cbz	r0, 80057e4 <__swbuf_r+0x32>
 80057dc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80057e0:	4638      	mov	r0, r7
 80057e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	6922      	ldr	r2, [r4, #16]
 80057e8:	1a98      	subs	r0, r3, r2
 80057ea:	6963      	ldr	r3, [r4, #20]
 80057ec:	b2f6      	uxtb	r6, r6
 80057ee:	4283      	cmp	r3, r0
 80057f0:	4637      	mov	r7, r6
 80057f2:	dc05      	bgt.n	8005800 <__swbuf_r+0x4e>
 80057f4:	4621      	mov	r1, r4
 80057f6:	4628      	mov	r0, r5
 80057f8:	f000 feca 	bl	8006590 <_fflush_r>
 80057fc:	2800      	cmp	r0, #0
 80057fe:	d1ed      	bne.n	80057dc <__swbuf_r+0x2a>
 8005800:	68a3      	ldr	r3, [r4, #8]
 8005802:	3b01      	subs	r3, #1
 8005804:	60a3      	str	r3, [r4, #8]
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	1c5a      	adds	r2, r3, #1
 800580a:	6022      	str	r2, [r4, #0]
 800580c:	701e      	strb	r6, [r3, #0]
 800580e:	6962      	ldr	r2, [r4, #20]
 8005810:	1c43      	adds	r3, r0, #1
 8005812:	429a      	cmp	r2, r3
 8005814:	d004      	beq.n	8005820 <__swbuf_r+0x6e>
 8005816:	89a3      	ldrh	r3, [r4, #12]
 8005818:	07db      	lsls	r3, r3, #31
 800581a:	d5e1      	bpl.n	80057e0 <__swbuf_r+0x2e>
 800581c:	2e0a      	cmp	r6, #10
 800581e:	d1df      	bne.n	80057e0 <__swbuf_r+0x2e>
 8005820:	4621      	mov	r1, r4
 8005822:	4628      	mov	r0, r5
 8005824:	f000 feb4 	bl	8006590 <_fflush_r>
 8005828:	2800      	cmp	r0, #0
 800582a:	d0d9      	beq.n	80057e0 <__swbuf_r+0x2e>
 800582c:	e7d6      	b.n	80057dc <__swbuf_r+0x2a>
	...

08005830 <__swsetup_r>:
 8005830:	b538      	push	{r3, r4, r5, lr}
 8005832:	4b29      	ldr	r3, [pc, #164]	@ (80058d8 <__swsetup_r+0xa8>)
 8005834:	4605      	mov	r5, r0
 8005836:	6818      	ldr	r0, [r3, #0]
 8005838:	460c      	mov	r4, r1
 800583a:	b118      	cbz	r0, 8005844 <__swsetup_r+0x14>
 800583c:	6a03      	ldr	r3, [r0, #32]
 800583e:	b90b      	cbnz	r3, 8005844 <__swsetup_r+0x14>
 8005840:	f7ff feac 	bl	800559c <__sinit>
 8005844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005848:	0719      	lsls	r1, r3, #28
 800584a:	d422      	bmi.n	8005892 <__swsetup_r+0x62>
 800584c:	06da      	lsls	r2, r3, #27
 800584e:	d407      	bmi.n	8005860 <__swsetup_r+0x30>
 8005850:	2209      	movs	r2, #9
 8005852:	602a      	str	r2, [r5, #0]
 8005854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005858:	81a3      	strh	r3, [r4, #12]
 800585a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800585e:	e033      	b.n	80058c8 <__swsetup_r+0x98>
 8005860:	0758      	lsls	r0, r3, #29
 8005862:	d512      	bpl.n	800588a <__swsetup_r+0x5a>
 8005864:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005866:	b141      	cbz	r1, 800587a <__swsetup_r+0x4a>
 8005868:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800586c:	4299      	cmp	r1, r3
 800586e:	d002      	beq.n	8005876 <__swsetup_r+0x46>
 8005870:	4628      	mov	r0, r5
 8005872:	f000 f8eb 	bl	8005a4c <_free_r>
 8005876:	2300      	movs	r3, #0
 8005878:	6363      	str	r3, [r4, #52]	@ 0x34
 800587a:	89a3      	ldrh	r3, [r4, #12]
 800587c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005880:	81a3      	strh	r3, [r4, #12]
 8005882:	2300      	movs	r3, #0
 8005884:	6063      	str	r3, [r4, #4]
 8005886:	6923      	ldr	r3, [r4, #16]
 8005888:	6023      	str	r3, [r4, #0]
 800588a:	89a3      	ldrh	r3, [r4, #12]
 800588c:	f043 0308 	orr.w	r3, r3, #8
 8005890:	81a3      	strh	r3, [r4, #12]
 8005892:	6923      	ldr	r3, [r4, #16]
 8005894:	b94b      	cbnz	r3, 80058aa <__swsetup_r+0x7a>
 8005896:	89a3      	ldrh	r3, [r4, #12]
 8005898:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800589c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058a0:	d003      	beq.n	80058aa <__swsetup_r+0x7a>
 80058a2:	4621      	mov	r1, r4
 80058a4:	4628      	mov	r0, r5
 80058a6:	f000 fec1 	bl	800662c <__smakebuf_r>
 80058aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058ae:	f013 0201 	ands.w	r2, r3, #1
 80058b2:	d00a      	beq.n	80058ca <__swsetup_r+0x9a>
 80058b4:	2200      	movs	r2, #0
 80058b6:	60a2      	str	r2, [r4, #8]
 80058b8:	6962      	ldr	r2, [r4, #20]
 80058ba:	4252      	negs	r2, r2
 80058bc:	61a2      	str	r2, [r4, #24]
 80058be:	6922      	ldr	r2, [r4, #16]
 80058c0:	b942      	cbnz	r2, 80058d4 <__swsetup_r+0xa4>
 80058c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80058c6:	d1c5      	bne.n	8005854 <__swsetup_r+0x24>
 80058c8:	bd38      	pop	{r3, r4, r5, pc}
 80058ca:	0799      	lsls	r1, r3, #30
 80058cc:	bf58      	it	pl
 80058ce:	6962      	ldrpl	r2, [r4, #20]
 80058d0:	60a2      	str	r2, [r4, #8]
 80058d2:	e7f4      	b.n	80058be <__swsetup_r+0x8e>
 80058d4:	2000      	movs	r0, #0
 80058d6:	e7f7      	b.n	80058c8 <__swsetup_r+0x98>
 80058d8:	20000128 	.word	0x20000128

080058dc <memset>:
 80058dc:	4402      	add	r2, r0
 80058de:	4603      	mov	r3, r0
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d100      	bne.n	80058e6 <memset+0xa>
 80058e4:	4770      	bx	lr
 80058e6:	f803 1b01 	strb.w	r1, [r3], #1
 80058ea:	e7f9      	b.n	80058e0 <memset+0x4>

080058ec <strncat>:
 80058ec:	b530      	push	{r4, r5, lr}
 80058ee:	4604      	mov	r4, r0
 80058f0:	7825      	ldrb	r5, [r4, #0]
 80058f2:	4623      	mov	r3, r4
 80058f4:	3401      	adds	r4, #1
 80058f6:	2d00      	cmp	r5, #0
 80058f8:	d1fa      	bne.n	80058f0 <strncat+0x4>
 80058fa:	3a01      	subs	r2, #1
 80058fc:	d304      	bcc.n	8005908 <strncat+0x1c>
 80058fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005902:	f803 4b01 	strb.w	r4, [r3], #1
 8005906:	b904      	cbnz	r4, 800590a <strncat+0x1e>
 8005908:	bd30      	pop	{r4, r5, pc}
 800590a:	2a00      	cmp	r2, #0
 800590c:	d1f5      	bne.n	80058fa <strncat+0xe>
 800590e:	701a      	strb	r2, [r3, #0]
 8005910:	e7f3      	b.n	80058fa <strncat+0xe>

08005912 <strncpy>:
 8005912:	b510      	push	{r4, lr}
 8005914:	3901      	subs	r1, #1
 8005916:	4603      	mov	r3, r0
 8005918:	b132      	cbz	r2, 8005928 <strncpy+0x16>
 800591a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800591e:	f803 4b01 	strb.w	r4, [r3], #1
 8005922:	3a01      	subs	r2, #1
 8005924:	2c00      	cmp	r4, #0
 8005926:	d1f7      	bne.n	8005918 <strncpy+0x6>
 8005928:	441a      	add	r2, r3
 800592a:	2100      	movs	r1, #0
 800592c:	4293      	cmp	r3, r2
 800592e:	d100      	bne.n	8005932 <strncpy+0x20>
 8005930:	bd10      	pop	{r4, pc}
 8005932:	f803 1b01 	strb.w	r1, [r3], #1
 8005936:	e7f9      	b.n	800592c <strncpy+0x1a>

08005938 <strstr>:
 8005938:	780a      	ldrb	r2, [r1, #0]
 800593a:	b570      	push	{r4, r5, r6, lr}
 800593c:	b96a      	cbnz	r2, 800595a <strstr+0x22>
 800593e:	bd70      	pop	{r4, r5, r6, pc}
 8005940:	429a      	cmp	r2, r3
 8005942:	d109      	bne.n	8005958 <strstr+0x20>
 8005944:	460c      	mov	r4, r1
 8005946:	4605      	mov	r5, r0
 8005948:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800594c:	2b00      	cmp	r3, #0
 800594e:	d0f6      	beq.n	800593e <strstr+0x6>
 8005950:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005954:	429e      	cmp	r6, r3
 8005956:	d0f7      	beq.n	8005948 <strstr+0x10>
 8005958:	3001      	adds	r0, #1
 800595a:	7803      	ldrb	r3, [r0, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1ef      	bne.n	8005940 <strstr+0x8>
 8005960:	4618      	mov	r0, r3
 8005962:	e7ec      	b.n	800593e <strstr+0x6>

08005964 <_close_r>:
 8005964:	b538      	push	{r3, r4, r5, lr}
 8005966:	4d06      	ldr	r5, [pc, #24]	@ (8005980 <_close_r+0x1c>)
 8005968:	2300      	movs	r3, #0
 800596a:	4604      	mov	r4, r0
 800596c:	4608      	mov	r0, r1
 800596e:	602b      	str	r3, [r5, #0]
 8005970:	f7fb f944 	bl	8000bfc <_close>
 8005974:	1c43      	adds	r3, r0, #1
 8005976:	d102      	bne.n	800597e <_close_r+0x1a>
 8005978:	682b      	ldr	r3, [r5, #0]
 800597a:	b103      	cbz	r3, 800597e <_close_r+0x1a>
 800597c:	6023      	str	r3, [r4, #0]
 800597e:	bd38      	pop	{r3, r4, r5, pc}
 8005980:	20001008 	.word	0x20001008

08005984 <_lseek_r>:
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	4d07      	ldr	r5, [pc, #28]	@ (80059a4 <_lseek_r+0x20>)
 8005988:	4604      	mov	r4, r0
 800598a:	4608      	mov	r0, r1
 800598c:	4611      	mov	r1, r2
 800598e:	2200      	movs	r2, #0
 8005990:	602a      	str	r2, [r5, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	f7fb f93c 	bl	8000c10 <_lseek>
 8005998:	1c43      	adds	r3, r0, #1
 800599a:	d102      	bne.n	80059a2 <_lseek_r+0x1e>
 800599c:	682b      	ldr	r3, [r5, #0]
 800599e:	b103      	cbz	r3, 80059a2 <_lseek_r+0x1e>
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	bd38      	pop	{r3, r4, r5, pc}
 80059a4:	20001008 	.word	0x20001008

080059a8 <_read_r>:
 80059a8:	b538      	push	{r3, r4, r5, lr}
 80059aa:	4d07      	ldr	r5, [pc, #28]	@ (80059c8 <_read_r+0x20>)
 80059ac:	4604      	mov	r4, r0
 80059ae:	4608      	mov	r0, r1
 80059b0:	4611      	mov	r1, r2
 80059b2:	2200      	movs	r2, #0
 80059b4:	602a      	str	r2, [r5, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	f7fb f910 	bl	8000bdc <_read>
 80059bc:	1c43      	adds	r3, r0, #1
 80059be:	d102      	bne.n	80059c6 <_read_r+0x1e>
 80059c0:	682b      	ldr	r3, [r5, #0]
 80059c2:	b103      	cbz	r3, 80059c6 <_read_r+0x1e>
 80059c4:	6023      	str	r3, [r4, #0]
 80059c6:	bd38      	pop	{r3, r4, r5, pc}
 80059c8:	20001008 	.word	0x20001008

080059cc <_write_r>:
 80059cc:	b538      	push	{r3, r4, r5, lr}
 80059ce:	4d07      	ldr	r5, [pc, #28]	@ (80059ec <_write_r+0x20>)
 80059d0:	4604      	mov	r4, r0
 80059d2:	4608      	mov	r0, r1
 80059d4:	4611      	mov	r1, r2
 80059d6:	2200      	movs	r2, #0
 80059d8:	602a      	str	r2, [r5, #0]
 80059da:	461a      	mov	r2, r3
 80059dc:	f7fa fe6a 	bl	80006b4 <_write>
 80059e0:	1c43      	adds	r3, r0, #1
 80059e2:	d102      	bne.n	80059ea <_write_r+0x1e>
 80059e4:	682b      	ldr	r3, [r5, #0]
 80059e6:	b103      	cbz	r3, 80059ea <_write_r+0x1e>
 80059e8:	6023      	str	r3, [r4, #0]
 80059ea:	bd38      	pop	{r3, r4, r5, pc}
 80059ec:	20001008 	.word	0x20001008

080059f0 <__errno>:
 80059f0:	4b01      	ldr	r3, [pc, #4]	@ (80059f8 <__errno+0x8>)
 80059f2:	6818      	ldr	r0, [r3, #0]
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	20000128 	.word	0x20000128

080059fc <__libc_init_array>:
 80059fc:	b570      	push	{r4, r5, r6, lr}
 80059fe:	4d0d      	ldr	r5, [pc, #52]	@ (8005a34 <__libc_init_array+0x38>)
 8005a00:	4c0d      	ldr	r4, [pc, #52]	@ (8005a38 <__libc_init_array+0x3c>)
 8005a02:	1b64      	subs	r4, r4, r5
 8005a04:	10a4      	asrs	r4, r4, #2
 8005a06:	2600      	movs	r6, #0
 8005a08:	42a6      	cmp	r6, r4
 8005a0a:	d109      	bne.n	8005a20 <__libc_init_array+0x24>
 8005a0c:	4d0b      	ldr	r5, [pc, #44]	@ (8005a3c <__libc_init_array+0x40>)
 8005a0e:	4c0c      	ldr	r4, [pc, #48]	@ (8005a40 <__libc_init_array+0x44>)
 8005a10:	f000 fed8 	bl	80067c4 <_init>
 8005a14:	1b64      	subs	r4, r4, r5
 8005a16:	10a4      	asrs	r4, r4, #2
 8005a18:	2600      	movs	r6, #0
 8005a1a:	42a6      	cmp	r6, r4
 8005a1c:	d105      	bne.n	8005a2a <__libc_init_array+0x2e>
 8005a1e:	bd70      	pop	{r4, r5, r6, pc}
 8005a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a24:	4798      	blx	r3
 8005a26:	3601      	adds	r6, #1
 8005a28:	e7ee      	b.n	8005a08 <__libc_init_array+0xc>
 8005a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a2e:	4798      	blx	r3
 8005a30:	3601      	adds	r6, #1
 8005a32:	e7f2      	b.n	8005a1a <__libc_init_array+0x1e>
 8005a34:	08006a90 	.word	0x08006a90
 8005a38:	08006a90 	.word	0x08006a90
 8005a3c:	08006a90 	.word	0x08006a90
 8005a40:	08006a94 	.word	0x08006a94

08005a44 <__retarget_lock_init_recursive>:
 8005a44:	4770      	bx	lr

08005a46 <__retarget_lock_acquire_recursive>:
 8005a46:	4770      	bx	lr

08005a48 <__retarget_lock_release_recursive>:
 8005a48:	4770      	bx	lr
	...

08005a4c <_free_r>:
 8005a4c:	b538      	push	{r3, r4, r5, lr}
 8005a4e:	4605      	mov	r5, r0
 8005a50:	2900      	cmp	r1, #0
 8005a52:	d041      	beq.n	8005ad8 <_free_r+0x8c>
 8005a54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a58:	1f0c      	subs	r4, r1, #4
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	bfb8      	it	lt
 8005a5e:	18e4      	addlt	r4, r4, r3
 8005a60:	f000 f8e0 	bl	8005c24 <__malloc_lock>
 8005a64:	4a1d      	ldr	r2, [pc, #116]	@ (8005adc <_free_r+0x90>)
 8005a66:	6813      	ldr	r3, [r2, #0]
 8005a68:	b933      	cbnz	r3, 8005a78 <_free_r+0x2c>
 8005a6a:	6063      	str	r3, [r4, #4]
 8005a6c:	6014      	str	r4, [r2, #0]
 8005a6e:	4628      	mov	r0, r5
 8005a70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a74:	f000 b8dc 	b.w	8005c30 <__malloc_unlock>
 8005a78:	42a3      	cmp	r3, r4
 8005a7a:	d908      	bls.n	8005a8e <_free_r+0x42>
 8005a7c:	6820      	ldr	r0, [r4, #0]
 8005a7e:	1821      	adds	r1, r4, r0
 8005a80:	428b      	cmp	r3, r1
 8005a82:	bf01      	itttt	eq
 8005a84:	6819      	ldreq	r1, [r3, #0]
 8005a86:	685b      	ldreq	r3, [r3, #4]
 8005a88:	1809      	addeq	r1, r1, r0
 8005a8a:	6021      	streq	r1, [r4, #0]
 8005a8c:	e7ed      	b.n	8005a6a <_free_r+0x1e>
 8005a8e:	461a      	mov	r2, r3
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	b10b      	cbz	r3, 8005a98 <_free_r+0x4c>
 8005a94:	42a3      	cmp	r3, r4
 8005a96:	d9fa      	bls.n	8005a8e <_free_r+0x42>
 8005a98:	6811      	ldr	r1, [r2, #0]
 8005a9a:	1850      	adds	r0, r2, r1
 8005a9c:	42a0      	cmp	r0, r4
 8005a9e:	d10b      	bne.n	8005ab8 <_free_r+0x6c>
 8005aa0:	6820      	ldr	r0, [r4, #0]
 8005aa2:	4401      	add	r1, r0
 8005aa4:	1850      	adds	r0, r2, r1
 8005aa6:	4283      	cmp	r3, r0
 8005aa8:	6011      	str	r1, [r2, #0]
 8005aaa:	d1e0      	bne.n	8005a6e <_free_r+0x22>
 8005aac:	6818      	ldr	r0, [r3, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	6053      	str	r3, [r2, #4]
 8005ab2:	4408      	add	r0, r1
 8005ab4:	6010      	str	r0, [r2, #0]
 8005ab6:	e7da      	b.n	8005a6e <_free_r+0x22>
 8005ab8:	d902      	bls.n	8005ac0 <_free_r+0x74>
 8005aba:	230c      	movs	r3, #12
 8005abc:	602b      	str	r3, [r5, #0]
 8005abe:	e7d6      	b.n	8005a6e <_free_r+0x22>
 8005ac0:	6820      	ldr	r0, [r4, #0]
 8005ac2:	1821      	adds	r1, r4, r0
 8005ac4:	428b      	cmp	r3, r1
 8005ac6:	bf04      	itt	eq
 8005ac8:	6819      	ldreq	r1, [r3, #0]
 8005aca:	685b      	ldreq	r3, [r3, #4]
 8005acc:	6063      	str	r3, [r4, #4]
 8005ace:	bf04      	itt	eq
 8005ad0:	1809      	addeq	r1, r1, r0
 8005ad2:	6021      	streq	r1, [r4, #0]
 8005ad4:	6054      	str	r4, [r2, #4]
 8005ad6:	e7ca      	b.n	8005a6e <_free_r+0x22>
 8005ad8:	bd38      	pop	{r3, r4, r5, pc}
 8005ada:	bf00      	nop
 8005adc:	20001014 	.word	0x20001014

08005ae0 <sbrk_aligned>:
 8005ae0:	b570      	push	{r4, r5, r6, lr}
 8005ae2:	4e0f      	ldr	r6, [pc, #60]	@ (8005b20 <sbrk_aligned+0x40>)
 8005ae4:	460c      	mov	r4, r1
 8005ae6:	6831      	ldr	r1, [r6, #0]
 8005ae8:	4605      	mov	r5, r0
 8005aea:	b911      	cbnz	r1, 8005af2 <sbrk_aligned+0x12>
 8005aec:	f000 fe16 	bl	800671c <_sbrk_r>
 8005af0:	6030      	str	r0, [r6, #0]
 8005af2:	4621      	mov	r1, r4
 8005af4:	4628      	mov	r0, r5
 8005af6:	f000 fe11 	bl	800671c <_sbrk_r>
 8005afa:	1c43      	adds	r3, r0, #1
 8005afc:	d103      	bne.n	8005b06 <sbrk_aligned+0x26>
 8005afe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005b02:	4620      	mov	r0, r4
 8005b04:	bd70      	pop	{r4, r5, r6, pc}
 8005b06:	1cc4      	adds	r4, r0, #3
 8005b08:	f024 0403 	bic.w	r4, r4, #3
 8005b0c:	42a0      	cmp	r0, r4
 8005b0e:	d0f8      	beq.n	8005b02 <sbrk_aligned+0x22>
 8005b10:	1a21      	subs	r1, r4, r0
 8005b12:	4628      	mov	r0, r5
 8005b14:	f000 fe02 	bl	800671c <_sbrk_r>
 8005b18:	3001      	adds	r0, #1
 8005b1a:	d1f2      	bne.n	8005b02 <sbrk_aligned+0x22>
 8005b1c:	e7ef      	b.n	8005afe <sbrk_aligned+0x1e>
 8005b1e:	bf00      	nop
 8005b20:	20001010 	.word	0x20001010

08005b24 <_malloc_r>:
 8005b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b28:	1ccd      	adds	r5, r1, #3
 8005b2a:	f025 0503 	bic.w	r5, r5, #3
 8005b2e:	3508      	adds	r5, #8
 8005b30:	2d0c      	cmp	r5, #12
 8005b32:	bf38      	it	cc
 8005b34:	250c      	movcc	r5, #12
 8005b36:	2d00      	cmp	r5, #0
 8005b38:	4606      	mov	r6, r0
 8005b3a:	db01      	blt.n	8005b40 <_malloc_r+0x1c>
 8005b3c:	42a9      	cmp	r1, r5
 8005b3e:	d904      	bls.n	8005b4a <_malloc_r+0x26>
 8005b40:	230c      	movs	r3, #12
 8005b42:	6033      	str	r3, [r6, #0]
 8005b44:	2000      	movs	r0, #0
 8005b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c20 <_malloc_r+0xfc>
 8005b4e:	f000 f869 	bl	8005c24 <__malloc_lock>
 8005b52:	f8d8 3000 	ldr.w	r3, [r8]
 8005b56:	461c      	mov	r4, r3
 8005b58:	bb44      	cbnz	r4, 8005bac <_malloc_r+0x88>
 8005b5a:	4629      	mov	r1, r5
 8005b5c:	4630      	mov	r0, r6
 8005b5e:	f7ff ffbf 	bl	8005ae0 <sbrk_aligned>
 8005b62:	1c43      	adds	r3, r0, #1
 8005b64:	4604      	mov	r4, r0
 8005b66:	d158      	bne.n	8005c1a <_malloc_r+0xf6>
 8005b68:	f8d8 4000 	ldr.w	r4, [r8]
 8005b6c:	4627      	mov	r7, r4
 8005b6e:	2f00      	cmp	r7, #0
 8005b70:	d143      	bne.n	8005bfa <_malloc_r+0xd6>
 8005b72:	2c00      	cmp	r4, #0
 8005b74:	d04b      	beq.n	8005c0e <_malloc_r+0xea>
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	4639      	mov	r1, r7
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	eb04 0903 	add.w	r9, r4, r3
 8005b80:	f000 fdcc 	bl	800671c <_sbrk_r>
 8005b84:	4581      	cmp	r9, r0
 8005b86:	d142      	bne.n	8005c0e <_malloc_r+0xea>
 8005b88:	6821      	ldr	r1, [r4, #0]
 8005b8a:	1a6d      	subs	r5, r5, r1
 8005b8c:	4629      	mov	r1, r5
 8005b8e:	4630      	mov	r0, r6
 8005b90:	f7ff ffa6 	bl	8005ae0 <sbrk_aligned>
 8005b94:	3001      	adds	r0, #1
 8005b96:	d03a      	beq.n	8005c0e <_malloc_r+0xea>
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	442b      	add	r3, r5
 8005b9c:	6023      	str	r3, [r4, #0]
 8005b9e:	f8d8 3000 	ldr.w	r3, [r8]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	bb62      	cbnz	r2, 8005c00 <_malloc_r+0xdc>
 8005ba6:	f8c8 7000 	str.w	r7, [r8]
 8005baa:	e00f      	b.n	8005bcc <_malloc_r+0xa8>
 8005bac:	6822      	ldr	r2, [r4, #0]
 8005bae:	1b52      	subs	r2, r2, r5
 8005bb0:	d420      	bmi.n	8005bf4 <_malloc_r+0xd0>
 8005bb2:	2a0b      	cmp	r2, #11
 8005bb4:	d917      	bls.n	8005be6 <_malloc_r+0xc2>
 8005bb6:	1961      	adds	r1, r4, r5
 8005bb8:	42a3      	cmp	r3, r4
 8005bba:	6025      	str	r5, [r4, #0]
 8005bbc:	bf18      	it	ne
 8005bbe:	6059      	strne	r1, [r3, #4]
 8005bc0:	6863      	ldr	r3, [r4, #4]
 8005bc2:	bf08      	it	eq
 8005bc4:	f8c8 1000 	streq.w	r1, [r8]
 8005bc8:	5162      	str	r2, [r4, r5]
 8005bca:	604b      	str	r3, [r1, #4]
 8005bcc:	4630      	mov	r0, r6
 8005bce:	f000 f82f 	bl	8005c30 <__malloc_unlock>
 8005bd2:	f104 000b 	add.w	r0, r4, #11
 8005bd6:	1d23      	adds	r3, r4, #4
 8005bd8:	f020 0007 	bic.w	r0, r0, #7
 8005bdc:	1ac2      	subs	r2, r0, r3
 8005bde:	bf1c      	itt	ne
 8005be0:	1a1b      	subne	r3, r3, r0
 8005be2:	50a3      	strne	r3, [r4, r2]
 8005be4:	e7af      	b.n	8005b46 <_malloc_r+0x22>
 8005be6:	6862      	ldr	r2, [r4, #4]
 8005be8:	42a3      	cmp	r3, r4
 8005bea:	bf0c      	ite	eq
 8005bec:	f8c8 2000 	streq.w	r2, [r8]
 8005bf0:	605a      	strne	r2, [r3, #4]
 8005bf2:	e7eb      	b.n	8005bcc <_malloc_r+0xa8>
 8005bf4:	4623      	mov	r3, r4
 8005bf6:	6864      	ldr	r4, [r4, #4]
 8005bf8:	e7ae      	b.n	8005b58 <_malloc_r+0x34>
 8005bfa:	463c      	mov	r4, r7
 8005bfc:	687f      	ldr	r7, [r7, #4]
 8005bfe:	e7b6      	b.n	8005b6e <_malloc_r+0x4a>
 8005c00:	461a      	mov	r2, r3
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	42a3      	cmp	r3, r4
 8005c06:	d1fb      	bne.n	8005c00 <_malloc_r+0xdc>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	6053      	str	r3, [r2, #4]
 8005c0c:	e7de      	b.n	8005bcc <_malloc_r+0xa8>
 8005c0e:	230c      	movs	r3, #12
 8005c10:	6033      	str	r3, [r6, #0]
 8005c12:	4630      	mov	r0, r6
 8005c14:	f000 f80c 	bl	8005c30 <__malloc_unlock>
 8005c18:	e794      	b.n	8005b44 <_malloc_r+0x20>
 8005c1a:	6005      	str	r5, [r0, #0]
 8005c1c:	e7d6      	b.n	8005bcc <_malloc_r+0xa8>
 8005c1e:	bf00      	nop
 8005c20:	20001014 	.word	0x20001014

08005c24 <__malloc_lock>:
 8005c24:	4801      	ldr	r0, [pc, #4]	@ (8005c2c <__malloc_lock+0x8>)
 8005c26:	f7ff bf0e 	b.w	8005a46 <__retarget_lock_acquire_recursive>
 8005c2a:	bf00      	nop
 8005c2c:	2000100c 	.word	0x2000100c

08005c30 <__malloc_unlock>:
 8005c30:	4801      	ldr	r0, [pc, #4]	@ (8005c38 <__malloc_unlock+0x8>)
 8005c32:	f7ff bf09 	b.w	8005a48 <__retarget_lock_release_recursive>
 8005c36:	bf00      	nop
 8005c38:	2000100c 	.word	0x2000100c

08005c3c <__ssputs_r>:
 8005c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c40:	688e      	ldr	r6, [r1, #8]
 8005c42:	461f      	mov	r7, r3
 8005c44:	42be      	cmp	r6, r7
 8005c46:	680b      	ldr	r3, [r1, #0]
 8005c48:	4682      	mov	sl, r0
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	4690      	mov	r8, r2
 8005c4e:	d82d      	bhi.n	8005cac <__ssputs_r+0x70>
 8005c50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005c58:	d026      	beq.n	8005ca8 <__ssputs_r+0x6c>
 8005c5a:	6965      	ldr	r5, [r4, #20]
 8005c5c:	6909      	ldr	r1, [r1, #16]
 8005c5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c62:	eba3 0901 	sub.w	r9, r3, r1
 8005c66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c6a:	1c7b      	adds	r3, r7, #1
 8005c6c:	444b      	add	r3, r9
 8005c6e:	106d      	asrs	r5, r5, #1
 8005c70:	429d      	cmp	r5, r3
 8005c72:	bf38      	it	cc
 8005c74:	461d      	movcc	r5, r3
 8005c76:	0553      	lsls	r3, r2, #21
 8005c78:	d527      	bpl.n	8005cca <__ssputs_r+0x8e>
 8005c7a:	4629      	mov	r1, r5
 8005c7c:	f7ff ff52 	bl	8005b24 <_malloc_r>
 8005c80:	4606      	mov	r6, r0
 8005c82:	b360      	cbz	r0, 8005cde <__ssputs_r+0xa2>
 8005c84:	6921      	ldr	r1, [r4, #16]
 8005c86:	464a      	mov	r2, r9
 8005c88:	f000 fd58 	bl	800673c <memcpy>
 8005c8c:	89a3      	ldrh	r3, [r4, #12]
 8005c8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005c92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c96:	81a3      	strh	r3, [r4, #12]
 8005c98:	6126      	str	r6, [r4, #16]
 8005c9a:	6165      	str	r5, [r4, #20]
 8005c9c:	444e      	add	r6, r9
 8005c9e:	eba5 0509 	sub.w	r5, r5, r9
 8005ca2:	6026      	str	r6, [r4, #0]
 8005ca4:	60a5      	str	r5, [r4, #8]
 8005ca6:	463e      	mov	r6, r7
 8005ca8:	42be      	cmp	r6, r7
 8005caa:	d900      	bls.n	8005cae <__ssputs_r+0x72>
 8005cac:	463e      	mov	r6, r7
 8005cae:	6820      	ldr	r0, [r4, #0]
 8005cb0:	4632      	mov	r2, r6
 8005cb2:	4641      	mov	r1, r8
 8005cb4:	f000 fcf6 	bl	80066a4 <memmove>
 8005cb8:	68a3      	ldr	r3, [r4, #8]
 8005cba:	1b9b      	subs	r3, r3, r6
 8005cbc:	60a3      	str	r3, [r4, #8]
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	4433      	add	r3, r6
 8005cc2:	6023      	str	r3, [r4, #0]
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cca:	462a      	mov	r2, r5
 8005ccc:	f000 fd44 	bl	8006758 <_realloc_r>
 8005cd0:	4606      	mov	r6, r0
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	d1e0      	bne.n	8005c98 <__ssputs_r+0x5c>
 8005cd6:	6921      	ldr	r1, [r4, #16]
 8005cd8:	4650      	mov	r0, sl
 8005cda:	f7ff feb7 	bl	8005a4c <_free_r>
 8005cde:	230c      	movs	r3, #12
 8005ce0:	f8ca 3000 	str.w	r3, [sl]
 8005ce4:	89a3      	ldrh	r3, [r4, #12]
 8005ce6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cea:	81a3      	strh	r3, [r4, #12]
 8005cec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005cf0:	e7e9      	b.n	8005cc6 <__ssputs_r+0x8a>
	...

08005cf4 <_svfiprintf_r>:
 8005cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf8:	4698      	mov	r8, r3
 8005cfa:	898b      	ldrh	r3, [r1, #12]
 8005cfc:	061b      	lsls	r3, r3, #24
 8005cfe:	b09d      	sub	sp, #116	@ 0x74
 8005d00:	4607      	mov	r7, r0
 8005d02:	460d      	mov	r5, r1
 8005d04:	4614      	mov	r4, r2
 8005d06:	d510      	bpl.n	8005d2a <_svfiprintf_r+0x36>
 8005d08:	690b      	ldr	r3, [r1, #16]
 8005d0a:	b973      	cbnz	r3, 8005d2a <_svfiprintf_r+0x36>
 8005d0c:	2140      	movs	r1, #64	@ 0x40
 8005d0e:	f7ff ff09 	bl	8005b24 <_malloc_r>
 8005d12:	6028      	str	r0, [r5, #0]
 8005d14:	6128      	str	r0, [r5, #16]
 8005d16:	b930      	cbnz	r0, 8005d26 <_svfiprintf_r+0x32>
 8005d18:	230c      	movs	r3, #12
 8005d1a:	603b      	str	r3, [r7, #0]
 8005d1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d20:	b01d      	add	sp, #116	@ 0x74
 8005d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d26:	2340      	movs	r3, #64	@ 0x40
 8005d28:	616b      	str	r3, [r5, #20]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d2e:	2320      	movs	r3, #32
 8005d30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d34:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d38:	2330      	movs	r3, #48	@ 0x30
 8005d3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005ed8 <_svfiprintf_r+0x1e4>
 8005d3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d42:	f04f 0901 	mov.w	r9, #1
 8005d46:	4623      	mov	r3, r4
 8005d48:	469a      	mov	sl, r3
 8005d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d4e:	b10a      	cbz	r2, 8005d54 <_svfiprintf_r+0x60>
 8005d50:	2a25      	cmp	r2, #37	@ 0x25
 8005d52:	d1f9      	bne.n	8005d48 <_svfiprintf_r+0x54>
 8005d54:	ebba 0b04 	subs.w	fp, sl, r4
 8005d58:	d00b      	beq.n	8005d72 <_svfiprintf_r+0x7e>
 8005d5a:	465b      	mov	r3, fp
 8005d5c:	4622      	mov	r2, r4
 8005d5e:	4629      	mov	r1, r5
 8005d60:	4638      	mov	r0, r7
 8005d62:	f7ff ff6b 	bl	8005c3c <__ssputs_r>
 8005d66:	3001      	adds	r0, #1
 8005d68:	f000 80a7 	beq.w	8005eba <_svfiprintf_r+0x1c6>
 8005d6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d6e:	445a      	add	r2, fp
 8005d70:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d72:	f89a 3000 	ldrb.w	r3, [sl]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 809f 	beq.w	8005eba <_svfiprintf_r+0x1c6>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d86:	f10a 0a01 	add.w	sl, sl, #1
 8005d8a:	9304      	str	r3, [sp, #16]
 8005d8c:	9307      	str	r3, [sp, #28]
 8005d8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d92:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d94:	4654      	mov	r4, sl
 8005d96:	2205      	movs	r2, #5
 8005d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d9c:	484e      	ldr	r0, [pc, #312]	@ (8005ed8 <_svfiprintf_r+0x1e4>)
 8005d9e:	f7fa fa37 	bl	8000210 <memchr>
 8005da2:	9a04      	ldr	r2, [sp, #16]
 8005da4:	b9d8      	cbnz	r0, 8005dde <_svfiprintf_r+0xea>
 8005da6:	06d0      	lsls	r0, r2, #27
 8005da8:	bf44      	itt	mi
 8005daa:	2320      	movmi	r3, #32
 8005dac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005db0:	0711      	lsls	r1, r2, #28
 8005db2:	bf44      	itt	mi
 8005db4:	232b      	movmi	r3, #43	@ 0x2b
 8005db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005dba:	f89a 3000 	ldrb.w	r3, [sl]
 8005dbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dc0:	d015      	beq.n	8005dee <_svfiprintf_r+0xfa>
 8005dc2:	9a07      	ldr	r2, [sp, #28]
 8005dc4:	4654      	mov	r4, sl
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	f04f 0c0a 	mov.w	ip, #10
 8005dcc:	4621      	mov	r1, r4
 8005dce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dd2:	3b30      	subs	r3, #48	@ 0x30
 8005dd4:	2b09      	cmp	r3, #9
 8005dd6:	d94b      	bls.n	8005e70 <_svfiprintf_r+0x17c>
 8005dd8:	b1b0      	cbz	r0, 8005e08 <_svfiprintf_r+0x114>
 8005dda:	9207      	str	r2, [sp, #28]
 8005ddc:	e014      	b.n	8005e08 <_svfiprintf_r+0x114>
 8005dde:	eba0 0308 	sub.w	r3, r0, r8
 8005de2:	fa09 f303 	lsl.w	r3, r9, r3
 8005de6:	4313      	orrs	r3, r2
 8005de8:	9304      	str	r3, [sp, #16]
 8005dea:	46a2      	mov	sl, r4
 8005dec:	e7d2      	b.n	8005d94 <_svfiprintf_r+0xa0>
 8005dee:	9b03      	ldr	r3, [sp, #12]
 8005df0:	1d19      	adds	r1, r3, #4
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	9103      	str	r1, [sp, #12]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	bfbb      	ittet	lt
 8005dfa:	425b      	neglt	r3, r3
 8005dfc:	f042 0202 	orrlt.w	r2, r2, #2
 8005e00:	9307      	strge	r3, [sp, #28]
 8005e02:	9307      	strlt	r3, [sp, #28]
 8005e04:	bfb8      	it	lt
 8005e06:	9204      	strlt	r2, [sp, #16]
 8005e08:	7823      	ldrb	r3, [r4, #0]
 8005e0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e0c:	d10a      	bne.n	8005e24 <_svfiprintf_r+0x130>
 8005e0e:	7863      	ldrb	r3, [r4, #1]
 8005e10:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e12:	d132      	bne.n	8005e7a <_svfiprintf_r+0x186>
 8005e14:	9b03      	ldr	r3, [sp, #12]
 8005e16:	1d1a      	adds	r2, r3, #4
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	9203      	str	r2, [sp, #12]
 8005e1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e20:	3402      	adds	r4, #2
 8005e22:	9305      	str	r3, [sp, #20]
 8005e24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005ee8 <_svfiprintf_r+0x1f4>
 8005e28:	7821      	ldrb	r1, [r4, #0]
 8005e2a:	2203      	movs	r2, #3
 8005e2c:	4650      	mov	r0, sl
 8005e2e:	f7fa f9ef 	bl	8000210 <memchr>
 8005e32:	b138      	cbz	r0, 8005e44 <_svfiprintf_r+0x150>
 8005e34:	9b04      	ldr	r3, [sp, #16]
 8005e36:	eba0 000a 	sub.w	r0, r0, sl
 8005e3a:	2240      	movs	r2, #64	@ 0x40
 8005e3c:	4082      	lsls	r2, r0
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	3401      	adds	r4, #1
 8005e42:	9304      	str	r3, [sp, #16]
 8005e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e48:	4824      	ldr	r0, [pc, #144]	@ (8005edc <_svfiprintf_r+0x1e8>)
 8005e4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e4e:	2206      	movs	r2, #6
 8005e50:	f7fa f9de 	bl	8000210 <memchr>
 8005e54:	2800      	cmp	r0, #0
 8005e56:	d036      	beq.n	8005ec6 <_svfiprintf_r+0x1d2>
 8005e58:	4b21      	ldr	r3, [pc, #132]	@ (8005ee0 <_svfiprintf_r+0x1ec>)
 8005e5a:	bb1b      	cbnz	r3, 8005ea4 <_svfiprintf_r+0x1b0>
 8005e5c:	9b03      	ldr	r3, [sp, #12]
 8005e5e:	3307      	adds	r3, #7
 8005e60:	f023 0307 	bic.w	r3, r3, #7
 8005e64:	3308      	adds	r3, #8
 8005e66:	9303      	str	r3, [sp, #12]
 8005e68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e6a:	4433      	add	r3, r6
 8005e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e6e:	e76a      	b.n	8005d46 <_svfiprintf_r+0x52>
 8005e70:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e74:	460c      	mov	r4, r1
 8005e76:	2001      	movs	r0, #1
 8005e78:	e7a8      	b.n	8005dcc <_svfiprintf_r+0xd8>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	3401      	adds	r4, #1
 8005e7e:	9305      	str	r3, [sp, #20]
 8005e80:	4619      	mov	r1, r3
 8005e82:	f04f 0c0a 	mov.w	ip, #10
 8005e86:	4620      	mov	r0, r4
 8005e88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e8c:	3a30      	subs	r2, #48	@ 0x30
 8005e8e:	2a09      	cmp	r2, #9
 8005e90:	d903      	bls.n	8005e9a <_svfiprintf_r+0x1a6>
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d0c6      	beq.n	8005e24 <_svfiprintf_r+0x130>
 8005e96:	9105      	str	r1, [sp, #20]
 8005e98:	e7c4      	b.n	8005e24 <_svfiprintf_r+0x130>
 8005e9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e7f0      	b.n	8005e86 <_svfiprintf_r+0x192>
 8005ea4:	ab03      	add	r3, sp, #12
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	462a      	mov	r2, r5
 8005eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee4 <_svfiprintf_r+0x1f0>)
 8005eac:	a904      	add	r1, sp, #16
 8005eae:	4638      	mov	r0, r7
 8005eb0:	f3af 8000 	nop.w
 8005eb4:	1c42      	adds	r2, r0, #1
 8005eb6:	4606      	mov	r6, r0
 8005eb8:	d1d6      	bne.n	8005e68 <_svfiprintf_r+0x174>
 8005eba:	89ab      	ldrh	r3, [r5, #12]
 8005ebc:	065b      	lsls	r3, r3, #25
 8005ebe:	f53f af2d 	bmi.w	8005d1c <_svfiprintf_r+0x28>
 8005ec2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ec4:	e72c      	b.n	8005d20 <_svfiprintf_r+0x2c>
 8005ec6:	ab03      	add	r3, sp, #12
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	462a      	mov	r2, r5
 8005ecc:	4b05      	ldr	r3, [pc, #20]	@ (8005ee4 <_svfiprintf_r+0x1f0>)
 8005ece:	a904      	add	r1, sp, #16
 8005ed0:	4638      	mov	r0, r7
 8005ed2:	f000 f9bb 	bl	800624c <_printf_i>
 8005ed6:	e7ed      	b.n	8005eb4 <_svfiprintf_r+0x1c0>
 8005ed8:	08006a54 	.word	0x08006a54
 8005edc:	08006a5e 	.word	0x08006a5e
 8005ee0:	00000000 	.word	0x00000000
 8005ee4:	08005c3d 	.word	0x08005c3d
 8005ee8:	08006a5a 	.word	0x08006a5a

08005eec <__sfputc_r>:
 8005eec:	6893      	ldr	r3, [r2, #8]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	b410      	push	{r4}
 8005ef4:	6093      	str	r3, [r2, #8]
 8005ef6:	da08      	bge.n	8005f0a <__sfputc_r+0x1e>
 8005ef8:	6994      	ldr	r4, [r2, #24]
 8005efa:	42a3      	cmp	r3, r4
 8005efc:	db01      	blt.n	8005f02 <__sfputc_r+0x16>
 8005efe:	290a      	cmp	r1, #10
 8005f00:	d103      	bne.n	8005f0a <__sfputc_r+0x1e>
 8005f02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f06:	f7ff bc54 	b.w	80057b2 <__swbuf_r>
 8005f0a:	6813      	ldr	r3, [r2, #0]
 8005f0c:	1c58      	adds	r0, r3, #1
 8005f0e:	6010      	str	r0, [r2, #0]
 8005f10:	7019      	strb	r1, [r3, #0]
 8005f12:	4608      	mov	r0, r1
 8005f14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <__sfputs_r>:
 8005f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1c:	4606      	mov	r6, r0
 8005f1e:	460f      	mov	r7, r1
 8005f20:	4614      	mov	r4, r2
 8005f22:	18d5      	adds	r5, r2, r3
 8005f24:	42ac      	cmp	r4, r5
 8005f26:	d101      	bne.n	8005f2c <__sfputs_r+0x12>
 8005f28:	2000      	movs	r0, #0
 8005f2a:	e007      	b.n	8005f3c <__sfputs_r+0x22>
 8005f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f30:	463a      	mov	r2, r7
 8005f32:	4630      	mov	r0, r6
 8005f34:	f7ff ffda 	bl	8005eec <__sfputc_r>
 8005f38:	1c43      	adds	r3, r0, #1
 8005f3a:	d1f3      	bne.n	8005f24 <__sfputs_r+0xa>
 8005f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f40 <_vfiprintf_r>:
 8005f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f44:	460d      	mov	r5, r1
 8005f46:	b09d      	sub	sp, #116	@ 0x74
 8005f48:	4614      	mov	r4, r2
 8005f4a:	4698      	mov	r8, r3
 8005f4c:	4606      	mov	r6, r0
 8005f4e:	b118      	cbz	r0, 8005f58 <_vfiprintf_r+0x18>
 8005f50:	6a03      	ldr	r3, [r0, #32]
 8005f52:	b90b      	cbnz	r3, 8005f58 <_vfiprintf_r+0x18>
 8005f54:	f7ff fb22 	bl	800559c <__sinit>
 8005f58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f5a:	07d9      	lsls	r1, r3, #31
 8005f5c:	d405      	bmi.n	8005f6a <_vfiprintf_r+0x2a>
 8005f5e:	89ab      	ldrh	r3, [r5, #12]
 8005f60:	059a      	lsls	r2, r3, #22
 8005f62:	d402      	bmi.n	8005f6a <_vfiprintf_r+0x2a>
 8005f64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f66:	f7ff fd6e 	bl	8005a46 <__retarget_lock_acquire_recursive>
 8005f6a:	89ab      	ldrh	r3, [r5, #12]
 8005f6c:	071b      	lsls	r3, r3, #28
 8005f6e:	d501      	bpl.n	8005f74 <_vfiprintf_r+0x34>
 8005f70:	692b      	ldr	r3, [r5, #16]
 8005f72:	b99b      	cbnz	r3, 8005f9c <_vfiprintf_r+0x5c>
 8005f74:	4629      	mov	r1, r5
 8005f76:	4630      	mov	r0, r6
 8005f78:	f7ff fc5a 	bl	8005830 <__swsetup_r>
 8005f7c:	b170      	cbz	r0, 8005f9c <_vfiprintf_r+0x5c>
 8005f7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f80:	07dc      	lsls	r4, r3, #31
 8005f82:	d504      	bpl.n	8005f8e <_vfiprintf_r+0x4e>
 8005f84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f88:	b01d      	add	sp, #116	@ 0x74
 8005f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f8e:	89ab      	ldrh	r3, [r5, #12]
 8005f90:	0598      	lsls	r0, r3, #22
 8005f92:	d4f7      	bmi.n	8005f84 <_vfiprintf_r+0x44>
 8005f94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f96:	f7ff fd57 	bl	8005a48 <__retarget_lock_release_recursive>
 8005f9a:	e7f3      	b.n	8005f84 <_vfiprintf_r+0x44>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fa0:	2320      	movs	r3, #32
 8005fa2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005fa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005faa:	2330      	movs	r3, #48	@ 0x30
 8005fac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800615c <_vfiprintf_r+0x21c>
 8005fb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005fb4:	f04f 0901 	mov.w	r9, #1
 8005fb8:	4623      	mov	r3, r4
 8005fba:	469a      	mov	sl, r3
 8005fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fc0:	b10a      	cbz	r2, 8005fc6 <_vfiprintf_r+0x86>
 8005fc2:	2a25      	cmp	r2, #37	@ 0x25
 8005fc4:	d1f9      	bne.n	8005fba <_vfiprintf_r+0x7a>
 8005fc6:	ebba 0b04 	subs.w	fp, sl, r4
 8005fca:	d00b      	beq.n	8005fe4 <_vfiprintf_r+0xa4>
 8005fcc:	465b      	mov	r3, fp
 8005fce:	4622      	mov	r2, r4
 8005fd0:	4629      	mov	r1, r5
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	f7ff ffa1 	bl	8005f1a <__sfputs_r>
 8005fd8:	3001      	adds	r0, #1
 8005fda:	f000 80a7 	beq.w	800612c <_vfiprintf_r+0x1ec>
 8005fde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fe0:	445a      	add	r2, fp
 8005fe2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 809f 	beq.w	800612c <_vfiprintf_r+0x1ec>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ff8:	f10a 0a01 	add.w	sl, sl, #1
 8005ffc:	9304      	str	r3, [sp, #16]
 8005ffe:	9307      	str	r3, [sp, #28]
 8006000:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006004:	931a      	str	r3, [sp, #104]	@ 0x68
 8006006:	4654      	mov	r4, sl
 8006008:	2205      	movs	r2, #5
 800600a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800600e:	4853      	ldr	r0, [pc, #332]	@ (800615c <_vfiprintf_r+0x21c>)
 8006010:	f7fa f8fe 	bl	8000210 <memchr>
 8006014:	9a04      	ldr	r2, [sp, #16]
 8006016:	b9d8      	cbnz	r0, 8006050 <_vfiprintf_r+0x110>
 8006018:	06d1      	lsls	r1, r2, #27
 800601a:	bf44      	itt	mi
 800601c:	2320      	movmi	r3, #32
 800601e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006022:	0713      	lsls	r3, r2, #28
 8006024:	bf44      	itt	mi
 8006026:	232b      	movmi	r3, #43	@ 0x2b
 8006028:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800602c:	f89a 3000 	ldrb.w	r3, [sl]
 8006030:	2b2a      	cmp	r3, #42	@ 0x2a
 8006032:	d015      	beq.n	8006060 <_vfiprintf_r+0x120>
 8006034:	9a07      	ldr	r2, [sp, #28]
 8006036:	4654      	mov	r4, sl
 8006038:	2000      	movs	r0, #0
 800603a:	f04f 0c0a 	mov.w	ip, #10
 800603e:	4621      	mov	r1, r4
 8006040:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006044:	3b30      	subs	r3, #48	@ 0x30
 8006046:	2b09      	cmp	r3, #9
 8006048:	d94b      	bls.n	80060e2 <_vfiprintf_r+0x1a2>
 800604a:	b1b0      	cbz	r0, 800607a <_vfiprintf_r+0x13a>
 800604c:	9207      	str	r2, [sp, #28]
 800604e:	e014      	b.n	800607a <_vfiprintf_r+0x13a>
 8006050:	eba0 0308 	sub.w	r3, r0, r8
 8006054:	fa09 f303 	lsl.w	r3, r9, r3
 8006058:	4313      	orrs	r3, r2
 800605a:	9304      	str	r3, [sp, #16]
 800605c:	46a2      	mov	sl, r4
 800605e:	e7d2      	b.n	8006006 <_vfiprintf_r+0xc6>
 8006060:	9b03      	ldr	r3, [sp, #12]
 8006062:	1d19      	adds	r1, r3, #4
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	9103      	str	r1, [sp, #12]
 8006068:	2b00      	cmp	r3, #0
 800606a:	bfbb      	ittet	lt
 800606c:	425b      	neglt	r3, r3
 800606e:	f042 0202 	orrlt.w	r2, r2, #2
 8006072:	9307      	strge	r3, [sp, #28]
 8006074:	9307      	strlt	r3, [sp, #28]
 8006076:	bfb8      	it	lt
 8006078:	9204      	strlt	r2, [sp, #16]
 800607a:	7823      	ldrb	r3, [r4, #0]
 800607c:	2b2e      	cmp	r3, #46	@ 0x2e
 800607e:	d10a      	bne.n	8006096 <_vfiprintf_r+0x156>
 8006080:	7863      	ldrb	r3, [r4, #1]
 8006082:	2b2a      	cmp	r3, #42	@ 0x2a
 8006084:	d132      	bne.n	80060ec <_vfiprintf_r+0x1ac>
 8006086:	9b03      	ldr	r3, [sp, #12]
 8006088:	1d1a      	adds	r2, r3, #4
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	9203      	str	r2, [sp, #12]
 800608e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006092:	3402      	adds	r4, #2
 8006094:	9305      	str	r3, [sp, #20]
 8006096:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800616c <_vfiprintf_r+0x22c>
 800609a:	7821      	ldrb	r1, [r4, #0]
 800609c:	2203      	movs	r2, #3
 800609e:	4650      	mov	r0, sl
 80060a0:	f7fa f8b6 	bl	8000210 <memchr>
 80060a4:	b138      	cbz	r0, 80060b6 <_vfiprintf_r+0x176>
 80060a6:	9b04      	ldr	r3, [sp, #16]
 80060a8:	eba0 000a 	sub.w	r0, r0, sl
 80060ac:	2240      	movs	r2, #64	@ 0x40
 80060ae:	4082      	lsls	r2, r0
 80060b0:	4313      	orrs	r3, r2
 80060b2:	3401      	adds	r4, #1
 80060b4:	9304      	str	r3, [sp, #16]
 80060b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060ba:	4829      	ldr	r0, [pc, #164]	@ (8006160 <_vfiprintf_r+0x220>)
 80060bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80060c0:	2206      	movs	r2, #6
 80060c2:	f7fa f8a5 	bl	8000210 <memchr>
 80060c6:	2800      	cmp	r0, #0
 80060c8:	d03f      	beq.n	800614a <_vfiprintf_r+0x20a>
 80060ca:	4b26      	ldr	r3, [pc, #152]	@ (8006164 <_vfiprintf_r+0x224>)
 80060cc:	bb1b      	cbnz	r3, 8006116 <_vfiprintf_r+0x1d6>
 80060ce:	9b03      	ldr	r3, [sp, #12]
 80060d0:	3307      	adds	r3, #7
 80060d2:	f023 0307 	bic.w	r3, r3, #7
 80060d6:	3308      	adds	r3, #8
 80060d8:	9303      	str	r3, [sp, #12]
 80060da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060dc:	443b      	add	r3, r7
 80060de:	9309      	str	r3, [sp, #36]	@ 0x24
 80060e0:	e76a      	b.n	8005fb8 <_vfiprintf_r+0x78>
 80060e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80060e6:	460c      	mov	r4, r1
 80060e8:	2001      	movs	r0, #1
 80060ea:	e7a8      	b.n	800603e <_vfiprintf_r+0xfe>
 80060ec:	2300      	movs	r3, #0
 80060ee:	3401      	adds	r4, #1
 80060f0:	9305      	str	r3, [sp, #20]
 80060f2:	4619      	mov	r1, r3
 80060f4:	f04f 0c0a 	mov.w	ip, #10
 80060f8:	4620      	mov	r0, r4
 80060fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060fe:	3a30      	subs	r2, #48	@ 0x30
 8006100:	2a09      	cmp	r2, #9
 8006102:	d903      	bls.n	800610c <_vfiprintf_r+0x1cc>
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0c6      	beq.n	8006096 <_vfiprintf_r+0x156>
 8006108:	9105      	str	r1, [sp, #20]
 800610a:	e7c4      	b.n	8006096 <_vfiprintf_r+0x156>
 800610c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006110:	4604      	mov	r4, r0
 8006112:	2301      	movs	r3, #1
 8006114:	e7f0      	b.n	80060f8 <_vfiprintf_r+0x1b8>
 8006116:	ab03      	add	r3, sp, #12
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	462a      	mov	r2, r5
 800611c:	4b12      	ldr	r3, [pc, #72]	@ (8006168 <_vfiprintf_r+0x228>)
 800611e:	a904      	add	r1, sp, #16
 8006120:	4630      	mov	r0, r6
 8006122:	f3af 8000 	nop.w
 8006126:	4607      	mov	r7, r0
 8006128:	1c78      	adds	r0, r7, #1
 800612a:	d1d6      	bne.n	80060da <_vfiprintf_r+0x19a>
 800612c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800612e:	07d9      	lsls	r1, r3, #31
 8006130:	d405      	bmi.n	800613e <_vfiprintf_r+0x1fe>
 8006132:	89ab      	ldrh	r3, [r5, #12]
 8006134:	059a      	lsls	r2, r3, #22
 8006136:	d402      	bmi.n	800613e <_vfiprintf_r+0x1fe>
 8006138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800613a:	f7ff fc85 	bl	8005a48 <__retarget_lock_release_recursive>
 800613e:	89ab      	ldrh	r3, [r5, #12]
 8006140:	065b      	lsls	r3, r3, #25
 8006142:	f53f af1f 	bmi.w	8005f84 <_vfiprintf_r+0x44>
 8006146:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006148:	e71e      	b.n	8005f88 <_vfiprintf_r+0x48>
 800614a:	ab03      	add	r3, sp, #12
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	462a      	mov	r2, r5
 8006150:	4b05      	ldr	r3, [pc, #20]	@ (8006168 <_vfiprintf_r+0x228>)
 8006152:	a904      	add	r1, sp, #16
 8006154:	4630      	mov	r0, r6
 8006156:	f000 f879 	bl	800624c <_printf_i>
 800615a:	e7e4      	b.n	8006126 <_vfiprintf_r+0x1e6>
 800615c:	08006a54 	.word	0x08006a54
 8006160:	08006a5e 	.word	0x08006a5e
 8006164:	00000000 	.word	0x00000000
 8006168:	08005f1b 	.word	0x08005f1b
 800616c:	08006a5a 	.word	0x08006a5a

08006170 <_printf_common>:
 8006170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006174:	4616      	mov	r6, r2
 8006176:	4698      	mov	r8, r3
 8006178:	688a      	ldr	r2, [r1, #8]
 800617a:	690b      	ldr	r3, [r1, #16]
 800617c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006180:	4293      	cmp	r3, r2
 8006182:	bfb8      	it	lt
 8006184:	4613      	movlt	r3, r2
 8006186:	6033      	str	r3, [r6, #0]
 8006188:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800618c:	4607      	mov	r7, r0
 800618e:	460c      	mov	r4, r1
 8006190:	b10a      	cbz	r2, 8006196 <_printf_common+0x26>
 8006192:	3301      	adds	r3, #1
 8006194:	6033      	str	r3, [r6, #0]
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	0699      	lsls	r1, r3, #26
 800619a:	bf42      	ittt	mi
 800619c:	6833      	ldrmi	r3, [r6, #0]
 800619e:	3302      	addmi	r3, #2
 80061a0:	6033      	strmi	r3, [r6, #0]
 80061a2:	6825      	ldr	r5, [r4, #0]
 80061a4:	f015 0506 	ands.w	r5, r5, #6
 80061a8:	d106      	bne.n	80061b8 <_printf_common+0x48>
 80061aa:	f104 0a19 	add.w	sl, r4, #25
 80061ae:	68e3      	ldr	r3, [r4, #12]
 80061b0:	6832      	ldr	r2, [r6, #0]
 80061b2:	1a9b      	subs	r3, r3, r2
 80061b4:	42ab      	cmp	r3, r5
 80061b6:	dc26      	bgt.n	8006206 <_printf_common+0x96>
 80061b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80061bc:	6822      	ldr	r2, [r4, #0]
 80061be:	3b00      	subs	r3, #0
 80061c0:	bf18      	it	ne
 80061c2:	2301      	movne	r3, #1
 80061c4:	0692      	lsls	r2, r2, #26
 80061c6:	d42b      	bmi.n	8006220 <_printf_common+0xb0>
 80061c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80061cc:	4641      	mov	r1, r8
 80061ce:	4638      	mov	r0, r7
 80061d0:	47c8      	blx	r9
 80061d2:	3001      	adds	r0, #1
 80061d4:	d01e      	beq.n	8006214 <_printf_common+0xa4>
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	6922      	ldr	r2, [r4, #16]
 80061da:	f003 0306 	and.w	r3, r3, #6
 80061de:	2b04      	cmp	r3, #4
 80061e0:	bf02      	ittt	eq
 80061e2:	68e5      	ldreq	r5, [r4, #12]
 80061e4:	6833      	ldreq	r3, [r6, #0]
 80061e6:	1aed      	subeq	r5, r5, r3
 80061e8:	68a3      	ldr	r3, [r4, #8]
 80061ea:	bf0c      	ite	eq
 80061ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061f0:	2500      	movne	r5, #0
 80061f2:	4293      	cmp	r3, r2
 80061f4:	bfc4      	itt	gt
 80061f6:	1a9b      	subgt	r3, r3, r2
 80061f8:	18ed      	addgt	r5, r5, r3
 80061fa:	2600      	movs	r6, #0
 80061fc:	341a      	adds	r4, #26
 80061fe:	42b5      	cmp	r5, r6
 8006200:	d11a      	bne.n	8006238 <_printf_common+0xc8>
 8006202:	2000      	movs	r0, #0
 8006204:	e008      	b.n	8006218 <_printf_common+0xa8>
 8006206:	2301      	movs	r3, #1
 8006208:	4652      	mov	r2, sl
 800620a:	4641      	mov	r1, r8
 800620c:	4638      	mov	r0, r7
 800620e:	47c8      	blx	r9
 8006210:	3001      	adds	r0, #1
 8006212:	d103      	bne.n	800621c <_printf_common+0xac>
 8006214:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800621c:	3501      	adds	r5, #1
 800621e:	e7c6      	b.n	80061ae <_printf_common+0x3e>
 8006220:	18e1      	adds	r1, r4, r3
 8006222:	1c5a      	adds	r2, r3, #1
 8006224:	2030      	movs	r0, #48	@ 0x30
 8006226:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800622a:	4422      	add	r2, r4
 800622c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006230:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006234:	3302      	adds	r3, #2
 8006236:	e7c7      	b.n	80061c8 <_printf_common+0x58>
 8006238:	2301      	movs	r3, #1
 800623a:	4622      	mov	r2, r4
 800623c:	4641      	mov	r1, r8
 800623e:	4638      	mov	r0, r7
 8006240:	47c8      	blx	r9
 8006242:	3001      	adds	r0, #1
 8006244:	d0e6      	beq.n	8006214 <_printf_common+0xa4>
 8006246:	3601      	adds	r6, #1
 8006248:	e7d9      	b.n	80061fe <_printf_common+0x8e>
	...

0800624c <_printf_i>:
 800624c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006250:	7e0f      	ldrb	r7, [r1, #24]
 8006252:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006254:	2f78      	cmp	r7, #120	@ 0x78
 8006256:	4691      	mov	r9, r2
 8006258:	4680      	mov	r8, r0
 800625a:	460c      	mov	r4, r1
 800625c:	469a      	mov	sl, r3
 800625e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006262:	d807      	bhi.n	8006274 <_printf_i+0x28>
 8006264:	2f62      	cmp	r7, #98	@ 0x62
 8006266:	d80a      	bhi.n	800627e <_printf_i+0x32>
 8006268:	2f00      	cmp	r7, #0
 800626a:	f000 80d1 	beq.w	8006410 <_printf_i+0x1c4>
 800626e:	2f58      	cmp	r7, #88	@ 0x58
 8006270:	f000 80b8 	beq.w	80063e4 <_printf_i+0x198>
 8006274:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006278:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800627c:	e03a      	b.n	80062f4 <_printf_i+0xa8>
 800627e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006282:	2b15      	cmp	r3, #21
 8006284:	d8f6      	bhi.n	8006274 <_printf_i+0x28>
 8006286:	a101      	add	r1, pc, #4	@ (adr r1, 800628c <_printf_i+0x40>)
 8006288:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800628c:	080062e5 	.word	0x080062e5
 8006290:	080062f9 	.word	0x080062f9
 8006294:	08006275 	.word	0x08006275
 8006298:	08006275 	.word	0x08006275
 800629c:	08006275 	.word	0x08006275
 80062a0:	08006275 	.word	0x08006275
 80062a4:	080062f9 	.word	0x080062f9
 80062a8:	08006275 	.word	0x08006275
 80062ac:	08006275 	.word	0x08006275
 80062b0:	08006275 	.word	0x08006275
 80062b4:	08006275 	.word	0x08006275
 80062b8:	080063f7 	.word	0x080063f7
 80062bc:	08006323 	.word	0x08006323
 80062c0:	080063b1 	.word	0x080063b1
 80062c4:	08006275 	.word	0x08006275
 80062c8:	08006275 	.word	0x08006275
 80062cc:	08006419 	.word	0x08006419
 80062d0:	08006275 	.word	0x08006275
 80062d4:	08006323 	.word	0x08006323
 80062d8:	08006275 	.word	0x08006275
 80062dc:	08006275 	.word	0x08006275
 80062e0:	080063b9 	.word	0x080063b9
 80062e4:	6833      	ldr	r3, [r6, #0]
 80062e6:	1d1a      	adds	r2, r3, #4
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6032      	str	r2, [r6, #0]
 80062ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80062f4:	2301      	movs	r3, #1
 80062f6:	e09c      	b.n	8006432 <_printf_i+0x1e6>
 80062f8:	6833      	ldr	r3, [r6, #0]
 80062fa:	6820      	ldr	r0, [r4, #0]
 80062fc:	1d19      	adds	r1, r3, #4
 80062fe:	6031      	str	r1, [r6, #0]
 8006300:	0606      	lsls	r6, r0, #24
 8006302:	d501      	bpl.n	8006308 <_printf_i+0xbc>
 8006304:	681d      	ldr	r5, [r3, #0]
 8006306:	e003      	b.n	8006310 <_printf_i+0xc4>
 8006308:	0645      	lsls	r5, r0, #25
 800630a:	d5fb      	bpl.n	8006304 <_printf_i+0xb8>
 800630c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006310:	2d00      	cmp	r5, #0
 8006312:	da03      	bge.n	800631c <_printf_i+0xd0>
 8006314:	232d      	movs	r3, #45	@ 0x2d
 8006316:	426d      	negs	r5, r5
 8006318:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800631c:	4858      	ldr	r0, [pc, #352]	@ (8006480 <_printf_i+0x234>)
 800631e:	230a      	movs	r3, #10
 8006320:	e011      	b.n	8006346 <_printf_i+0xfa>
 8006322:	6821      	ldr	r1, [r4, #0]
 8006324:	6833      	ldr	r3, [r6, #0]
 8006326:	0608      	lsls	r0, r1, #24
 8006328:	f853 5b04 	ldr.w	r5, [r3], #4
 800632c:	d402      	bmi.n	8006334 <_printf_i+0xe8>
 800632e:	0649      	lsls	r1, r1, #25
 8006330:	bf48      	it	mi
 8006332:	b2ad      	uxthmi	r5, r5
 8006334:	2f6f      	cmp	r7, #111	@ 0x6f
 8006336:	4852      	ldr	r0, [pc, #328]	@ (8006480 <_printf_i+0x234>)
 8006338:	6033      	str	r3, [r6, #0]
 800633a:	bf14      	ite	ne
 800633c:	230a      	movne	r3, #10
 800633e:	2308      	moveq	r3, #8
 8006340:	2100      	movs	r1, #0
 8006342:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006346:	6866      	ldr	r6, [r4, #4]
 8006348:	60a6      	str	r6, [r4, #8]
 800634a:	2e00      	cmp	r6, #0
 800634c:	db05      	blt.n	800635a <_printf_i+0x10e>
 800634e:	6821      	ldr	r1, [r4, #0]
 8006350:	432e      	orrs	r6, r5
 8006352:	f021 0104 	bic.w	r1, r1, #4
 8006356:	6021      	str	r1, [r4, #0]
 8006358:	d04b      	beq.n	80063f2 <_printf_i+0x1a6>
 800635a:	4616      	mov	r6, r2
 800635c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006360:	fb03 5711 	mls	r7, r3, r1, r5
 8006364:	5dc7      	ldrb	r7, [r0, r7]
 8006366:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800636a:	462f      	mov	r7, r5
 800636c:	42bb      	cmp	r3, r7
 800636e:	460d      	mov	r5, r1
 8006370:	d9f4      	bls.n	800635c <_printf_i+0x110>
 8006372:	2b08      	cmp	r3, #8
 8006374:	d10b      	bne.n	800638e <_printf_i+0x142>
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	07df      	lsls	r7, r3, #31
 800637a:	d508      	bpl.n	800638e <_printf_i+0x142>
 800637c:	6923      	ldr	r3, [r4, #16]
 800637e:	6861      	ldr	r1, [r4, #4]
 8006380:	4299      	cmp	r1, r3
 8006382:	bfde      	ittt	le
 8006384:	2330      	movle	r3, #48	@ 0x30
 8006386:	f806 3c01 	strble.w	r3, [r6, #-1]
 800638a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800638e:	1b92      	subs	r2, r2, r6
 8006390:	6122      	str	r2, [r4, #16]
 8006392:	f8cd a000 	str.w	sl, [sp]
 8006396:	464b      	mov	r3, r9
 8006398:	aa03      	add	r2, sp, #12
 800639a:	4621      	mov	r1, r4
 800639c:	4640      	mov	r0, r8
 800639e:	f7ff fee7 	bl	8006170 <_printf_common>
 80063a2:	3001      	adds	r0, #1
 80063a4:	d14a      	bne.n	800643c <_printf_i+0x1f0>
 80063a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80063aa:	b004      	add	sp, #16
 80063ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	f043 0320 	orr.w	r3, r3, #32
 80063b6:	6023      	str	r3, [r4, #0]
 80063b8:	4832      	ldr	r0, [pc, #200]	@ (8006484 <_printf_i+0x238>)
 80063ba:	2778      	movs	r7, #120	@ 0x78
 80063bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80063c0:	6823      	ldr	r3, [r4, #0]
 80063c2:	6831      	ldr	r1, [r6, #0]
 80063c4:	061f      	lsls	r7, r3, #24
 80063c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80063ca:	d402      	bmi.n	80063d2 <_printf_i+0x186>
 80063cc:	065f      	lsls	r7, r3, #25
 80063ce:	bf48      	it	mi
 80063d0:	b2ad      	uxthmi	r5, r5
 80063d2:	6031      	str	r1, [r6, #0]
 80063d4:	07d9      	lsls	r1, r3, #31
 80063d6:	bf44      	itt	mi
 80063d8:	f043 0320 	orrmi.w	r3, r3, #32
 80063dc:	6023      	strmi	r3, [r4, #0]
 80063de:	b11d      	cbz	r5, 80063e8 <_printf_i+0x19c>
 80063e0:	2310      	movs	r3, #16
 80063e2:	e7ad      	b.n	8006340 <_printf_i+0xf4>
 80063e4:	4826      	ldr	r0, [pc, #152]	@ (8006480 <_printf_i+0x234>)
 80063e6:	e7e9      	b.n	80063bc <_printf_i+0x170>
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	f023 0320 	bic.w	r3, r3, #32
 80063ee:	6023      	str	r3, [r4, #0]
 80063f0:	e7f6      	b.n	80063e0 <_printf_i+0x194>
 80063f2:	4616      	mov	r6, r2
 80063f4:	e7bd      	b.n	8006372 <_printf_i+0x126>
 80063f6:	6833      	ldr	r3, [r6, #0]
 80063f8:	6825      	ldr	r5, [r4, #0]
 80063fa:	6961      	ldr	r1, [r4, #20]
 80063fc:	1d18      	adds	r0, r3, #4
 80063fe:	6030      	str	r0, [r6, #0]
 8006400:	062e      	lsls	r6, r5, #24
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	d501      	bpl.n	800640a <_printf_i+0x1be>
 8006406:	6019      	str	r1, [r3, #0]
 8006408:	e002      	b.n	8006410 <_printf_i+0x1c4>
 800640a:	0668      	lsls	r0, r5, #25
 800640c:	d5fb      	bpl.n	8006406 <_printf_i+0x1ba>
 800640e:	8019      	strh	r1, [r3, #0]
 8006410:	2300      	movs	r3, #0
 8006412:	6123      	str	r3, [r4, #16]
 8006414:	4616      	mov	r6, r2
 8006416:	e7bc      	b.n	8006392 <_printf_i+0x146>
 8006418:	6833      	ldr	r3, [r6, #0]
 800641a:	1d1a      	adds	r2, r3, #4
 800641c:	6032      	str	r2, [r6, #0]
 800641e:	681e      	ldr	r6, [r3, #0]
 8006420:	6862      	ldr	r2, [r4, #4]
 8006422:	2100      	movs	r1, #0
 8006424:	4630      	mov	r0, r6
 8006426:	f7f9 fef3 	bl	8000210 <memchr>
 800642a:	b108      	cbz	r0, 8006430 <_printf_i+0x1e4>
 800642c:	1b80      	subs	r0, r0, r6
 800642e:	6060      	str	r0, [r4, #4]
 8006430:	6863      	ldr	r3, [r4, #4]
 8006432:	6123      	str	r3, [r4, #16]
 8006434:	2300      	movs	r3, #0
 8006436:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800643a:	e7aa      	b.n	8006392 <_printf_i+0x146>
 800643c:	6923      	ldr	r3, [r4, #16]
 800643e:	4632      	mov	r2, r6
 8006440:	4649      	mov	r1, r9
 8006442:	4640      	mov	r0, r8
 8006444:	47d0      	blx	sl
 8006446:	3001      	adds	r0, #1
 8006448:	d0ad      	beq.n	80063a6 <_printf_i+0x15a>
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	079b      	lsls	r3, r3, #30
 800644e:	d413      	bmi.n	8006478 <_printf_i+0x22c>
 8006450:	68e0      	ldr	r0, [r4, #12]
 8006452:	9b03      	ldr	r3, [sp, #12]
 8006454:	4298      	cmp	r0, r3
 8006456:	bfb8      	it	lt
 8006458:	4618      	movlt	r0, r3
 800645a:	e7a6      	b.n	80063aa <_printf_i+0x15e>
 800645c:	2301      	movs	r3, #1
 800645e:	4632      	mov	r2, r6
 8006460:	4649      	mov	r1, r9
 8006462:	4640      	mov	r0, r8
 8006464:	47d0      	blx	sl
 8006466:	3001      	adds	r0, #1
 8006468:	d09d      	beq.n	80063a6 <_printf_i+0x15a>
 800646a:	3501      	adds	r5, #1
 800646c:	68e3      	ldr	r3, [r4, #12]
 800646e:	9903      	ldr	r1, [sp, #12]
 8006470:	1a5b      	subs	r3, r3, r1
 8006472:	42ab      	cmp	r3, r5
 8006474:	dcf2      	bgt.n	800645c <_printf_i+0x210>
 8006476:	e7eb      	b.n	8006450 <_printf_i+0x204>
 8006478:	2500      	movs	r5, #0
 800647a:	f104 0619 	add.w	r6, r4, #25
 800647e:	e7f5      	b.n	800646c <_printf_i+0x220>
 8006480:	08006a65 	.word	0x08006a65
 8006484:	08006a76 	.word	0x08006a76

08006488 <__sflush_r>:
 8006488:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800648c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006490:	0716      	lsls	r6, r2, #28
 8006492:	4605      	mov	r5, r0
 8006494:	460c      	mov	r4, r1
 8006496:	d454      	bmi.n	8006542 <__sflush_r+0xba>
 8006498:	684b      	ldr	r3, [r1, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	dc02      	bgt.n	80064a4 <__sflush_r+0x1c>
 800649e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	dd48      	ble.n	8006536 <__sflush_r+0xae>
 80064a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064a6:	2e00      	cmp	r6, #0
 80064a8:	d045      	beq.n	8006536 <__sflush_r+0xae>
 80064aa:	2300      	movs	r3, #0
 80064ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80064b0:	682f      	ldr	r7, [r5, #0]
 80064b2:	6a21      	ldr	r1, [r4, #32]
 80064b4:	602b      	str	r3, [r5, #0]
 80064b6:	d030      	beq.n	800651a <__sflush_r+0x92>
 80064b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80064ba:	89a3      	ldrh	r3, [r4, #12]
 80064bc:	0759      	lsls	r1, r3, #29
 80064be:	d505      	bpl.n	80064cc <__sflush_r+0x44>
 80064c0:	6863      	ldr	r3, [r4, #4]
 80064c2:	1ad2      	subs	r2, r2, r3
 80064c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80064c6:	b10b      	cbz	r3, 80064cc <__sflush_r+0x44>
 80064c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80064ca:	1ad2      	subs	r2, r2, r3
 80064cc:	2300      	movs	r3, #0
 80064ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064d0:	6a21      	ldr	r1, [r4, #32]
 80064d2:	4628      	mov	r0, r5
 80064d4:	47b0      	blx	r6
 80064d6:	1c43      	adds	r3, r0, #1
 80064d8:	89a3      	ldrh	r3, [r4, #12]
 80064da:	d106      	bne.n	80064ea <__sflush_r+0x62>
 80064dc:	6829      	ldr	r1, [r5, #0]
 80064de:	291d      	cmp	r1, #29
 80064e0:	d82b      	bhi.n	800653a <__sflush_r+0xb2>
 80064e2:	4a2a      	ldr	r2, [pc, #168]	@ (800658c <__sflush_r+0x104>)
 80064e4:	40ca      	lsrs	r2, r1
 80064e6:	07d6      	lsls	r6, r2, #31
 80064e8:	d527      	bpl.n	800653a <__sflush_r+0xb2>
 80064ea:	2200      	movs	r2, #0
 80064ec:	6062      	str	r2, [r4, #4]
 80064ee:	04d9      	lsls	r1, r3, #19
 80064f0:	6922      	ldr	r2, [r4, #16]
 80064f2:	6022      	str	r2, [r4, #0]
 80064f4:	d504      	bpl.n	8006500 <__sflush_r+0x78>
 80064f6:	1c42      	adds	r2, r0, #1
 80064f8:	d101      	bne.n	80064fe <__sflush_r+0x76>
 80064fa:	682b      	ldr	r3, [r5, #0]
 80064fc:	b903      	cbnz	r3, 8006500 <__sflush_r+0x78>
 80064fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8006500:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006502:	602f      	str	r7, [r5, #0]
 8006504:	b1b9      	cbz	r1, 8006536 <__sflush_r+0xae>
 8006506:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800650a:	4299      	cmp	r1, r3
 800650c:	d002      	beq.n	8006514 <__sflush_r+0x8c>
 800650e:	4628      	mov	r0, r5
 8006510:	f7ff fa9c 	bl	8005a4c <_free_r>
 8006514:	2300      	movs	r3, #0
 8006516:	6363      	str	r3, [r4, #52]	@ 0x34
 8006518:	e00d      	b.n	8006536 <__sflush_r+0xae>
 800651a:	2301      	movs	r3, #1
 800651c:	4628      	mov	r0, r5
 800651e:	47b0      	blx	r6
 8006520:	4602      	mov	r2, r0
 8006522:	1c50      	adds	r0, r2, #1
 8006524:	d1c9      	bne.n	80064ba <__sflush_r+0x32>
 8006526:	682b      	ldr	r3, [r5, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d0c6      	beq.n	80064ba <__sflush_r+0x32>
 800652c:	2b1d      	cmp	r3, #29
 800652e:	d001      	beq.n	8006534 <__sflush_r+0xac>
 8006530:	2b16      	cmp	r3, #22
 8006532:	d11e      	bne.n	8006572 <__sflush_r+0xea>
 8006534:	602f      	str	r7, [r5, #0]
 8006536:	2000      	movs	r0, #0
 8006538:	e022      	b.n	8006580 <__sflush_r+0xf8>
 800653a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800653e:	b21b      	sxth	r3, r3
 8006540:	e01b      	b.n	800657a <__sflush_r+0xf2>
 8006542:	690f      	ldr	r7, [r1, #16]
 8006544:	2f00      	cmp	r7, #0
 8006546:	d0f6      	beq.n	8006536 <__sflush_r+0xae>
 8006548:	0793      	lsls	r3, r2, #30
 800654a:	680e      	ldr	r6, [r1, #0]
 800654c:	bf08      	it	eq
 800654e:	694b      	ldreq	r3, [r1, #20]
 8006550:	600f      	str	r7, [r1, #0]
 8006552:	bf18      	it	ne
 8006554:	2300      	movne	r3, #0
 8006556:	eba6 0807 	sub.w	r8, r6, r7
 800655a:	608b      	str	r3, [r1, #8]
 800655c:	f1b8 0f00 	cmp.w	r8, #0
 8006560:	dde9      	ble.n	8006536 <__sflush_r+0xae>
 8006562:	6a21      	ldr	r1, [r4, #32]
 8006564:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006566:	4643      	mov	r3, r8
 8006568:	463a      	mov	r2, r7
 800656a:	4628      	mov	r0, r5
 800656c:	47b0      	blx	r6
 800656e:	2800      	cmp	r0, #0
 8006570:	dc08      	bgt.n	8006584 <__sflush_r+0xfc>
 8006572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800657a:	81a3      	strh	r3, [r4, #12]
 800657c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006584:	4407      	add	r7, r0
 8006586:	eba8 0800 	sub.w	r8, r8, r0
 800658a:	e7e7      	b.n	800655c <__sflush_r+0xd4>
 800658c:	20400001 	.word	0x20400001

08006590 <_fflush_r>:
 8006590:	b538      	push	{r3, r4, r5, lr}
 8006592:	690b      	ldr	r3, [r1, #16]
 8006594:	4605      	mov	r5, r0
 8006596:	460c      	mov	r4, r1
 8006598:	b913      	cbnz	r3, 80065a0 <_fflush_r+0x10>
 800659a:	2500      	movs	r5, #0
 800659c:	4628      	mov	r0, r5
 800659e:	bd38      	pop	{r3, r4, r5, pc}
 80065a0:	b118      	cbz	r0, 80065aa <_fflush_r+0x1a>
 80065a2:	6a03      	ldr	r3, [r0, #32]
 80065a4:	b90b      	cbnz	r3, 80065aa <_fflush_r+0x1a>
 80065a6:	f7fe fff9 	bl	800559c <__sinit>
 80065aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d0f3      	beq.n	800659a <_fflush_r+0xa>
 80065b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80065b4:	07d0      	lsls	r0, r2, #31
 80065b6:	d404      	bmi.n	80065c2 <_fflush_r+0x32>
 80065b8:	0599      	lsls	r1, r3, #22
 80065ba:	d402      	bmi.n	80065c2 <_fflush_r+0x32>
 80065bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065be:	f7ff fa42 	bl	8005a46 <__retarget_lock_acquire_recursive>
 80065c2:	4628      	mov	r0, r5
 80065c4:	4621      	mov	r1, r4
 80065c6:	f7ff ff5f 	bl	8006488 <__sflush_r>
 80065ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065cc:	07da      	lsls	r2, r3, #31
 80065ce:	4605      	mov	r5, r0
 80065d0:	d4e4      	bmi.n	800659c <_fflush_r+0xc>
 80065d2:	89a3      	ldrh	r3, [r4, #12]
 80065d4:	059b      	lsls	r3, r3, #22
 80065d6:	d4e1      	bmi.n	800659c <_fflush_r+0xc>
 80065d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065da:	f7ff fa35 	bl	8005a48 <__retarget_lock_release_recursive>
 80065de:	e7dd      	b.n	800659c <_fflush_r+0xc>

080065e0 <__swhatbuf_r>:
 80065e0:	b570      	push	{r4, r5, r6, lr}
 80065e2:	460c      	mov	r4, r1
 80065e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065e8:	2900      	cmp	r1, #0
 80065ea:	b096      	sub	sp, #88	@ 0x58
 80065ec:	4615      	mov	r5, r2
 80065ee:	461e      	mov	r6, r3
 80065f0:	da0d      	bge.n	800660e <__swhatbuf_r+0x2e>
 80065f2:	89a3      	ldrh	r3, [r4, #12]
 80065f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80065f8:	f04f 0100 	mov.w	r1, #0
 80065fc:	bf14      	ite	ne
 80065fe:	2340      	movne	r3, #64	@ 0x40
 8006600:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006604:	2000      	movs	r0, #0
 8006606:	6031      	str	r1, [r6, #0]
 8006608:	602b      	str	r3, [r5, #0]
 800660a:	b016      	add	sp, #88	@ 0x58
 800660c:	bd70      	pop	{r4, r5, r6, pc}
 800660e:	466a      	mov	r2, sp
 8006610:	f000 f862 	bl	80066d8 <_fstat_r>
 8006614:	2800      	cmp	r0, #0
 8006616:	dbec      	blt.n	80065f2 <__swhatbuf_r+0x12>
 8006618:	9901      	ldr	r1, [sp, #4]
 800661a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800661e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006622:	4259      	negs	r1, r3
 8006624:	4159      	adcs	r1, r3
 8006626:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800662a:	e7eb      	b.n	8006604 <__swhatbuf_r+0x24>

0800662c <__smakebuf_r>:
 800662c:	898b      	ldrh	r3, [r1, #12]
 800662e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006630:	079d      	lsls	r5, r3, #30
 8006632:	4606      	mov	r6, r0
 8006634:	460c      	mov	r4, r1
 8006636:	d507      	bpl.n	8006648 <__smakebuf_r+0x1c>
 8006638:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800663c:	6023      	str	r3, [r4, #0]
 800663e:	6123      	str	r3, [r4, #16]
 8006640:	2301      	movs	r3, #1
 8006642:	6163      	str	r3, [r4, #20]
 8006644:	b003      	add	sp, #12
 8006646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006648:	ab01      	add	r3, sp, #4
 800664a:	466a      	mov	r2, sp
 800664c:	f7ff ffc8 	bl	80065e0 <__swhatbuf_r>
 8006650:	9f00      	ldr	r7, [sp, #0]
 8006652:	4605      	mov	r5, r0
 8006654:	4639      	mov	r1, r7
 8006656:	4630      	mov	r0, r6
 8006658:	f7ff fa64 	bl	8005b24 <_malloc_r>
 800665c:	b948      	cbnz	r0, 8006672 <__smakebuf_r+0x46>
 800665e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006662:	059a      	lsls	r2, r3, #22
 8006664:	d4ee      	bmi.n	8006644 <__smakebuf_r+0x18>
 8006666:	f023 0303 	bic.w	r3, r3, #3
 800666a:	f043 0302 	orr.w	r3, r3, #2
 800666e:	81a3      	strh	r3, [r4, #12]
 8006670:	e7e2      	b.n	8006638 <__smakebuf_r+0xc>
 8006672:	89a3      	ldrh	r3, [r4, #12]
 8006674:	6020      	str	r0, [r4, #0]
 8006676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800667a:	81a3      	strh	r3, [r4, #12]
 800667c:	9b01      	ldr	r3, [sp, #4]
 800667e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006682:	b15b      	cbz	r3, 800669c <__smakebuf_r+0x70>
 8006684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006688:	4630      	mov	r0, r6
 800668a:	f000 f837 	bl	80066fc <_isatty_r>
 800668e:	b128      	cbz	r0, 800669c <__smakebuf_r+0x70>
 8006690:	89a3      	ldrh	r3, [r4, #12]
 8006692:	f023 0303 	bic.w	r3, r3, #3
 8006696:	f043 0301 	orr.w	r3, r3, #1
 800669a:	81a3      	strh	r3, [r4, #12]
 800669c:	89a3      	ldrh	r3, [r4, #12]
 800669e:	431d      	orrs	r5, r3
 80066a0:	81a5      	strh	r5, [r4, #12]
 80066a2:	e7cf      	b.n	8006644 <__smakebuf_r+0x18>

080066a4 <memmove>:
 80066a4:	4288      	cmp	r0, r1
 80066a6:	b510      	push	{r4, lr}
 80066a8:	eb01 0402 	add.w	r4, r1, r2
 80066ac:	d902      	bls.n	80066b4 <memmove+0x10>
 80066ae:	4284      	cmp	r4, r0
 80066b0:	4623      	mov	r3, r4
 80066b2:	d807      	bhi.n	80066c4 <memmove+0x20>
 80066b4:	1e43      	subs	r3, r0, #1
 80066b6:	42a1      	cmp	r1, r4
 80066b8:	d008      	beq.n	80066cc <memmove+0x28>
 80066ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066c2:	e7f8      	b.n	80066b6 <memmove+0x12>
 80066c4:	4402      	add	r2, r0
 80066c6:	4601      	mov	r1, r0
 80066c8:	428a      	cmp	r2, r1
 80066ca:	d100      	bne.n	80066ce <memmove+0x2a>
 80066cc:	bd10      	pop	{r4, pc}
 80066ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066d6:	e7f7      	b.n	80066c8 <memmove+0x24>

080066d8 <_fstat_r>:
 80066d8:	b538      	push	{r3, r4, r5, lr}
 80066da:	4d07      	ldr	r5, [pc, #28]	@ (80066f8 <_fstat_r+0x20>)
 80066dc:	2300      	movs	r3, #0
 80066de:	4604      	mov	r4, r0
 80066e0:	4608      	mov	r0, r1
 80066e2:	4611      	mov	r1, r2
 80066e4:	602b      	str	r3, [r5, #0]
 80066e6:	f7fa fa8c 	bl	8000c02 <_fstat>
 80066ea:	1c43      	adds	r3, r0, #1
 80066ec:	d102      	bne.n	80066f4 <_fstat_r+0x1c>
 80066ee:	682b      	ldr	r3, [r5, #0]
 80066f0:	b103      	cbz	r3, 80066f4 <_fstat_r+0x1c>
 80066f2:	6023      	str	r3, [r4, #0]
 80066f4:	bd38      	pop	{r3, r4, r5, pc}
 80066f6:	bf00      	nop
 80066f8:	20001008 	.word	0x20001008

080066fc <_isatty_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	4d06      	ldr	r5, [pc, #24]	@ (8006718 <_isatty_r+0x1c>)
 8006700:	2300      	movs	r3, #0
 8006702:	4604      	mov	r4, r0
 8006704:	4608      	mov	r0, r1
 8006706:	602b      	str	r3, [r5, #0]
 8006708:	f7fa fa80 	bl	8000c0c <_isatty>
 800670c:	1c43      	adds	r3, r0, #1
 800670e:	d102      	bne.n	8006716 <_isatty_r+0x1a>
 8006710:	682b      	ldr	r3, [r5, #0]
 8006712:	b103      	cbz	r3, 8006716 <_isatty_r+0x1a>
 8006714:	6023      	str	r3, [r4, #0]
 8006716:	bd38      	pop	{r3, r4, r5, pc}
 8006718:	20001008 	.word	0x20001008

0800671c <_sbrk_r>:
 800671c:	b538      	push	{r3, r4, r5, lr}
 800671e:	4d06      	ldr	r5, [pc, #24]	@ (8006738 <_sbrk_r+0x1c>)
 8006720:	2300      	movs	r3, #0
 8006722:	4604      	mov	r4, r0
 8006724:	4608      	mov	r0, r1
 8006726:	602b      	str	r3, [r5, #0]
 8006728:	f7fa fa74 	bl	8000c14 <_sbrk>
 800672c:	1c43      	adds	r3, r0, #1
 800672e:	d102      	bne.n	8006736 <_sbrk_r+0x1a>
 8006730:	682b      	ldr	r3, [r5, #0]
 8006732:	b103      	cbz	r3, 8006736 <_sbrk_r+0x1a>
 8006734:	6023      	str	r3, [r4, #0]
 8006736:	bd38      	pop	{r3, r4, r5, pc}
 8006738:	20001008 	.word	0x20001008

0800673c <memcpy>:
 800673c:	440a      	add	r2, r1
 800673e:	4291      	cmp	r1, r2
 8006740:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006744:	d100      	bne.n	8006748 <memcpy+0xc>
 8006746:	4770      	bx	lr
 8006748:	b510      	push	{r4, lr}
 800674a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800674e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006752:	4291      	cmp	r1, r2
 8006754:	d1f9      	bne.n	800674a <memcpy+0xe>
 8006756:	bd10      	pop	{r4, pc}

08006758 <_realloc_r>:
 8006758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800675c:	4607      	mov	r7, r0
 800675e:	4614      	mov	r4, r2
 8006760:	460d      	mov	r5, r1
 8006762:	b921      	cbnz	r1, 800676e <_realloc_r+0x16>
 8006764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006768:	4611      	mov	r1, r2
 800676a:	f7ff b9db 	b.w	8005b24 <_malloc_r>
 800676e:	b92a      	cbnz	r2, 800677c <_realloc_r+0x24>
 8006770:	f7ff f96c 	bl	8005a4c <_free_r>
 8006774:	4625      	mov	r5, r4
 8006776:	4628      	mov	r0, r5
 8006778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800677c:	f000 f81a 	bl	80067b4 <_malloc_usable_size_r>
 8006780:	4284      	cmp	r4, r0
 8006782:	4606      	mov	r6, r0
 8006784:	d802      	bhi.n	800678c <_realloc_r+0x34>
 8006786:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800678a:	d8f4      	bhi.n	8006776 <_realloc_r+0x1e>
 800678c:	4621      	mov	r1, r4
 800678e:	4638      	mov	r0, r7
 8006790:	f7ff f9c8 	bl	8005b24 <_malloc_r>
 8006794:	4680      	mov	r8, r0
 8006796:	b908      	cbnz	r0, 800679c <_realloc_r+0x44>
 8006798:	4645      	mov	r5, r8
 800679a:	e7ec      	b.n	8006776 <_realloc_r+0x1e>
 800679c:	42b4      	cmp	r4, r6
 800679e:	4622      	mov	r2, r4
 80067a0:	4629      	mov	r1, r5
 80067a2:	bf28      	it	cs
 80067a4:	4632      	movcs	r2, r6
 80067a6:	f7ff ffc9 	bl	800673c <memcpy>
 80067aa:	4629      	mov	r1, r5
 80067ac:	4638      	mov	r0, r7
 80067ae:	f7ff f94d 	bl	8005a4c <_free_r>
 80067b2:	e7f1      	b.n	8006798 <_realloc_r+0x40>

080067b4 <_malloc_usable_size_r>:
 80067b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067b8:	1f18      	subs	r0, r3, #4
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	bfbc      	itt	lt
 80067be:	580b      	ldrlt	r3, [r1, r0]
 80067c0:	18c0      	addlt	r0, r0, r3
 80067c2:	4770      	bx	lr

080067c4 <_init>:
 80067c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c6:	bf00      	nop
 80067c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ca:	bc08      	pop	{r3}
 80067cc:	469e      	mov	lr, r3
 80067ce:	4770      	bx	lr

080067d0 <_fini>:
 80067d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d2:	bf00      	nop
 80067d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067d6:	bc08      	pop	{r3}
 80067d8:	469e      	mov	lr, r3
 80067da:	4770      	bx	lr
