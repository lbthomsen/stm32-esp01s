
blackpill_f411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f9c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800613c  0800613c  0000713c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006284  08006284  00008154  2**0
                  CONTENTS
  4 .ARM          00000008  08006284  08006284  00007284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800628c  0800628c  00008154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800628c  0800628c  0000728c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006290  08006290  00007290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000154  20000000  08006294  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000208c  20000154  080063e8  00008154  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200021e0  080063e8  000081e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008154  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017709  00000000  00000000  00008184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b03  00000000  00000000  0001f88d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00008f1b  00000000  00000000  00023390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef8  00000000  00000000  0002c2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b1b  00000000  00000000  0002d1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001960a  00000000  00000000  0002dcc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017cb0  00000000  00000000  000472cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bc86  00000000  00000000  0005ef7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000eac03  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e58  00000000  00000000  000eac48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  000edaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000154 	.word	0x20000154
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006124 	.word	0x08006124

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000158 	.word	0x20000158
 80001dc:	08006124 	.word	0x08006124

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	b088      	sub	sp, #32
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80005a4:	2400      	movs	r4, #0
 80005a6:	9403      	str	r4, [sp, #12]
 80005a8:	9404      	str	r4, [sp, #16]
 80005aa:	9405      	str	r4, [sp, #20]
 80005ac:	9406      	str	r4, [sp, #24]
 80005ae:	9407      	str	r4, [sp, #28]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b0:	9400      	str	r4, [sp, #0]
 80005b2:	4b21      	ldr	r3, [pc, #132]	@ (8000638 <MX_GPIO_Init+0x98>)
 80005b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005b6:	f042 0204 	orr.w	r2, r2, #4
 80005ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80005bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005be:	f002 0204 	and.w	r2, r2, #4
 80005c2:	9200      	str	r2, [sp, #0]
 80005c4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c6:	9401      	str	r4, [sp, #4]
 80005c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80005ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80005d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005d2:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80005d6:	9201      	str	r2, [sp, #4]
 80005d8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	9402      	str	r4, [sp, #8]
 80005dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005de:	f042 0201 	orr.w	r2, r2, #1
 80005e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	9302      	str	r3, [sp, #8]
 80005ec:	9b02      	ldr	r3, [sp, #8]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80005ee:	4e13      	ldr	r6, [pc, #76]	@ (800063c <MX_GPIO_Init+0x9c>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005f6:	4630      	mov	r0, r6
 80005f8:	f000 fed8 	bl	80013ac <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_SET);
 80005fc:	4d10      	ldr	r5, [pc, #64]	@ (8000640 <MX_GPIO_Init+0xa0>)
 80005fe:	2201      	movs	r2, #1
 8000600:	2120      	movs	r1, #32
 8000602:	4628      	mov	r0, r5
 8000604:	f000 fed2 	bl	80013ac <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_Pin */
    GPIO_InitStruct.Pin = LED_Pin;
 8000608:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800060c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800060e:	2311      	movs	r3, #17
 8000610:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000616:	a903      	add	r1, sp, #12
 8000618:	4630      	mov	r0, r6
 800061a:	f000 fde3 	bl	80011e4 <HAL_GPIO_Init>

    /*Configure GPIO pin : ESP_EN_Pin */
    GPIO_InitStruct.Pin = ESP_EN_Pin;
 800061e:	2320      	movs	r3, #32
 8000620:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000622:	2301      	movs	r3, #1
 8000624:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(ESP_EN_GPIO_Port, &GPIO_InitStruct);
 800062a:	a903      	add	r1, sp, #12
 800062c:	4628      	mov	r0, r5
 800062e:	f000 fdd9 	bl	80011e4 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000632:	b008      	add	sp, #32
 8000634:	bd70      	pop	{r4, r5, r6, pc}
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800
 800063c:	40020800 	.word	0x40020800
 8000640:	40020000 	.word	0x40020000

08000644 <MX_DMA_Init>:
{
 8000644:	b500      	push	{lr}
 8000646:	b083      	sub	sp, #12
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000648:	2100      	movs	r1, #0
 800064a:	9101      	str	r1, [sp, #4]
 800064c:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <MX_DMA_Init+0x30>)
 800064e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000650:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000654:	631a      	str	r2, [r3, #48]	@ 0x30
 8000656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000658:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000660:	460a      	mov	r2, r1
 8000662:	2010      	movs	r0, #16
 8000664:	f000 fb30 	bl	8000cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000668:	2010      	movs	r0, #16
 800066a:	f000 fb3d 	bl	8000ce8 <HAL_NVIC_EnableIRQ>
}
 800066e:	b003      	add	sp, #12
 8000670:	f85d fb04 	ldr.w	pc, [sp], #4
 8000674:	40023800 	.word	0x40023800

08000678 <_write>:
    if (fd == 1 || fd == 2) {
 8000678:	3801      	subs	r0, #1
 800067a:	2801      	cmp	r0, #1
 800067c:	d80a      	bhi.n	8000694 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 800067e:	b510      	push	{r4, lr}
 8000680:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000682:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000686:	b292      	uxth	r2, r2
 8000688:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <_write+0x28>)
 800068a:	f002 f966 	bl	800295a <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 800068e:	b920      	cbnz	r0, 800069a <_write+0x22>
            return len;
 8000690:	4620      	mov	r0, r4
}
 8000692:	bd10      	pop	{r4, pc}
    return -1;
 8000694:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000698:	4770      	bx	lr
            return -1;
 800069a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800069e:	e7f8      	b.n	8000692 <_write+0x1a>
 80006a0:	20000260 	.word	0x20000260

080006a4 <HAL_UARTEx_RxEventCallback>:
    if (huart->Instance == USART2) {
 80006a4:	6802      	ldr	r2, [r0, #0]
 80006a6:	4b0e      	ldr	r3, [pc, #56]	@ (80006e0 <HAL_UARTEx_RxEventCallback+0x3c>)
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d000      	beq.n	80006ae <HAL_UARTEx_RxEventCallback+0xa>
 80006ac:	4770      	bx	lr
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t offset) {
 80006ae:	b510      	push	{r4, lr}
 80006b0:	460c      	mov	r4, r1
        if (offset != last_offset) {
 80006b2:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <HAL_UARTEx_RxEventCallback+0x40>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	428b      	cmp	r3, r1
 80006b8:	d010      	beq.n	80006dc <HAL_UARTEx_RxEventCallback+0x38>
            if (offset < last_offset)
 80006ba:	d90b      	bls.n	80006d4 <HAL_UARTEx_RxEventCallback+0x30>
                last_offset = 0;
 80006bc:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <HAL_UARTEx_RxEventCallback+0x40>)
 80006be:	2200      	movs	r2, #0
 80006c0:	801a      	strh	r2, [r3, #0]
 80006c2:	e007      	b.n	80006d4 <HAL_UARTEx_RxEventCallback+0x30>
                esp01_receive((char) dmabuf[last_offset]);
 80006c4:	4a08      	ldr	r2, [pc, #32]	@ (80006e8 <HAL_UARTEx_RxEventCallback+0x44>)
 80006c6:	5cd0      	ldrb	r0, [r2, r3]
 80006c8:	f004 fd54 	bl	8005174 <esp01_receive>
                ++last_offset;
 80006cc:	4a05      	ldr	r2, [pc, #20]	@ (80006e4 <HAL_UARTEx_RxEventCallback+0x40>)
 80006ce:	8813      	ldrh	r3, [r2, #0]
 80006d0:	3301      	adds	r3, #1
 80006d2:	8013      	strh	r3, [r2, #0]
            while (last_offset < offset) {
 80006d4:	4b03      	ldr	r3, [pc, #12]	@ (80006e4 <HAL_UARTEx_RxEventCallback+0x40>)
 80006d6:	881b      	ldrh	r3, [r3, #0]
 80006d8:	42a3      	cmp	r3, r4
 80006da:	d3f3      	bcc.n	80006c4 <HAL_UARTEx_RxEventCallback+0x20>
}
 80006dc:	bd10      	pop	{r4, pc}
 80006de:	bf00      	nop
 80006e0:	40004400 	.word	0x40004400
 80006e4:	20000170 	.word	0x20000170
 80006e8:	20000174 	.word	0x20000174

080006ec <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ec:	b672      	cpsid	i
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80006ee:	e7fe      	b.n	80006ee <Error_Handler+0x2>

080006f0 <MX_USART1_UART_Init>:
{
 80006f0:	b508      	push	{r3, lr}
    huart1.Instance = USART1;
 80006f2:	480a      	ldr	r0, [pc, #40]	@ (800071c <MX_USART1_UART_Init+0x2c>)
 80006f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <MX_USART1_UART_Init+0x30>)
 80006f6:	6003      	str	r3, [r0, #0]
    huart1.Init.BaudRate = 2000000;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000724 <MX_USART1_UART_Init+0x34>)
 80006fa:	6043      	str	r3, [r0, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006fc:	2300      	movs	r3, #0
 80006fe:	6083      	str	r3, [r0, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000700:	60c3      	str	r3, [r0, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000702:	6103      	str	r3, [r0, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000704:	220c      	movs	r2, #12
 8000706:	6142      	str	r2, [r0, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000708:	6183      	str	r3, [r0, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 800070a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800070e:	61c3      	str	r3, [r0, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8000710:	f002 f8f3 	bl	80028fa <HAL_UART_Init>
 8000714:	b900      	cbnz	r0, 8000718 <MX_USART1_UART_Init+0x28>
}
 8000716:	bd08      	pop	{r3, pc}
        Error_Handler();
 8000718:	f7ff ffe8 	bl	80006ec <Error_Handler>
 800071c:	20000260 	.word	0x20000260
 8000720:	40011000 	.word	0x40011000
 8000724:	001e8480 	.word	0x001e8480

08000728 <MX_USART2_UART_Init>:
{
 8000728:	b508      	push	{r3, lr}
    huart2.Instance = USART2;
 800072a:	480a      	ldr	r0, [pc, #40]	@ (8000754 <MX_USART2_UART_Init+0x2c>)
 800072c:	4b0a      	ldr	r3, [pc, #40]	@ (8000758 <MX_USART2_UART_Init+0x30>)
 800072e:	6003      	str	r3, [r0, #0]
    huart2.Init.BaudRate = 115200;
 8000730:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000734:	6043      	str	r3, [r0, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	2300      	movs	r3, #0
 8000738:	6083      	str	r3, [r0, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800073a:	60c3      	str	r3, [r0, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800073c:	6103      	str	r3, [r0, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 800073e:	220c      	movs	r2, #12
 8000740:	6142      	str	r2, [r0, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	6183      	str	r3, [r0, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	61c3      	str	r3, [r0, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8000746:	f002 f8d8 	bl	80028fa <HAL_UART_Init>
 800074a:	b900      	cbnz	r0, 800074e <MX_USART2_UART_Init+0x26>
}
 800074c:	bd08      	pop	{r3, pc}
        Error_Handler();
 800074e:	f7ff ffcd 	bl	80006ec <Error_Handler>
 8000752:	bf00      	nop
 8000754:	20000218 	.word	0x20000218
 8000758:	40004400 	.word	0x40004400

0800075c <SystemClock_Config>:
{
 800075c:	b500      	push	{lr}
 800075e:	b095      	sub	sp, #84	@ 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000760:	2230      	movs	r2, #48	@ 0x30
 8000762:	2100      	movs	r1, #0
 8000764:	a808      	add	r0, sp, #32
 8000766:	f004 ff33 	bl	80055d0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800076a:	2300      	movs	r3, #0
 800076c:	9303      	str	r3, [sp, #12]
 800076e:	9304      	str	r3, [sp, #16]
 8000770:	9305      	str	r3, [sp, #20]
 8000772:	9306      	str	r3, [sp, #24]
 8000774:	9307      	str	r3, [sp, #28]
    __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	9301      	str	r3, [sp, #4]
 8000778:	4a1f      	ldr	r2, [pc, #124]	@ (80007f8 <SystemClock_Config+0x9c>)
 800077a:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800077c:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000780:	6411      	str	r1, [r2, #64]	@ 0x40
 8000782:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000784:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000788:	9201      	str	r2, [sp, #4]
 800078a:	9a01      	ldr	r2, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800078c:	9302      	str	r3, [sp, #8]
 800078e:	4b1b      	ldr	r3, [pc, #108]	@ (80007fc <SystemClock_Config+0xa0>)
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800079e:	9302      	str	r3, [sp, #8]
 80007a0:	9b02      	ldr	r3, [sp, #8]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a2:	2301      	movs	r3, #1
 80007a4:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007aa:	9309      	str	r3, [sp, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ac:	2302      	movs	r3, #2
 80007ae:	930e      	str	r3, [sp, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80007b4:	920f      	str	r2, [sp, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 25;
 80007b6:	2219      	movs	r2, #25
 80007b8:	9210      	str	r2, [sp, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 192;
 80007ba:	22c0      	movs	r2, #192	@ 0xc0
 80007bc:	9211      	str	r2, [sp, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007be:	9312      	str	r3, [sp, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80007c0:	2304      	movs	r3, #4
 80007c2:	9313      	str	r3, [sp, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	a808      	add	r0, sp, #32
 80007c6:	f001 fc39 	bl	800203c <HAL_RCC_OscConfig>
 80007ca:	b988      	cbnz	r0, 80007f0 <SystemClock_Config+0x94>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007cc:	230f      	movs	r3, #15
 80007ce:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d0:	2302      	movs	r3, #2
 80007d2:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80007dc:	9206      	str	r2, [sp, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007de:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007e0:	2103      	movs	r1, #3
 80007e2:	a803      	add	r0, sp, #12
 80007e4:	f001 fe7a 	bl	80024dc <HAL_RCC_ClockConfig>
 80007e8:	b920      	cbnz	r0, 80007f4 <SystemClock_Config+0x98>
}
 80007ea:	b015      	add	sp, #84	@ 0x54
 80007ec:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 80007f0:	f7ff ff7c 	bl	80006ec <Error_Handler>
        Error_Handler();
 80007f4:	f7ff ff7a 	bl	80006ec <Error_Handler>
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000

08000800 <main>:
{
 8000800:	b510      	push	{r4, lr}
    HAL_Init();
 8000802:	f000 f9cd 	bl	8000ba0 <HAL_Init>
    SystemClock_Config();
 8000806:	f7ff ffa9 	bl	800075c <SystemClock_Config>
    MX_GPIO_Init();
 800080a:	f7ff fec9 	bl	80005a0 <MX_GPIO_Init>
    MX_DMA_Init();
 800080e:	f7ff ff19 	bl	8000644 <MX_DMA_Init>
    MX_USART1_UART_Init();
 8000812:	f7ff ff6d 	bl	80006f0 <MX_USART1_UART_Init>
    MX_USART2_UART_Init();
 8000816:	f7ff ff87 	bl	8000728 <MX_USART2_UART_Init>
    MX_USB_DEVICE_Init();
 800081a:	f004 f9eb 	bl	8004bf4 <MX_USB_DEVICE_Init>
    printf("\n\n\n------------------\nStarting WiFi Demo\n");
 800081e:	481c      	ldr	r0, [pc, #112]	@ (8000890 <main+0x90>)
 8000820:	f004 fdf6 	bl	8005410 <puts>
    HAL_Delay(100);
 8000824:	2064      	movs	r0, #100	@ 0x64
 8000826:	f000 f9e7 	bl	8000bf8 <HAL_Delay>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t*) &dmabuf, DMA_BUFFER_SIZE);
 800082a:	4c1a      	ldr	r4, [pc, #104]	@ (8000894 <main+0x94>)
 800082c:	2240      	movs	r2, #64	@ 0x40
 800082e:	491a      	ldr	r1, [pc, #104]	@ (8000898 <main+0x98>)
 8000830:	4620      	mov	r0, r4
 8000832:	f002 fba1 	bl	8002f78 <HAL_UARTEx_ReceiveToIdle_DMA>
    HAL_Delay(500); // Wait for the darn thing to reboot
 8000836:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800083a:	f000 f9dd 	bl	8000bf8 <HAL_Delay>
    printf("Initialising WiFI\n");
 800083e:	4817      	ldr	r0, [pc, #92]	@ (800089c <main+0x9c>)
 8000840:	f004 fde6 	bl	8005410 <puts>
    if (esp01_init(&esp01, &huart2) != ESP01_OK) {
 8000844:	4621      	mov	r1, r4
 8000846:	4816      	ldr	r0, [pc, #88]	@ (80008a0 <main+0xa0>)
 8000848:	f004 fc52 	bl	80050f0 <esp01_init>
 800084c:	b9b8      	cbnz	r0, 800087e <main+0x7e>
    printf("Trying to reset\n");
 800084e:	4815      	ldr	r0, [pc, #84]	@ (80008a4 <main+0xa4>)
 8000850:	f004 fdde 	bl	8005410 <puts>
    if (esp01_reset(&esp01) != ESP01_OK) {
 8000854:	4812      	ldr	r0, [pc, #72]	@ (80008a0 <main+0xa0>)
 8000856:	f004 fc23 	bl	80050a0 <esp01_reset>
 800085a:	b9a0      	cbnz	r0, 8000886 <main+0x86>
    printf("Done\n");
 800085c:	4812      	ldr	r0, [pc, #72]	@ (80008a8 <main+0xa8>)
 800085e:	f004 fdd7 	bl	8005410 <puts>
    uint32_t now = 0, next_blink = 500;
 8000862:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
        now = uwTick;
 8000866:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <main+0xac>)
 8000868:	681c      	ldr	r4, [r3, #0]
        if (now >= next_blink) {
 800086a:	42a2      	cmp	r2, r4
 800086c:	d8fb      	bhi.n	8000866 <main+0x66>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800086e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000872:	480f      	ldr	r0, [pc, #60]	@ (80008b0 <main+0xb0>)
 8000874:	f000 fda0 	bl	80013b8 <HAL_GPIO_TogglePin>
            next_blink = now + 500;
 8000878:	f504 72fa 	add.w	r2, r4, #500	@ 0x1f4
 800087c:	e7f3      	b.n	8000866 <main+0x66>
        printf("Some error\n");
 800087e:	480d      	ldr	r0, [pc, #52]	@ (80008b4 <main+0xb4>)
 8000880:	f004 fdc6 	bl	8005410 <puts>
 8000884:	e7e3      	b.n	800084e <main+0x4e>
        printf("Failed\n");
 8000886:	480c      	ldr	r0, [pc, #48]	@ (80008b8 <main+0xb8>)
 8000888:	f004 fdc2 	bl	8005410 <puts>
 800088c:	e7e6      	b.n	800085c <main+0x5c>
 800088e:	bf00      	nop
 8000890:	0800613c 	.word	0x0800613c
 8000894:	20000218 	.word	0x20000218
 8000898:	20000174 	.word	0x20000174
 800089c:	08006168 	.word	0x08006168
 80008a0:	200001b4 	.word	0x200001b4
 80008a4:	08006188 	.word	0x08006188
 80008a8:	080061a0 	.word	0x080061a0
 80008ac:	200002ac 	.word	0x200002ac
 80008b0:	40020800 	.word	0x40020800
 80008b4:	0800617c 	.word	0x0800617c
 80008b8:	08006198 	.word	0x08006198

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	2100      	movs	r1, #0
 80008c0:	9100      	str	r1, [sp, #0]
 80008c2:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <HAL_MspInit+0x34>)
 80008c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80008ca:	645a      	str	r2, [r3, #68]	@ 0x44
 80008cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008ce:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80008d2:	9200      	str	r2, [sp, #0]
 80008d4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	9101      	str	r1, [sp, #4]
 80008d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008da:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80008de:	641a      	str	r2, [r3, #64]	@ 0x40
 80008e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e6:	9301      	str	r3, [sp, #4]
 80008e8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	b002      	add	sp, #8
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800

080008f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f4:	b530      	push	{r4, r5, lr}
 80008f6:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	2300      	movs	r3, #0
 80008fa:	9305      	str	r3, [sp, #20]
 80008fc:	9306      	str	r3, [sp, #24]
 80008fe:	9307      	str	r3, [sp, #28]
 8000900:	9308      	str	r3, [sp, #32]
 8000902:	9309      	str	r3, [sp, #36]	@ 0x24
  if(huart->Instance==USART1)
 8000904:	6803      	ldr	r3, [r0, #0]
 8000906:	4a3d      	ldr	r2, [pc, #244]	@ (80009fc <HAL_UART_MspInit+0x108>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d005      	beq.n	8000918 <HAL_UART_MspInit+0x24>
 800090c:	4604      	mov	r4, r0
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 800090e:	4a3c      	ldr	r2, [pc, #240]	@ (8000a00 <HAL_UART_MspInit+0x10c>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d02d      	beq.n	8000970 <HAL_UART_MspInit+0x7c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000914:	b00b      	add	sp, #44	@ 0x2c
 8000916:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000918:	2400      	movs	r4, #0
 800091a:	9401      	str	r4, [sp, #4]
 800091c:	4b39      	ldr	r3, [pc, #228]	@ (8000a04 <HAL_UART_MspInit+0x110>)
 800091e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000920:	f042 0210 	orr.w	r2, r2, #16
 8000924:	645a      	str	r2, [r3, #68]	@ 0x44
 8000926:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000928:	f002 0210 	and.w	r2, r2, #16
 800092c:	9201      	str	r2, [sp, #4]
 800092e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000930:	9402      	str	r4, [sp, #8]
 8000932:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000934:	f042 0201 	orr.w	r2, r2, #1
 8000938:	631a      	str	r2, [r3, #48]	@ 0x30
 800093a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	9302      	str	r3, [sp, #8]
 8000942:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000944:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000948:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094e:	2303      	movs	r3, #3
 8000950:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000952:	2307      	movs	r3, #7
 8000954:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	a905      	add	r1, sp, #20
 8000958:	482b      	ldr	r0, [pc, #172]	@ (8000a08 <HAL_UART_MspInit+0x114>)
 800095a:	f000 fc43 	bl	80011e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800095e:	4622      	mov	r2, r4
 8000960:	4621      	mov	r1, r4
 8000962:	2025      	movs	r0, #37	@ 0x25
 8000964:	f000 f9b0 	bl	8000cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000968:	2025      	movs	r0, #37	@ 0x25
 800096a:	f000 f9bd 	bl	8000ce8 <HAL_NVIC_EnableIRQ>
 800096e:	e7d1      	b.n	8000914 <HAL_UART_MspInit+0x20>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000970:	2500      	movs	r5, #0
 8000972:	9503      	str	r5, [sp, #12]
 8000974:	4b23      	ldr	r3, [pc, #140]	@ (8000a04 <HAL_UART_MspInit+0x110>)
 8000976:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000978:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800097c:	641a      	str	r2, [r3, #64]	@ 0x40
 800097e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000980:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8000984:	9203      	str	r2, [sp, #12]
 8000986:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000988:	9504      	str	r5, [sp, #16]
 800098a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800098c:	f042 0201 	orr.w	r2, r2, #1
 8000990:	631a      	str	r2, [r3, #48]	@ 0x30
 8000992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	9304      	str	r3, [sp, #16]
 800099a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800099c:	230c      	movs	r3, #12
 800099e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a4:	2303      	movs	r3, #3
 80009a6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009a8:	2307      	movs	r3, #7
 80009aa:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ac:	a905      	add	r1, sp, #20
 80009ae:	4816      	ldr	r0, [pc, #88]	@ (8000a08 <HAL_UART_MspInit+0x114>)
 80009b0:	f000 fc18 	bl	80011e4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80009b4:	4815      	ldr	r0, [pc, #84]	@ (8000a0c <HAL_UART_MspInit+0x118>)
 80009b6:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <HAL_UART_MspInit+0x11c>)
 80009b8:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80009ba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80009be:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009c0:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009c2:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009c8:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009ca:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009cc:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80009ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009d2:	61c3      	str	r3, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009d4:	6205      	str	r5, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009d6:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80009d8:	f000 fa1e 	bl	8000e18 <HAL_DMA_Init>
 80009dc:	b958      	cbnz	r0, 80009f6 <HAL_UART_MspInit+0x102>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80009de:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <HAL_UART_MspInit+0x118>)
 80009e0:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80009e2:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	4611      	mov	r1, r2
 80009e8:	2026      	movs	r0, #38	@ 0x26
 80009ea:	f000 f96d 	bl	8000cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009ee:	2026      	movs	r0, #38	@ 0x26
 80009f0:	f000 f97a 	bl	8000ce8 <HAL_NVIC_EnableIRQ>
}
 80009f4:	e78e      	b.n	8000914 <HAL_UART_MspInit+0x20>
      Error_Handler();
 80009f6:	f7ff fe79 	bl	80006ec <Error_Handler>
 80009fa:	e7f0      	b.n	80009de <HAL_UART_MspInit+0xea>
 80009fc:	40011000 	.word	0x40011000
 8000a00:	40004400 	.word	0x40004400
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020000 	.word	0x40020000
 8000a0c:	200001b8 	.word	0x200001b8
 8000a10:	40026088 	.word	0x40026088

08000a14 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a14:	e7fe      	b.n	8000a14 <NMI_Handler>

08000a16 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <HardFault_Handler>

08000a18 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <MemManage_Handler>

08000a1a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <BusFault_Handler>

08000a1c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <UsageFault_Handler>

08000a1e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1e:	4770      	bx	lr

08000a20 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a20:	4770      	bx	lr

08000a22 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a22:	4770      	bx	lr

08000a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a26:	f000 f8d5 	bl	8000bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2a:	bd08      	pop	{r3, pc}

08000a2c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000a2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a2e:	4802      	ldr	r0, [pc, #8]	@ (8000a38 <DMA1_Stream5_IRQHandler+0xc>)
 8000a30:	f000 faea 	bl	8001008 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000a34:	bd08      	pop	{r3, pc}
 8000a36:	bf00      	nop
 8000a38:	200001b8 	.word	0x200001b8

08000a3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a3e:	4802      	ldr	r0, [pc, #8]	@ (8000a48 <USART1_IRQHandler+0xc>)
 8000a40:	f002 f8aa 	bl	8002b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a44:	bd08      	pop	{r3, pc}
 8000a46:	bf00      	nop
 8000a48:	20000260 	.word	0x20000260

08000a4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a4e:	4802      	ldr	r0, [pc, #8]	@ (8000a58 <USART2_IRQHandler+0xc>)
 8000a50:	f002 f8a2 	bl	8002b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a54:	bd08      	pop	{r3, pc}
 8000a56:	bf00      	nop
 8000a58:	20000218 	.word	0x20000218

08000a5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a5e:	4802      	ldr	r0, [pc, #8]	@ (8000a68 <OTG_FS_IRQHandler+0xc>)
 8000a60:	f000 ffe3 	bl	8001a2a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a64:	bd08      	pop	{r3, pc}
 8000a66:	bf00      	nop
 8000a68:	200019b0 	.word	0x200019b0

08000a6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a6c:	b570      	push	{r4, r5, r6, lr}
 8000a6e:	460c      	mov	r4, r1
 8000a70:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a72:	2500      	movs	r5, #0
 8000a74:	e006      	b.n	8000a84 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000a76:	f3af 8000 	nop.w
 8000a7a:	4621      	mov	r1, r4
 8000a7c:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a80:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000a82:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a84:	42b5      	cmp	r5, r6
 8000a86:	dbf6      	blt.n	8000a76 <_read+0xa>
  }

  return len;
}
 8000a88:	4630      	mov	r0, r6
 8000a8a:	bd70      	pop	{r4, r5, r6, pc}

08000a8c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a90:	4770      	bx	lr

08000a92 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000a92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a96:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000a98:	2000      	movs	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	4770      	bx	lr

08000aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa4:	b510      	push	{r4, lr}
 8000aa6:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa8:	4a0c      	ldr	r2, [pc, #48]	@ (8000adc <_sbrk+0x38>)
 8000aaa:	490d      	ldr	r1, [pc, #52]	@ (8000ae0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aac:	480d      	ldr	r0, [pc, #52]	@ (8000ae4 <_sbrk+0x40>)
 8000aae:	6800      	ldr	r0, [r0, #0]
 8000ab0:	b140      	cbz	r0, 8000ac4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab2:	480c      	ldr	r0, [pc, #48]	@ (8000ae4 <_sbrk+0x40>)
 8000ab4:	6800      	ldr	r0, [r0, #0]
 8000ab6:	4403      	add	r3, r0
 8000ab8:	1a52      	subs	r2, r2, r1
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d806      	bhi.n	8000acc <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000abe:	4a09      	ldr	r2, [pc, #36]	@ (8000ae4 <_sbrk+0x40>)
 8000ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000ac2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000ac4:	4807      	ldr	r0, [pc, #28]	@ (8000ae4 <_sbrk+0x40>)
 8000ac6:	4c08      	ldr	r4, [pc, #32]	@ (8000ae8 <_sbrk+0x44>)
 8000ac8:	6004      	str	r4, [r0, #0]
 8000aca:	e7f2      	b.n	8000ab2 <_sbrk+0xe>
    errno = ENOMEM;
 8000acc:	f004 fdf4 	bl	80056b8 <__errno>
 8000ad0:	230c      	movs	r3, #12
 8000ad2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ad8:	e7f3      	b.n	8000ac2 <_sbrk+0x1e>
 8000ada:	bf00      	nop
 8000adc:	20020000 	.word	0x20020000
 8000ae0:	00000400 	.word	0x00000400
 8000ae4:	200002a8 	.word	0x200002a8
 8000ae8:	200021e0 	.word	0x200021e0

08000aec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aec:	4a03      	ldr	r2, [pc, #12]	@ (8000afc <SystemInit+0x10>)
 8000aee:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000af2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000af6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b04:	f7ff fff2 	bl	8000aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b08:	480c      	ldr	r0, [pc, #48]	@ (8000b3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b0a:	490d      	ldr	r1, [pc, #52]	@ (8000b40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b20:	4c0a      	ldr	r4, [pc, #40]	@ (8000b4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f004 fdc9 	bl	80056c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b32:	f7ff fe65 	bl	8000800 <main>
  bx  lr    
 8000b36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8000b44:	08006294 	.word	0x08006294
  ldr r2, =_sbss
 8000b48:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 8000b4c:	200021e0 	.word	0x200021e0

08000b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC_IRQHandler>
	...

08000b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b510      	push	{r4, lr}
 8000b56:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b58:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <HAL_InitTick+0x40>)
 8000b5a:	781a      	ldrb	r2, [r3, #0]
 8000b5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b60:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b64:	4a0c      	ldr	r2, [pc, #48]	@ (8000b98 <HAL_InitTick+0x44>)
 8000b66:	6810      	ldr	r0, [r2, #0]
 8000b68:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b6c:	f000 f8c0 	bl	8000cf0 <HAL_SYSTICK_Config>
 8000b70:	b968      	cbnz	r0, 8000b8e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b72:	2c0f      	cmp	r4, #15
 8000b74:	d901      	bls.n	8000b7a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000b76:	2001      	movs	r0, #1
 8000b78:	e00a      	b.n	8000b90 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	4621      	mov	r1, r4
 8000b7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b82:	f000 f8a1 	bl	8000cc8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b86:	4b05      	ldr	r3, [pc, #20]	@ (8000b9c <HAL_InitTick+0x48>)
 8000b88:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	e000      	b.n	8000b90 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000b8e:	2001      	movs	r0, #1
}
 8000b90:	bd10      	pop	{r4, pc}
 8000b92:	bf00      	nop
 8000b94:	20000004 	.word	0x20000004
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	20000008 	.word	0x20000008

08000ba0 <HAL_Init>:
{
 8000ba0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <HAL_Init+0x30>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000baa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000bb2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000bba:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bbc:	2003      	movs	r0, #3
 8000bbe:	f000 f871 	bl	8000ca4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bc2:	200f      	movs	r0, #15
 8000bc4:	f7ff ffc6 	bl	8000b54 <HAL_InitTick>
  HAL_MspInit();
 8000bc8:	f7ff fe78 	bl	80008bc <HAL_MspInit>
}
 8000bcc:	2000      	movs	r0, #0
 8000bce:	bd08      	pop	{r3, pc}
 8000bd0:	40023c00 	.word	0x40023c00

08000bd4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000bd4:	4a03      	ldr	r2, [pc, #12]	@ (8000be4 <HAL_IncTick+0x10>)
 8000bd6:	6811      	ldr	r1, [r2, #0]
 8000bd8:	4b03      	ldr	r3, [pc, #12]	@ (8000be8 <HAL_IncTick+0x14>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	440b      	add	r3, r1
 8000bde:	6013      	str	r3, [r2, #0]
}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	200002ac 	.word	0x200002ac
 8000be8:	20000004 	.word	0x20000004

08000bec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000bec:	4b01      	ldr	r3, [pc, #4]	@ (8000bf4 <HAL_GetTick+0x8>)
 8000bee:	6818      	ldr	r0, [r3, #0]
}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	200002ac 	.word	0x200002ac

08000bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf8:	b538      	push	{r3, r4, r5, lr}
 8000bfa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000bfc:	f7ff fff6 	bl	8000bec <HAL_GetTick>
 8000c00:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c02:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8000c06:	d002      	beq.n	8000c0e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c08:	4b04      	ldr	r3, [pc, #16]	@ (8000c1c <HAL_Delay+0x24>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c0e:	f7ff ffed 	bl	8000bec <HAL_GetTick>
 8000c12:	1b40      	subs	r0, r0, r5
 8000c14:	42a0      	cmp	r0, r4
 8000c16:	d3fa      	bcc.n	8000c0e <HAL_Delay+0x16>
  {
  }
}
 8000c18:	bd38      	pop	{r3, r4, r5, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000004 	.word	0x20000004

08000c20 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000c20:	2800      	cmp	r0, #0
 8000c22:	db07      	blt.n	8000c34 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c24:	f000 021f 	and.w	r2, r0, #31
 8000c28:	0940      	lsrs	r0, r0, #5
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	4093      	lsls	r3, r2
 8000c2e:	4a02      	ldr	r2, [pc, #8]	@ (8000c38 <__NVIC_EnableIRQ+0x18>)
 8000c30:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000e100 	.word	0xe000e100

08000c3c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000c3c:	2800      	cmp	r0, #0
 8000c3e:	db08      	blt.n	8000c52 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c40:	0109      	lsls	r1, r1, #4
 8000c42:	b2c9      	uxtb	r1, r1
 8000c44:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000c48:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000c4c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000c50:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c52:	f000 000f 	and.w	r0, r0, #15
 8000c56:	0109      	lsls	r1, r1, #4
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	4b01      	ldr	r3, [pc, #4]	@ (8000c60 <__NVIC_SetPriority+0x24>)
 8000c5c:	5419      	strb	r1, [r3, r0]
  }
}
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed14 	.word	0xe000ed14

08000c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c64:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c66:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c6a:	f1c0 0c07 	rsb	ip, r0, #7
 8000c6e:	f1bc 0f04 	cmp.w	ip, #4
 8000c72:	bf28      	it	cs
 8000c74:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c78:	1d03      	adds	r3, r0, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d90f      	bls.n	8000c9e <NVIC_EncodePriority+0x3a>
 8000c7e:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000c84:	fa0e f00c 	lsl.w	r0, lr, ip
 8000c88:	ea21 0100 	bic.w	r1, r1, r0
 8000c8c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c8e:	fa0e fe03 	lsl.w	lr, lr, r3
 8000c92:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000c96:	ea41 0002 	orr.w	r0, r1, r2
 8000c9a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e7ee      	b.n	8000c80 <NVIC_EncodePriority+0x1c>
	...

08000ca4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca4:	4a07      	ldr	r2, [pc, #28]	@ (8000cc4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ca6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000cac:	041b      	lsls	r3, r3, #16
 8000cae:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb0:	0200      	lsls	r0, r0, #8
 8000cb2:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000cb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000cc0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc8:	b510      	push	{r4, lr}
 8000cca:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ccc:	4b05      	ldr	r3, [pc, #20]	@ (8000ce4 <HAL_NVIC_SetPriority+0x1c>)
 8000cce:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd0:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000cd4:	f7ff ffc6 	bl	8000c64 <NVIC_EncodePriority>
 8000cd8:	4601      	mov	r1, r0
 8000cda:	4620      	mov	r0, r4
 8000cdc:	f7ff ffae 	bl	8000c3c <__NVIC_SetPriority>
}
 8000ce0:	bd10      	pop	{r4, pc}
 8000ce2:	bf00      	nop
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cea:	f7ff ff99 	bl	8000c20 <__NVIC_EnableIRQ>
}
 8000cee:	bd08      	pop	{r3, pc}

08000cf0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cf6:	d20b      	bcs.n	8000d10 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000cfc:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfe:	4a05      	ldr	r2, [pc, #20]	@ (8000d14 <HAL_SYSTICK_Config+0x24>)
 8000d00:	21f0      	movs	r1, #240	@ 0xf0
 8000d02:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d06:	2000      	movs	r0, #0
 8000d08:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0a:	2207      	movs	r2, #7
 8000d0c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d0e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d10:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d18:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000d1a:	6805      	ldr	r5, [r0, #0]
 8000d1c:	682c      	ldr	r4, [r5, #0]
 8000d1e:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8000d22:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000d24:	6804      	ldr	r4, [r0, #0]
 8000d26:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d28:	6883      	ldr	r3, [r0, #8]
 8000d2a:	2b40      	cmp	r3, #64	@ 0x40
 8000d2c:	d005      	beq.n	8000d3a <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000d2e:	6803      	ldr	r3, [r0, #0]
 8000d30:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000d32:	6803      	ldr	r3, [r0, #0]
 8000d34:	60da      	str	r2, [r3, #12]
  }
}
 8000d36:	bc30      	pop	{r4, r5}
 8000d38:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8000d3a:	6803      	ldr	r3, [r0, #0]
 8000d3c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000d3e:	6803      	ldr	r3, [r0, #0]
 8000d40:	60d9      	str	r1, [r3, #12]
 8000d42:	e7f8      	b.n	8000d36 <DMA_SetConfig+0x1e>

08000d44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d44:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d46:	6803      	ldr	r3, [r0, #0]
 8000d48:	b2d9      	uxtb	r1, r3
 8000d4a:	3910      	subs	r1, #16
 8000d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8000d80 <DMA_CalcBaseAndBitshift+0x3c>)
 8000d4e:	fba2 4201 	umull	r4, r2, r2, r1
 8000d52:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d54:	4c0b      	ldr	r4, [pc, #44]	@ (8000d84 <DMA_CalcBaseAndBitshift+0x40>)
 8000d56:	5ca2      	ldrb	r2, [r4, r2]
 8000d58:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8000d5a:	295f      	cmp	r1, #95	@ 0x5f
 8000d5c:	d909      	bls.n	8000d72 <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000d5e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000d62:	f023 0303 	bic.w	r3, r3, #3
 8000d66:	3304      	adds	r3, #4
 8000d68:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8000d6a:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8000d6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d70:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000d72:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000d76:	f023 0303 	bic.w	r3, r3, #3
 8000d7a:	6583      	str	r3, [r0, #88]	@ 0x58
 8000d7c:	e7f5      	b.n	8000d6a <DMA_CalcBaseAndBitshift+0x26>
 8000d7e:	bf00      	nop
 8000d80:	aaaaaaab 	.word	0xaaaaaaab
 8000d84:	080061c0 	.word	0x080061c0

08000d88 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000d88:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000d8a:	6982      	ldr	r2, [r0, #24]
 8000d8c:	b992      	cbnz	r2, 8000db4 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d00a      	beq.n	8000da8 <DMA_CheckFifoParam+0x20>
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d002      	beq.n	8000d9c <DMA_CheckFifoParam+0x14>
 8000d96:	b10b      	cbz	r3, 8000d9c <DMA_CheckFifoParam+0x14>
 8000d98:	2000      	movs	r0, #0
 8000d9a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d9c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000d9e:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000da2:	d128      	bne.n	8000df6 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8000da4:	2000      	movs	r0, #0
 8000da6:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000da8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000daa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8000dae:	d024      	beq.n	8000dfa <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8000db0:	2000      	movs	r0, #0
 8000db2:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000db4:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8000db8:	d009      	beq.n	8000dce <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d925      	bls.n	8000e0a <DMA_CheckFifoParam+0x82>
 8000dbe:	2b03      	cmp	r3, #3
 8000dc0:	d125      	bne.n	8000e0e <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000dc2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000dc4:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000dc8:	d123      	bne.n	8000e12 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8000dca:	2000      	movs	r0, #0
 8000dcc:	4770      	bx	lr
    switch (tmp)
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	d803      	bhi.n	8000dda <DMA_CheckFifoParam+0x52>
 8000dd2:	e8df f003 	tbb	[pc, r3]
 8000dd6:	0414      	.short	0x0414
 8000dd8:	0a14      	.short	0x0a14
 8000dda:	2000      	movs	r0, #0
 8000ddc:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000dde:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000de0:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000de4:	d10d      	bne.n	8000e02 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8000de6:	2000      	movs	r0, #0
 8000de8:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000dea:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000dec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8000df0:	d009      	beq.n	8000e06 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8000df2:	2000      	movs	r0, #0
 8000df4:	4770      	bx	lr
        status = HAL_ERROR;
 8000df6:	2001      	movs	r0, #1
 8000df8:	4770      	bx	lr
        status = HAL_ERROR;
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	4770      	bx	lr
      status = HAL_ERROR;
 8000dfe:	2001      	movs	r0, #1
 8000e00:	4770      	bx	lr
        status = HAL_ERROR;
 8000e02:	2001      	movs	r0, #1
 8000e04:	4770      	bx	lr
        status = HAL_ERROR;
 8000e06:	2001      	movs	r0, #1
 8000e08:	4770      	bx	lr
      status = HAL_ERROR;
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	4770      	bx	lr
    switch (tmp)
 8000e0e:	2000      	movs	r0, #0
 8000e10:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8000e12:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8000e14:	4770      	bx	lr
	...

08000e18 <HAL_DMA_Init>:
{
 8000e18:	b570      	push	{r4, r5, r6, lr}
 8000e1a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e1c:	f7ff fee6 	bl	8000bec <HAL_GetTick>
  if(hdma == NULL)
 8000e20:	2c00      	cmp	r4, #0
 8000e22:	d05b      	beq.n	8000edc <HAL_DMA_Init+0xc4>
 8000e24:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e26:	2302      	movs	r3, #2
 8000e28:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8000e32:	6822      	ldr	r2, [r4, #0]
 8000e34:	6813      	ldr	r3, [r2, #0]
 8000e36:	f023 0301 	bic.w	r3, r3, #1
 8000e3a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e3c:	6823      	ldr	r3, [r4, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	f012 0f01 	tst.w	r2, #1
 8000e44:	d00a      	beq.n	8000e5c <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e46:	f7ff fed1 	bl	8000bec <HAL_GetTick>
 8000e4a:	1b43      	subs	r3, r0, r5
 8000e4c:	2b05      	cmp	r3, #5
 8000e4e:	d9f5      	bls.n	8000e3c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e50:	2320      	movs	r3, #32
 8000e52:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e54:	2003      	movs	r0, #3
 8000e56:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8000e5a:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8000e5c:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e5e:	4920      	ldr	r1, [pc, #128]	@ (8000ee0 <HAL_DMA_Init+0xc8>)
 8000e60:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e62:	6862      	ldr	r2, [r4, #4]
 8000e64:	68a0      	ldr	r0, [r4, #8]
 8000e66:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e68:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e6a:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e6c:	6920      	ldr	r0, [r4, #16]
 8000e6e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e70:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e72:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e74:	69a0      	ldr	r0, [r4, #24]
 8000e76:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e78:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e7a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e7c:	6a20      	ldr	r0, [r4, #32]
 8000e7e:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e80:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e82:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000e84:	2904      	cmp	r1, #4
 8000e86:	d01e      	beq.n	8000ec6 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8000e88:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8000e8a:	6826      	ldr	r6, [r4, #0]
 8000e8c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e8e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8000e92:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000e94:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	d107      	bne.n	8000eaa <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8000e9a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000e9c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e9e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8000ea0:	b11b      	cbz	r3, 8000eaa <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000ea2:	4620      	mov	r0, r4
 8000ea4:	f7ff ff70 	bl	8000d88 <DMA_CheckFifoParam>
 8000ea8:	b990      	cbnz	r0, 8000ed0 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8000eaa:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000eac:	4620      	mov	r0, r4
 8000eae:	f7ff ff49 	bl	8000d44 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000eb2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000eb4:	233f      	movs	r3, #63	@ 0x3f
 8000eb6:	4093      	lsls	r3, r2
 8000eb8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eba:	2000      	movs	r0, #0
 8000ebc:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8000ec4:	e7c9      	b.n	8000e5a <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ec6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8000ec8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8000eca:	4301      	orrs	r1, r0
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	e7db      	b.n	8000e88 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000ed0:	2340      	movs	r3, #64	@ 0x40
 8000ed2:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8000eda:	e7be      	b.n	8000e5a <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8000edc:	2001      	movs	r0, #1
 8000ede:	e7bc      	b.n	8000e5a <HAL_DMA_Init+0x42>
 8000ee0:	f010803f 	.word	0xf010803f

08000ee4 <HAL_DMA_Start_IT>:
{
 8000ee4:	b538      	push	{r3, r4, r5, lr}
 8000ee6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ee8:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8000eea:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8000eee:	2801      	cmp	r0, #1
 8000ef0:	d02b      	beq.n	8000f4a <HAL_DMA_Start_IT+0x66>
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ef8:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8000efc:	b2c0      	uxtb	r0, r0
 8000efe:	2801      	cmp	r0, #1
 8000f00:	d004      	beq.n	8000f0c <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8000f02:	2300      	movs	r3, #0
 8000f04:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8000f08:	2002      	movs	r0, #2
}
 8000f0a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f0c:	2002      	movs	r0, #2
 8000f0e:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f12:	2000      	movs	r0, #0
 8000f14:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f16:	4620      	mov	r0, r4
 8000f18:	f7ff fefe 	bl	8000d18 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f1c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000f1e:	233f      	movs	r3, #63	@ 0x3f
 8000f20:	4093      	lsls	r3, r2
 8000f22:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000f24:	6822      	ldr	r2, [r4, #0]
 8000f26:	6813      	ldr	r3, [r2, #0]
 8000f28:	f043 0316 	orr.w	r3, r3, #22
 8000f2c:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8000f2e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000f30:	b123      	cbz	r3, 8000f3c <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000f32:	6822      	ldr	r2, [r4, #0]
 8000f34:	6813      	ldr	r3, [r2, #0]
 8000f36:	f043 0308 	orr.w	r3, r3, #8
 8000f3a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8000f3c:	6822      	ldr	r2, [r4, #0]
 8000f3e:	6813      	ldr	r3, [r2, #0]
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f46:	2000      	movs	r0, #0
 8000f48:	e7df      	b.n	8000f0a <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8000f4a:	2002      	movs	r0, #2
 8000f4c:	e7dd      	b.n	8000f0a <HAL_DMA_Start_IT+0x26>

08000f4e <HAL_DMA_Abort>:
{
 8000f4e:	b570      	push	{r4, r5, r6, lr}
 8000f50:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f52:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8000f54:	f7ff fe4a 	bl	8000bec <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f58:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d006      	beq.n	8000f70 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f62:	2380      	movs	r3, #128	@ 0x80
 8000f64:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8000f66:	2300      	movs	r3, #0
 8000f68:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8000f6c:	2001      	movs	r0, #1
}
 8000f6e:	bd70      	pop	{r4, r5, r6, pc}
 8000f70:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f72:	6822      	ldr	r2, [r4, #0]
 8000f74:	6813      	ldr	r3, [r2, #0]
 8000f76:	f023 0316 	bic.w	r3, r3, #22
 8000f7a:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f7c:	6822      	ldr	r2, [r4, #0]
 8000f7e:	6953      	ldr	r3, [r2, #20]
 8000f80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000f84:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f86:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000f88:	b1e3      	cbz	r3, 8000fc4 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f8a:	6822      	ldr	r2, [r4, #0]
 8000f8c:	6813      	ldr	r3, [r2, #0]
 8000f8e:	f023 0308 	bic.w	r3, r3, #8
 8000f92:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000f94:	6822      	ldr	r2, [r4, #0]
 8000f96:	6813      	ldr	r3, [r2, #0]
 8000f98:	f023 0301 	bic.w	r3, r3, #1
 8000f9c:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f9e:	6823      	ldr	r3, [r4, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f013 0f01 	tst.w	r3, #1
 8000fa6:	d011      	beq.n	8000fcc <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fa8:	f7ff fe20 	bl	8000bec <HAL_GetTick>
 8000fac:	1b43      	subs	r3, r0, r5
 8000fae:	2b05      	cmp	r3, #5
 8000fb0:	d9f5      	bls.n	8000f9e <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fb2:	2320      	movs	r3, #32
 8000fb4:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 8000fc2:	e7d4      	b.n	8000f6e <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fc4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1df      	bne.n	8000f8a <HAL_DMA_Abort+0x3c>
 8000fca:	e7e3      	b.n	8000f94 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fcc:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000fce:	233f      	movs	r3, #63	@ 0x3f
 8000fd0:	4093      	lsls	r3, r2
 8000fd2:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 8000fe0:	e7c5      	b.n	8000f6e <HAL_DMA_Abort+0x20>

08000fe2 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fe2:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d003      	beq.n	8000ff4 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fec:	2380      	movs	r3, #128	@ 0x80
 8000fee:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ff4:	2305      	movs	r3, #5
 8000ff6:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8000ffa:	6802      	ldr	r2, [r0, #0]
 8000ffc:	6813      	ldr	r3, [r2, #0]
 8000ffe:	f023 0301 	bic.w	r3, r3, #1
 8001002:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001004:	2000      	movs	r0, #0
}
 8001006:	4770      	bx	lr

08001008 <HAL_DMA_IRQHandler>:
{
 8001008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800100a:	b083      	sub	sp, #12
 800100c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800100e:	2300      	movs	r3, #0
 8001010:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001012:	4b72      	ldr	r3, [pc, #456]	@ (80011dc <HAL_DMA_IRQHandler+0x1d4>)
 8001014:	681d      	ldr	r5, [r3, #0]
 8001016:	4b72      	ldr	r3, [pc, #456]	@ (80011e0 <HAL_DMA_IRQHandler+0x1d8>)
 8001018:	fba3 3505 	umull	r3, r5, r3, r5
 800101c:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800101e:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8001020:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001022:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001024:	2308      	movs	r3, #8
 8001026:	4093      	lsls	r3, r2
 8001028:	4233      	tst	r3, r6
 800102a:	d010      	beq.n	800104e <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800102c:	6803      	ldr	r3, [r0, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	f012 0f04 	tst.w	r2, #4
 8001034:	d00b      	beq.n	800104e <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	f022 0204 	bic.w	r2, r2, #4
 800103c:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800103e:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001040:	2308      	movs	r3, #8
 8001042:	4093      	lsls	r3, r2
 8001044:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001046:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800104e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001050:	2301      	movs	r3, #1
 8001052:	4093      	lsls	r3, r2
 8001054:	4233      	tst	r3, r6
 8001056:	d009      	beq.n	800106c <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001058:	6822      	ldr	r2, [r4, #0]
 800105a:	6952      	ldr	r2, [r2, #20]
 800105c:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8001060:	d004      	beq.n	800106c <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001062:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001064:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001066:	f043 0302 	orr.w	r3, r3, #2
 800106a:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800106c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800106e:	2304      	movs	r3, #4
 8001070:	4093      	lsls	r3, r2
 8001072:	4233      	tst	r3, r6
 8001074:	d009      	beq.n	800108a <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001076:	6822      	ldr	r2, [r4, #0]
 8001078:	6812      	ldr	r2, [r2, #0]
 800107a:	f012 0f02 	tst.w	r2, #2
 800107e:	d004      	beq.n	800108a <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001080:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001082:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800108a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800108c:	2310      	movs	r3, #16
 800108e:	4093      	lsls	r3, r2
 8001090:	4233      	tst	r3, r6
 8001092:	d024      	beq.n	80010de <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001094:	6822      	ldr	r2, [r4, #0]
 8001096:	6812      	ldr	r2, [r2, #0]
 8001098:	f012 0f08 	tst.w	r2, #8
 800109c:	d01f      	beq.n	80010de <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800109e:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010a0:	6823      	ldr	r3, [r4, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80010a8:	d00d      	beq.n	80010c6 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80010b0:	d104      	bne.n	80010bc <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80010b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80010b4:	b19b      	cbz	r3, 80010de <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80010b6:	4620      	mov	r0, r4
 80010b8:	4798      	blx	r3
 80010ba:	e010      	b.n	80010de <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80010bc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80010be:	b173      	cbz	r3, 80010de <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80010c0:	4620      	mov	r0, r4
 80010c2:	4798      	blx	r3
 80010c4:	e00b      	b.n	80010de <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80010cc:	d103      	bne.n	80010d6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	f022 0208 	bic.w	r2, r2, #8
 80010d4:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80010d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80010d8:	b10b      	cbz	r3, 80010de <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80010da:	4620      	mov	r0, r4
 80010dc:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80010de:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80010e0:	2320      	movs	r3, #32
 80010e2:	4093      	lsls	r3, r2
 80010e4:	4233      	tst	r3, r6
 80010e6:	d055      	beq.n	8001194 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80010e8:	6822      	ldr	r2, [r4, #0]
 80010ea:	6812      	ldr	r2, [r2, #0]
 80010ec:	f012 0f10 	tst.w	r2, #16
 80010f0:	d050      	beq.n	8001194 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80010f2:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80010f4:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b05      	cmp	r3, #5
 80010fc:	d00e      	beq.n	800111c <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010fe:	6823      	ldr	r3, [r4, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001106:	d033      	beq.n	8001170 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800110e:	d12a      	bne.n	8001166 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001110:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001112:	2b00      	cmp	r3, #0
 8001114:	d03e      	beq.n	8001194 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8001116:	4620      	mov	r0, r4
 8001118:	4798      	blx	r3
 800111a:	e03b      	b.n	8001194 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800111c:	6822      	ldr	r2, [r4, #0]
 800111e:	6813      	ldr	r3, [r2, #0]
 8001120:	f023 0316 	bic.w	r3, r3, #22
 8001124:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001126:	6822      	ldr	r2, [r4, #0]
 8001128:	6953      	ldr	r3, [r2, #20]
 800112a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800112e:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001130:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001132:	b1a3      	cbz	r3, 800115e <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001134:	6822      	ldr	r2, [r4, #0]
 8001136:	6813      	ldr	r3, [r2, #0]
 8001138:	f023 0308 	bic.w	r3, r3, #8
 800113c:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800113e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001140:	233f      	movs	r3, #63	@ 0x3f
 8001142:	4093      	lsls	r3, r2
 8001144:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001146:	2301      	movs	r3, #1
 8001148:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 800114c:	2300      	movs	r3, #0
 800114e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8001152:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001154:	2b00      	cmp	r3, #0
 8001156:	d03f      	beq.n	80011d8 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001158:	4620      	mov	r0, r4
 800115a:	4798      	blx	r3
        return;
 800115c:	e03c      	b.n	80011d8 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800115e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1e7      	bne.n	8001134 <HAL_DMA_IRQHandler+0x12c>
 8001164:	e7eb      	b.n	800113e <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001166:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001168:	b1a3      	cbz	r3, 8001194 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 800116a:	4620      	mov	r0, r4
 800116c:	4798      	blx	r3
 800116e:	e011      	b.n	8001194 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001176:	d109      	bne.n	800118c <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	f022 0210 	bic.w	r2, r2, #16
 800117e:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001180:	2301      	movs	r3, #1
 8001182:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8001186:	2300      	movs	r3, #0
 8001188:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 800118c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800118e:	b10b      	cbz	r3, 8001194 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001190:	4620      	mov	r0, r4
 8001192:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001194:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001196:	b1fb      	cbz	r3, 80011d8 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001198:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800119a:	f013 0f01 	tst.w	r3, #1
 800119e:	d017      	beq.n	80011d0 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80011a0:	2305      	movs	r3, #5
 80011a2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 80011a6:	6822      	ldr	r2, [r4, #0]
 80011a8:	6813      	ldr	r3, [r2, #0]
 80011aa:	f023 0301 	bic.w	r3, r3, #1
 80011ae:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80011b0:	9b01      	ldr	r3, [sp, #4]
 80011b2:	3301      	adds	r3, #1
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	42ab      	cmp	r3, r5
 80011b8:	d804      	bhi.n	80011c4 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80011ba:	6823      	ldr	r3, [r4, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f013 0f01 	tst.w	r3, #1
 80011c2:	d1f5      	bne.n	80011b0 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 80011c4:	2301      	movs	r3, #1
 80011c6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80011ca:	2300      	movs	r3, #0
 80011cc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 80011d0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80011d2:	b10b      	cbz	r3, 80011d8 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80011d4:	4620      	mov	r0, r4
 80011d6:	4798      	blx	r3
}
 80011d8:	b003      	add	sp, #12
 80011da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011dc:	20000000 	.word	0x20000000
 80011e0:	1b4e81b5 	.word	0x1b4e81b5

080011e4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e4:	2300      	movs	r3, #0
 80011e6:	2b0f      	cmp	r3, #15
 80011e8:	f200 80d7 	bhi.w	800139a <HAL_GPIO_Init+0x1b6>
{
 80011ec:	b570      	push	{r4, r5, r6, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	e065      	b.n	80012be <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011f2:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80011f8:	2403      	movs	r4, #3
 80011fa:	fa04 f40e 	lsl.w	r4, r4, lr
 80011fe:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001202:	68cc      	ldr	r4, [r1, #12]
 8001204:	fa04 f40e 	lsl.w	r4, r4, lr
 8001208:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800120a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800120e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001212:	684a      	ldr	r2, [r1, #4]
 8001214:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001218:	409a      	lsls	r2, r3
 800121a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 800121c:	6042      	str	r2, [r0, #4]
 800121e:	e05c      	b.n	80012da <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001220:	08dc      	lsrs	r4, r3, #3
 8001222:	3408      	adds	r4, #8
 8001224:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001228:	f003 0507 	and.w	r5, r3, #7
 800122c:	00ad      	lsls	r5, r5, #2
 800122e:	f04f 0e0f 	mov.w	lr, #15
 8001232:	fa0e fe05 	lsl.w	lr, lr, r5
 8001236:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800123a:	690a      	ldr	r2, [r1, #16]
 800123c:	40aa      	lsls	r2, r5
 800123e:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001242:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001246:	e05c      	b.n	8001302 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001248:	2204      	movs	r2, #4
 800124a:	e000      	b.n	800124e <HAL_GPIO_Init+0x6a>
 800124c:	2200      	movs	r2, #0
 800124e:	fa02 f20e 	lsl.w	r2, r2, lr
 8001252:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001254:	3402      	adds	r4, #2
 8001256:	4d51      	ldr	r5, [pc, #324]	@ (800139c <HAL_GPIO_Init+0x1b8>)
 8001258:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800125c:	4a50      	ldr	r2, [pc, #320]	@ (80013a0 <HAL_GPIO_Init+0x1bc>)
 800125e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001260:	ea6f 020c 	mvn.w	r2, ip
 8001264:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001268:	684e      	ldr	r6, [r1, #4]
 800126a:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 800126e:	d001      	beq.n	8001274 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001270:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001274:	4c4a      	ldr	r4, [pc, #296]	@ (80013a0 <HAL_GPIO_Init+0x1bc>)
 8001276:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001278:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800127a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800127e:	684e      	ldr	r6, [r1, #4]
 8001280:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001284:	d001      	beq.n	800128a <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001286:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 800128a:	4c45      	ldr	r4, [pc, #276]	@ (80013a0 <HAL_GPIO_Init+0x1bc>)
 800128c:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 800128e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001290:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001294:	684e      	ldr	r6, [r1, #4]
 8001296:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 800129a:	d001      	beq.n	80012a0 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 800129c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80012a0:	4c3f      	ldr	r4, [pc, #252]	@ (80013a0 <HAL_GPIO_Init+0x1bc>)
 80012a2:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a4:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80012a6:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012a8:	684d      	ldr	r5, [r1, #4]
 80012aa:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 80012ae:	d001      	beq.n	80012b4 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 80012b0:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80012b4:	4c3a      	ldr	r4, [pc, #232]	@ (80013a0 <HAL_GPIO_Init+0x1bc>)
 80012b6:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012b8:	3301      	adds	r3, #1
 80012ba:	2b0f      	cmp	r3, #15
 80012bc:	d86b      	bhi.n	8001396 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 80012be:	2201      	movs	r2, #1
 80012c0:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012c2:	680c      	ldr	r4, [r1, #0]
 80012c4:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80012c8:	ea32 0404 	bics.w	r4, r2, r4
 80012cc:	d1f4      	bne.n	80012b8 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ce:	684c      	ldr	r4, [r1, #4]
 80012d0:	f004 0403 	and.w	r4, r4, #3
 80012d4:	3c01      	subs	r4, #1
 80012d6:	2c01      	cmp	r4, #1
 80012d8:	d98b      	bls.n	80011f2 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012da:	684a      	ldr	r2, [r1, #4]
 80012dc:	f002 0203 	and.w	r2, r2, #3
 80012e0:	2a03      	cmp	r2, #3
 80012e2:	d009      	beq.n	80012f8 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80012e4:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012e6:	005d      	lsls	r5, r3, #1
 80012e8:	2203      	movs	r2, #3
 80012ea:	40aa      	lsls	r2, r5
 80012ec:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012f0:	688a      	ldr	r2, [r1, #8]
 80012f2:	40aa      	lsls	r2, r5
 80012f4:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80012f6:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f8:	684a      	ldr	r2, [r1, #4]
 80012fa:	f002 0203 	and.w	r2, r2, #3
 80012fe:	2a02      	cmp	r2, #2
 8001300:	d08e      	beq.n	8001220 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001302:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001304:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001308:	2203      	movs	r2, #3
 800130a:	fa02 f20e 	lsl.w	r2, r2, lr
 800130e:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001312:	684a      	ldr	r2, [r1, #4]
 8001314:	f002 0203 	and.w	r2, r2, #3
 8001318:	fa02 f20e 	lsl.w	r2, r2, lr
 800131c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800131e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001320:	684a      	ldr	r2, [r1, #4]
 8001322:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001326:	d0c7      	beq.n	80012b8 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001328:	2200      	movs	r2, #0
 800132a:	9201      	str	r2, [sp, #4]
 800132c:	4a1d      	ldr	r2, [pc, #116]	@ (80013a4 <HAL_GPIO_Init+0x1c0>)
 800132e:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001330:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001334:	6454      	str	r4, [r2, #68]	@ 0x44
 8001336:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001338:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800133c:	9201      	str	r2, [sp, #4]
 800133e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001340:	089c      	lsrs	r4, r3, #2
 8001342:	1ca5      	adds	r5, r4, #2
 8001344:	4a15      	ldr	r2, [pc, #84]	@ (800139c <HAL_GPIO_Init+0x1b8>)
 8001346:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800134a:	f003 0e03 	and.w	lr, r3, #3
 800134e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001352:	220f      	movs	r2, #15
 8001354:	fa02 f20e 	lsl.w	r2, r2, lr
 8001358:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800135c:	4a12      	ldr	r2, [pc, #72]	@ (80013a8 <HAL_GPIO_Init+0x1c4>)
 800135e:	4290      	cmp	r0, r2
 8001360:	f43f af74 	beq.w	800124c <HAL_GPIO_Init+0x68>
 8001364:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001368:	4290      	cmp	r0, r2
 800136a:	d00e      	beq.n	800138a <HAL_GPIO_Init+0x1a6>
 800136c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001370:	4290      	cmp	r0, r2
 8001372:	d00c      	beq.n	800138e <HAL_GPIO_Init+0x1aa>
 8001374:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001378:	4290      	cmp	r0, r2
 800137a:	d00a      	beq.n	8001392 <HAL_GPIO_Init+0x1ae>
 800137c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001380:	4290      	cmp	r0, r2
 8001382:	f43f af61 	beq.w	8001248 <HAL_GPIO_Init+0x64>
 8001386:	2207      	movs	r2, #7
 8001388:	e761      	b.n	800124e <HAL_GPIO_Init+0x6a>
 800138a:	2201      	movs	r2, #1
 800138c:	e75f      	b.n	800124e <HAL_GPIO_Init+0x6a>
 800138e:	2202      	movs	r2, #2
 8001390:	e75d      	b.n	800124e <HAL_GPIO_Init+0x6a>
 8001392:	2203      	movs	r2, #3
 8001394:	e75b      	b.n	800124e <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001396:	b002      	add	sp, #8
 8001398:	bd70      	pop	{r4, r5, r6, pc}
 800139a:	4770      	bx	lr
 800139c:	40013800 	.word	0x40013800
 80013a0:	40013c00 	.word	0x40013c00
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020000 	.word	0x40020000

080013ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013ac:	b10a      	cbz	r2, 80013b2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ae:	6181      	str	r1, [r0, #24]
 80013b0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013b2:	0409      	lsls	r1, r1, #16
 80013b4:	6181      	str	r1, [r0, #24]
  }
}
 80013b6:	4770      	bx	lr

080013b8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013b8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013ba:	ea01 0203 	and.w	r2, r1, r3
 80013be:	ea21 0103 	bic.w	r1, r1, r3
 80013c2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80013c6:	6181      	str	r1, [r0, #24]
}
 80013c8:	4770      	bx	lr

080013ca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80013ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013ce:	b083      	sub	sp, #12
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013d0:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 80013d4:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80013d8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80013dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d854      	bhi.n	800148e <PCD_WriteEmptyTxFifo+0xc4>
 80013e4:	4607      	mov	r7, r0
 80013e6:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 80013e8:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 80013ea:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 80013ee:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80013f2:	69d2      	ldr	r2, [r2, #28]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d300      	bcc.n	80013fa <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 80013f8:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 80013fa:	f102 0903 	add.w	r9, r2, #3
 80013fe:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001402:	e015      	b.n	8001430 <PCD_WriteEmptyTxFifo+0x66>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8001404:	f106 0903 	add.w	r9, r6, #3
 8001408:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
                          (uint8_t)hpcd->Init.dma_enable);
 800140c:	79bb      	ldrb	r3, [r7, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800140e:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 8001412:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8001416:	6a29      	ldr	r1, [r5, #32]
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	b2b3      	uxth	r3, r6
 800141c:	b2e2      	uxtb	r2, r4
 800141e:	4640      	mov	r0, r8
 8001420:	f002 f911 	bl	8003646 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001424:	6a2b      	ldr	r3, [r5, #32]
 8001426:	4433      	add	r3, r6
 8001428:	622b      	str	r3, [r5, #32]
    ep->xfer_count += len;
 800142a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800142c:	4433      	add	r3, r6
 800142e:	62ab      	str	r3, [r5, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001430:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 8001434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800143c:	454b      	cmp	r3, r9
 800143e:	d312      	bcc.n	8001466 <PCD_WriteEmptyTxFifo+0x9c>
 8001440:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001444:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8001448:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800144a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800144c:	429a      	cmp	r2, r3
 800144e:	d20a      	bcs.n	8001466 <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001450:	b14b      	cbz	r3, 8001466 <PCD_WriteEmptyTxFifo+0x9c>
    len = ep->xfer_len - ep->xfer_count;
 8001452:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 8001454:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8001458:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 800145c:	69d6      	ldr	r6, [r2, #28]
 800145e:	429e      	cmp	r6, r3
 8001460:	d3d0      	bcc.n	8001404 <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 8001462:	461e      	mov	r6, r3
 8001464:	e7ce      	b.n	8001404 <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001466:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800146a:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800146e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001472:	429a      	cmp	r2, r3
 8001474:	d80f      	bhi.n	8001496 <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001476:	f004 040f 	and.w	r4, r4, #15
 800147a:	2201      	movs	r2, #1
 800147c:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800147e:	f8d8 3834 	ldr.w	r3, [r8, #2100]	@ 0x834
 8001482:	ea23 0302 	bic.w	r3, r3, r2
 8001486:	f8c8 3834 	str.w	r3, [r8, #2100]	@ 0x834
  }

  return HAL_OK;
 800148a:	2000      	movs	r0, #0
 800148c:	e000      	b.n	8001490 <PCD_WriteEmptyTxFifo+0xc6>
    return HAL_ERROR;
 800148e:	2001      	movs	r0, #1
}
 8001490:	b003      	add	sp, #12
 8001492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8001496:	2000      	movs	r0, #0
 8001498:	e7fa      	b.n	8001490 <PCD_WriteEmptyTxFifo+0xc6>

0800149a <HAL_PCD_Init>:
{
 800149a:	b530      	push	{r4, r5, lr}
 800149c:	b083      	sub	sp, #12
  if (hpcd == NULL)
 800149e:	2800      	cmp	r0, #0
 80014a0:	d07a      	beq.n	8001598 <HAL_PCD_Init+0xfe>
 80014a2:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 80014a4:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014a6:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 80014aa:	b1c3      	cbz	r3, 80014de <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80014ac:	2303      	movs	r3, #3
 80014ae:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  if (USBx == USB_OTG_FS)
 80014b2:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
 80014b6:	d017      	beq.n	80014e8 <HAL_PCD_Init+0x4e>
  __HAL_PCD_DISABLE(hpcd);
 80014b8:	6820      	ldr	r0, [r4, #0]
 80014ba:	f001 fe77 	bl	80031ac <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014be:	7c23      	ldrb	r3, [r4, #16]
 80014c0:	f88d 3000 	strb.w	r3, [sp]
 80014c4:	1d23      	adds	r3, r4, #4
 80014c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c8:	6820      	ldr	r0, [r4, #0]
 80014ca:	f001 fdad 	bl	8003028 <USB_CoreInit>
 80014ce:	b170      	cbz	r0, 80014ee <HAL_PCD_Init+0x54>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014d0:	2302      	movs	r3, #2
 80014d2:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 80014d6:	2501      	movs	r5, #1
}
 80014d8:	4628      	mov	r0, r5
 80014da:	b003      	add	sp, #12
 80014dc:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80014de:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 80014e2:	f003 fc73 	bl	8004dcc <HAL_PCD_MspInit>
 80014e6:	e7e1      	b.n	80014ac <HAL_PCD_Init+0x12>
    hpcd->Init.dma_enable = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	71a3      	strb	r3, [r4, #6]
 80014ec:	e7e4      	b.n	80014b8 <HAL_PCD_Init+0x1e>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80014ee:	2100      	movs	r1, #0
 80014f0:	6820      	ldr	r0, [r4, #0]
 80014f2:	f002 fac4 	bl	8003a7e <USB_SetCurrentMode>
 80014f6:	4602      	mov	r2, r0
 80014f8:	b908      	cbnz	r0, 80014fe <HAL_PCD_Init+0x64>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014fa:	4603      	mov	r3, r0
 80014fc:	e017      	b.n	800152e <HAL_PCD_Init+0x94>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014fe:	2302      	movs	r3, #2
 8001500:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8001504:	2501      	movs	r5, #1
 8001506:	e7e7      	b.n	80014d8 <HAL_PCD_Init+0x3e>
    hpcd->IN_ep[i].is_in = 1U;
 8001508:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 800150c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001510:	2001      	movs	r0, #1
 8001512:	7548      	strb	r0, [r1, #21]
    hpcd->IN_ep[i].num = i;
 8001514:	750b      	strb	r3, [r1, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001516:	85cb      	strh	r3, [r1, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001518:	2000      	movs	r0, #0
 800151a:	7608      	strb	r0, [r1, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 800151c:	61c8      	str	r0, [r1, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800151e:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001520:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8001524:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001528:	6248      	str	r0, [r1, #36]	@ 0x24
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800152a:	3301      	adds	r3, #1
 800152c:	b2db      	uxtb	r3, r3
 800152e:	7920      	ldrb	r0, [r4, #4]
 8001530:	4298      	cmp	r0, r3
 8001532:	d8e9      	bhi.n	8001508 <HAL_PCD_Init+0x6e>
 8001534:	e016      	b.n	8001564 <HAL_PCD_Init+0xca>
    hpcd->OUT_ep[i].is_in = 0U;
 8001536:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 800153a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800153e:	2100      	movs	r1, #0
 8001540:	f883 1255 	strb.w	r1, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 8001544:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001548:	f883 1258 	strb.w	r1, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 800154c:	f8c3 125c 	str.w	r1, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001550:	f8c3 1260 	str.w	r1, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001554:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8001558:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800155c:	f8c3 1264 	str.w	r1, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001560:	3201      	adds	r2, #1
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	4290      	cmp	r0, r2
 8001566:	d8e6      	bhi.n	8001536 <HAL_PCD_Init+0x9c>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001568:	7c23      	ldrb	r3, [r4, #16]
 800156a:	f88d 3000 	strb.w	r3, [sp]
 800156e:	1d23      	adds	r3, r4, #4
 8001570:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001572:	6820      	ldr	r0, [r4, #0]
 8001574:	f001 fe70 	bl	8003258 <USB_DevInit>
 8001578:	4605      	mov	r5, r0
 800157a:	b120      	cbz	r0, 8001586 <HAL_PCD_Init+0xec>
    hpcd->State = HAL_PCD_STATE_ERROR;
 800157c:	2302      	movs	r3, #2
 800157e:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8001582:	2501      	movs	r5, #1
 8001584:	e7a8      	b.n	80014d8 <HAL_PCD_Init+0x3e>
  hpcd->USB_Address = 0U;
 8001586:	2300      	movs	r3, #0
 8001588:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800158a:	2301      	movs	r3, #1
 800158c:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 8001590:	6820      	ldr	r0, [r4, #0]
 8001592:	f002 fa33 	bl	80039fc <USB_DevDisconnect>
  return HAL_OK;
 8001596:	e79f      	b.n	80014d8 <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 8001598:	2501      	movs	r5, #1
 800159a:	e79d      	b.n	80014d8 <HAL_PCD_Init+0x3e>

0800159c <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800159c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 800159e:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 80015a2:	2a01      	cmp	r2, #1
 80015a4:	d01a      	beq.n	80015dc <HAL_PCD_Start+0x40>
{
 80015a6:	b510      	push	{r4, lr}
 80015a8:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80015aa:	2201      	movs	r2, #1
 80015ac:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80015b6:	d002      	beq.n	80015be <HAL_PCD_Start+0x22>
      (hpcd->Init.battery_charging_enable == 1U))
 80015b8:	7b42      	ldrb	r2, [r0, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80015ba:	2a01      	cmp	r2, #1
 80015bc:	d009      	beq.n	80015d2 <HAL_PCD_Start+0x36>
  __HAL_PCD_ENABLE(hpcd);
 80015be:	6820      	ldr	r0, [r4, #0]
 80015c0:	f001 fdee 	bl	80031a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80015c4:	6820      	ldr	r0, [r4, #0]
 80015c6:	f002 fa0b 	bl	80039e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015ca:	2000      	movs	r0, #0
 80015cc:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80015d0:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80015d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80015d4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80015d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80015da:	e7f0      	b.n	80015be <HAL_PCD_Start+0x22>
  __HAL_LOCK(hpcd);
 80015dc:	2002      	movs	r0, #2
}
 80015de:	4770      	bx	lr

080015e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80015e0:	b570      	push	{r4, r5, r6, lr}
 80015e2:	4604      	mov	r4, r0
 80015e4:	460d      	mov	r5, r1
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015e6:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80015e8:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80015ea:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80015ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015f2:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 80015f4:	79a1      	ldrb	r1, [r4, #6]
 80015f6:	2901      	cmp	r1, #1
 80015f8:	d011      	beq.n	800161e <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80015fa:	4938      	ldr	r1, [pc, #224]	@ (80016dc <PCD_EP_OutXfrComplete_int+0xfc>)
 80015fc:	428e      	cmp	r6, r1
 80015fe:	d056      	beq.n	80016ae <PCD_EP_OutXfrComplete_int+0xce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001600:	b93d      	cbnz	r5, 8001612 <PCD_EP_OutXfrComplete_int+0x32>
 8001602:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8001606:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800160a:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 800160e:	2b00      	cmp	r3, #0
 8001610:	d05e      	beq.n	80016d0 <PCD_EP_OutXfrComplete_int+0xf0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001612:	b2e9      	uxtb	r1, r5
 8001614:	4620      	mov	r0, r4
 8001616:	f003 fc23 	bl	8004e60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 800161a:	2000      	movs	r0, #0
 800161c:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800161e:	f012 0f08 	tst.w	r2, #8
 8001622:	d009      	beq.n	8001638 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001624:	492e      	ldr	r1, [pc, #184]	@ (80016e0 <PCD_EP_OutXfrComplete_int+0x100>)
 8001626:	428e      	cmp	r6, r1
 8001628:	d9f7      	bls.n	800161a <PCD_EP_OutXfrComplete_int+0x3a>
 800162a:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800162e:	d0f4      	beq.n	800161a <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001630:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	e7f0      	b.n	800161a <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001638:	f012 0f20 	tst.w	r2, #32
 800163c:	d002      	beq.n	8001644 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800163e:	2220      	movs	r2, #32
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	e7ea      	b.n	800161a <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001644:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8001648:	d1e7      	bne.n	800161a <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800164a:	4925      	ldr	r1, [pc, #148]	@ (80016e0 <PCD_EP_OutXfrComplete_int+0x100>)
 800164c:	428e      	cmp	r6, r1
 800164e:	d906      	bls.n	800165e <PCD_EP_OutXfrComplete_int+0x7e>
 8001650:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8001654:	d003      	beq.n	800165e <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001656:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	e7dd      	b.n	800161a <PCD_EP_OutXfrComplete_int+0x3a>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800165e:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8001662:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001666:	f8d2 1274 	ldr.w	r1, [r2, #628]	@ 0x274
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001670:	1acb      	subs	r3, r1, r3
 8001672:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        if (epnum == 0U)
 8001676:	b97d      	cbnz	r5, 8001698 <PCD_EP_OutXfrComplete_int+0xb8>
          if (ep->xfer_len == 0U)
 8001678:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800167c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001680:	f8d2 2264 	ldr.w	r2, [r2, #612]	@ 0x264
 8001684:	b16a      	cbz	r2, 80016a2 <PCD_EP_OutXfrComplete_int+0xc2>
            ep->xfer_buff += ep->xfer_count;
 8001686:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800168a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800168e:	f8d2 1260 	ldr.w	r1, [r2, #608]	@ 0x260
 8001692:	4419      	add	r1, r3
 8001694:	f8c2 1260 	str.w	r1, [r2, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001698:	b2e9      	uxtb	r1, r5
 800169a:	4620      	mov	r0, r4
 800169c:	f003 fbe0 	bl	8004e60 <HAL_PCD_DataOutStageCallback>
 80016a0:	e7bb      	b.n	800161a <PCD_EP_OutXfrComplete_int+0x3a>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016a2:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80016a6:	2101      	movs	r1, #1
 80016a8:	f002 fa2a 	bl	8003b00 <USB_EP0_OutStart>
 80016ac:	e7f4      	b.n	8001698 <PCD_EP_OutXfrComplete_int+0xb8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80016ae:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 80016b2:	d003      	beq.n	80016bc <PCD_EP_OutXfrComplete_int+0xdc>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80016b4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	e7ae      	b.n	800161a <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80016bc:	f012 0f20 	tst.w	r2, #32
 80016c0:	d001      	beq.n	80016c6 <PCD_EP_OutXfrComplete_int+0xe6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80016c2:	2220      	movs	r2, #32
 80016c4:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80016c6:	b2e9      	uxtb	r1, r5
 80016c8:	4620      	mov	r0, r4
 80016ca:	f003 fbc9 	bl	8004e60 <HAL_PCD_DataOutStageCallback>
 80016ce:	e7a4      	b.n	800161a <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80016d0:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80016d4:	2100      	movs	r1, #0
 80016d6:	f002 fa13 	bl	8003b00 <USB_EP0_OutStart>
 80016da:	e79a      	b.n	8001612 <PCD_EP_OutXfrComplete_int+0x32>
 80016dc:	4f54310a 	.word	0x4f54310a
 80016e0:	4f54300a 	.word	0x4f54300a

080016e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80016e4:	b538      	push	{r3, r4, r5, lr}
 80016e6:	4604      	mov	r4, r0
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016e8:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80016ea:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80016ec:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80016f0:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	@ 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80016f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001730 <PCD_EP_OutSetupPacket_int+0x4c>)
 80016f6:	4295      	cmp	r5, r2
 80016f8:	d907      	bls.n	800170a <PCD_EP_OutSetupPacket_int+0x26>
 80016fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016fe:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8001702:	d002      	beq.n	800170a <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001704:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001708:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800170a:	4620      	mov	r0, r4
 800170c:	f003 fba0 	bl	8004e50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001710:	4b07      	ldr	r3, [pc, #28]	@ (8001730 <PCD_EP_OutSetupPacket_int+0x4c>)
 8001712:	429d      	cmp	r5, r3
 8001714:	d902      	bls.n	800171c <PCD_EP_OutSetupPacket_int+0x38>
 8001716:	79a3      	ldrb	r3, [r4, #6]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d001      	beq.n	8001720 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 800171c:	2000      	movs	r0, #0
 800171e:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001720:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001724:	2101      	movs	r1, #1
 8001726:	6820      	ldr	r0, [r4, #0]
 8001728:	f002 f9ea 	bl	8003b00 <USB_EP0_OutStart>
 800172c:	e7f6      	b.n	800171c <PCD_EP_OutSetupPacket_int+0x38>
 800172e:	bf00      	nop
 8001730:	4f54300a 	.word	0x4f54300a

08001734 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8001734:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8001738:	2b01      	cmp	r3, #1
 800173a:	d00c      	beq.n	8001756 <HAL_PCD_SetAddress+0x22>
{
 800173c:	b510      	push	{r4, lr}
 800173e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001740:	2301      	movs	r3, #1
 8001742:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001746:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001748:	6800      	ldr	r0, [r0, #0]
 800174a:	f002 f939 	bl	80039c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800174e:	2000      	movs	r0, #0
 8001750:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001754:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001756:	2002      	movs	r0, #2
}
 8001758:	4770      	bx	lr

0800175a <HAL_PCD_EP_Open>:
{
 800175a:	b538      	push	{r3, r4, r5, lr}
 800175c:	4605      	mov	r5, r0
 800175e:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8001760:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001764:	d12b      	bne.n	80017be <HAL_PCD_EP_Open+0x64>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001766:	f001 0e0f 	and.w	lr, r1, #15
 800176a:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 800176e:	00a4      	lsls	r4, r4, #2
 8001770:	f504 7414 	add.w	r4, r4, #592	@ 0x250
 8001774:	4404      	add	r4, r0
 8001776:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 8001778:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 800177c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8001780:	2000      	movs	r0, #0
 8001782:	f88e 0255 	strb.w	r0, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8001786:	f00c 0c0f 	and.w	ip, ip, #15
 800178a:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800178e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001792:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8001794:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 8001796:	784a      	ldrb	r2, [r1, #1]
 8001798:	b10a      	cbz	r2, 800179e <HAL_PCD_EP_Open+0x44>
    ep->tx_fifo_num = ep->num;
 800179a:	f8a1 c01a 	strh.w	ip, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d01c      	beq.n	80017dc <HAL_PCD_EP_Open+0x82>
  __HAL_LOCK(hpcd);
 80017a2:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d01b      	beq.n	80017e2 <HAL_PCD_EP_Open+0x88>
 80017aa:	2301      	movs	r3, #1
 80017ac:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80017b0:	6828      	ldr	r0, [r5, #0]
 80017b2:	f001 fe2c 	bl	800340e <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017b6:	2000      	movs	r0, #0
 80017b8:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494
}
 80017bc:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017be:	f001 000f 	and.w	r0, r1, #15
 80017c2:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 80017c6:	0089      	lsls	r1, r1, #2
 80017c8:	3110      	adds	r1, #16
 80017ca:	4429      	add	r1, r5
 80017cc:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80017ce:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 80017d2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80017d6:	2401      	movs	r4, #1
 80017d8:	7544      	strb	r4, [r0, #21]
 80017da:	e7d4      	b.n	8001786 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	714b      	strb	r3, [r1, #5]
 80017e0:	e7df      	b.n	80017a2 <HAL_PCD_EP_Open+0x48>
  __HAL_LOCK(hpcd);
 80017e2:	2002      	movs	r0, #2
 80017e4:	e7ea      	b.n	80017bc <HAL_PCD_EP_Open+0x62>

080017e6 <HAL_PCD_EP_Close>:
{
 80017e6:	b510      	push	{r4, lr}
 80017e8:	4604      	mov	r4, r0
 80017ea:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80017ec:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80017f0:	d120      	bne.n	8001834 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017f2:	f001 000f 	and.w	r0, r1, #15
 80017f6:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001800:	4423      	add	r3, r4
 8001802:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8001804:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8001808:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800180c:	2300      	movs	r3, #0
 800180e:	f880 3255 	strb.w	r3, [r0, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8001812:	f002 020f 	and.w	r2, r2, #15
 8001816:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001818:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 800181c:	2b01      	cmp	r3, #1
 800181e:	d018      	beq.n	8001852 <HAL_PCD_EP_Close+0x6c>
 8001820:	2301      	movs	r3, #1
 8001822:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001826:	6820      	ldr	r0, [r4, #0]
 8001828:	f001 fe3e 	bl	80034a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800182c:	2000      	movs	r0, #0
 800182e:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001832:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001834:	f001 000f 	and.w	r0, r1, #15
 8001838:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	3310      	adds	r3, #16
 8001840:	4423      	add	r3, r4
 8001842:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 8001844:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8001848:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800184c:	2301      	movs	r3, #1
 800184e:	7543      	strb	r3, [r0, #21]
 8001850:	e7df      	b.n	8001812 <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 8001852:	2002      	movs	r0, #2
 8001854:	e7ed      	b.n	8001832 <HAL_PCD_EP_Close+0x4c>

08001856 <HAL_PCD_EP_Receive>:
{
 8001856:	b510      	push	{r4, lr}
 8001858:	4614      	mov	r4, r2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800185a:	f001 0c0f 	and.w	ip, r1, #15
 800185e:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8001862:	0089      	lsls	r1, r1, #2
 8001864:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8001868:	4401      	add	r1, r0
 800186a:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 800186c:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8001870:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8001874:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
  ep->xfer_len = len;
 8001878:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
  ep->xfer_count = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	f8ce 3268 	str.w	r3, [lr, #616]	@ 0x268
  ep->is_in = 0U;
 8001882:	f88e 3255 	strb.w	r3, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8001886:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
 800188a:	7982      	ldrb	r2, [r0, #6]
 800188c:	2a01      	cmp	r2, #1
 800188e:	d004      	beq.n	800189a <HAL_PCD_EP_Receive+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001890:	6800      	ldr	r0, [r0, #0]
 8001892:	f001 feef 	bl	8003674 <USB_EPStartXfer>
}
 8001896:	2000      	movs	r0, #0
 8001898:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 800189a:	f8ce 4270 	str.w	r4, [lr, #624]	@ 0x270
 800189e:	e7f7      	b.n	8001890 <HAL_PCD_EP_Receive+0x3a>

080018a0 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80018a0:	f001 010f 	and.w	r1, r1, #15
 80018a4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80018a8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 80018ac:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
 80018b0:	4770      	bx	lr

080018b2 <HAL_PCD_EP_Transmit>:
{
 80018b2:	b510      	push	{r4, lr}
 80018b4:	4614      	mov	r4, r2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018b6:	f001 0c0f 	and.w	ip, r1, #15
 80018ba:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 80018be:	0089      	lsls	r1, r1, #2
 80018c0:	3110      	adds	r1, #16
 80018c2:	4401      	add	r1, r0
 80018c4:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 80018c6:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 80018ca:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80018ce:	f8ce 2020 	str.w	r2, [lr, #32]
  ep->xfer_len = len;
 80018d2:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  ep->xfer_count = 0U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f8ce 3028 	str.w	r3, [lr, #40]	@ 0x28
  ep->is_in = 1U;
 80018dc:	2301      	movs	r3, #1
 80018de:	f88e 3015 	strb.w	r3, [lr, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018e2:	f88e c014 	strb.w	ip, [lr, #20]
  if (hpcd->Init.dma_enable == 1U)
 80018e6:	7982      	ldrb	r2, [r0, #6]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d004      	beq.n	80018f6 <HAL_PCD_EP_Transmit+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80018ec:	6800      	ldr	r0, [r0, #0]
 80018ee:	f001 fec1 	bl	8003674 <USB_EPStartXfer>
}
 80018f2:	2000      	movs	r0, #0
 80018f4:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80018f6:	f8ce 4030 	str.w	r4, [lr, #48]	@ 0x30
 80018fa:	e7f7      	b.n	80018ec <HAL_PCD_EP_Transmit+0x3a>

080018fc <HAL_PCD_EP_SetStall>:
{
 80018fc:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80018fe:	f001 050f 	and.w	r5, r1, #15
 8001902:	7902      	ldrb	r2, [r0, #4]
 8001904:	42aa      	cmp	r2, r5
 8001906:	d338      	bcc.n	800197a <HAL_PCD_EP_SetStall+0x7e>
 8001908:	4604      	mov	r4, r0
 800190a:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 800190c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001910:	d11f      	bne.n	8001952 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8001912:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001916:	0089      	lsls	r1, r1, #2
 8001918:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 800191c:	4401      	add	r1, r0
 800191e:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8001920:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8001924:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 800192e:	2301      	movs	r3, #1
 8001930:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001932:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8001934:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8001938:	2b01      	cmp	r3, #1
 800193a:	d020      	beq.n	800197e <HAL_PCD_EP_SetStall+0x82>
 800193c:	2301      	movs	r3, #1
 800193e:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001942:	6820      	ldr	r0, [r4, #0]
 8001944:	f001 ffe1 	bl	800390a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001948:	b185      	cbz	r5, 800196c <HAL_PCD_EP_SetStall+0x70>
  __HAL_UNLOCK(hpcd);
 800194a:	2000      	movs	r0, #0
 800194c:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001950:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001952:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 8001956:	0089      	lsls	r1, r1, #2
 8001958:	3110      	adds	r1, #16
 800195a:	4401      	add	r1, r0
 800195c:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800195e:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8001962:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001966:	2201      	movs	r2, #1
 8001968:	755a      	strb	r2, [r3, #21]
 800196a:	e7e0      	b.n	800192e <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800196c:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001970:	79a1      	ldrb	r1, [r4, #6]
 8001972:	6820      	ldr	r0, [r4, #0]
 8001974:	f002 f8c4 	bl	8003b00 <USB_EP0_OutStart>
 8001978:	e7e7      	b.n	800194a <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 800197a:	2001      	movs	r0, #1
 800197c:	e7e8      	b.n	8001950 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 800197e:	2002      	movs	r0, #2
 8001980:	e7e6      	b.n	8001950 <HAL_PCD_EP_SetStall+0x54>

08001982 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001982:	f001 030f 	and.w	r3, r1, #15
 8001986:	7902      	ldrb	r2, [r0, #4]
 8001988:	429a      	cmp	r2, r3
 800198a:	d330      	bcc.n	80019ee <HAL_PCD_EP_ClrStall+0x6c>
{
 800198c:	b510      	push	{r4, lr}
 800198e:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8001990:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001994:	d11e      	bne.n	80019d4 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001996:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 800199a:	0089      	lsls	r1, r1, #2
 800199c:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 80019a0:	4401      	add	r1, r0
 80019a2:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80019a4:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80019a8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80019ac:	2000      	movs	r0, #0
 80019ae:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  ep->is_stall = 0U;
 80019b2:	2200      	movs	r2, #0
 80019b4:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019b6:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80019b8:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d018      	beq.n	80019f2 <HAL_PCD_EP_ClrStall+0x70>
 80019c0:	2301      	movs	r3, #1
 80019c2:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80019c6:	6820      	ldr	r0, [r4, #0]
 80019c8:	f001 ffcc 	bl	8003964 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80019cc:	2000      	movs	r0, #0
 80019ce:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80019d2:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019d4:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80019d8:	0089      	lsls	r1, r1, #2
 80019da:	3110      	adds	r1, #16
 80019dc:	4401      	add	r1, r0
 80019de:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80019e0:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80019e4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80019e8:	2001      	movs	r0, #1
 80019ea:	7550      	strb	r0, [r2, #21]
 80019ec:	e7e1      	b.n	80019b2 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 80019ee:	2001      	movs	r0, #1
}
 80019f0:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80019f2:	2002      	movs	r0, #2
 80019f4:	e7ed      	b.n	80019d2 <HAL_PCD_EP_ClrStall+0x50>

080019f6 <HAL_PCD_EP_Abort>:
{
 80019f6:	b508      	push	{r3, lr}
  if ((0x80U & ep_addr) == 0x80U)
 80019f8:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80019fc:	d10c      	bne.n	8001a18 <HAL_PCD_EP_Abort+0x22>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019fe:	f001 010f 	and.w	r1, r1, #15
 8001a02:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001a06:	0089      	lsls	r1, r1, #2
 8001a08:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8001a0c:	4401      	add	r1, r0
 8001a0e:	3104      	adds	r1, #4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001a10:	6800      	ldr	r0, [r0, #0]
 8001a12:	f001 fdb9 	bl	8003588 <USB_EPStopXfer>
}
 8001a16:	bd08      	pop	{r3, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a18:	f001 010f 	and.w	r1, r1, #15
 8001a1c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001a20:	0089      	lsls	r1, r1, #2
 8001a22:	3110      	adds	r1, #16
 8001a24:	4401      	add	r1, r0
 8001a26:	3104      	adds	r1, #4
 8001a28:	e7f2      	b.n	8001a10 <HAL_PCD_EP_Abort+0x1a>

08001a2a <HAL_PCD_IRQHandler>:
{
 8001a2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a32:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a34:	4628      	mov	r0, r5
 8001a36:	f002 f81e 	bl	8003a76 <USB_GetMode>
 8001a3a:	b110      	cbz	r0, 8001a42 <HAL_PCD_IRQHandler+0x18>
}
 8001a3c:	b003      	add	sp, #12
 8001a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a42:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a44:	6820      	ldr	r0, [r4, #0]
 8001a46:	f001 ffe7 	bl	8003a18 <USB_ReadInterrupts>
 8001a4a:	2800      	cmp	r0, #0
 8001a4c:	d0f6      	beq.n	8001a3c <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001a4e:	f505 6700 	add.w	r7, r5, #2048	@ 0x800
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8001a58:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a5c:	6820      	ldr	r0, [r4, #0]
 8001a5e:	f001 ffdb 	bl	8003a18 <USB_ReadInterrupts>
 8001a62:	f010 0f02 	tst.w	r0, #2
 8001a66:	d004      	beq.n	8001a72 <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a68:	6822      	ldr	r2, [r4, #0]
 8001a6a:	6953      	ldr	r3, [r2, #20]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001a72:	6820      	ldr	r0, [r4, #0]
 8001a74:	f001 ffd0 	bl	8003a18 <USB_ReadInterrupts>
 8001a78:	f010 0f10 	tst.w	r0, #16
 8001a7c:	d013      	beq.n	8001aa6 <HAL_PCD_IRQHandler+0x7c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a7e:	6822      	ldr	r2, [r4, #0]
 8001a80:	6993      	ldr	r3, [r2, #24]
 8001a82:	f023 0310 	bic.w	r3, r3, #16
 8001a86:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 8001a88:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001a8c:	f008 090f 	and.w	r9, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001a90:	f3c8 4343 	ubfx	r3, r8, #17, #4
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d04b      	beq.n	8001b30 <HAL_PCD_IRQHandler+0x106>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001a98:	2b06      	cmp	r3, #6
 8001a9a:	d06f      	beq.n	8001b7c <HAL_PCD_IRQHandler+0x152>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a9c:	6822      	ldr	r2, [r4, #0]
 8001a9e:	6993      	ldr	r3, [r2, #24]
 8001aa0:	f043 0310 	orr.w	r3, r3, #16
 8001aa4:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001aa6:	6820      	ldr	r0, [r4, #0]
 8001aa8:	f001 ffb6 	bl	8003a18 <USB_ReadInterrupts>
 8001aac:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 8001ab0:	d176      	bne.n	8001ba0 <HAL_PCD_IRQHandler+0x176>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001ab2:	6820      	ldr	r0, [r4, #0]
 8001ab4:	f001 ffb0 	bl	8003a18 <USB_ReadInterrupts>
 8001ab8:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 8001abc:	f040 80e0 	bne.w	8001c80 <HAL_PCD_IRQHandler+0x256>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001ac0:	6820      	ldr	r0, [r4, #0]
 8001ac2:	f001 ffa9 	bl	8003a18 <USB_ReadInterrupts>
 8001ac6:	2800      	cmp	r0, #0
 8001ac8:	f2c0 8161 	blt.w	8001d8e <HAL_PCD_IRQHandler+0x364>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001acc:	6820      	ldr	r0, [r4, #0]
 8001ace:	f001 ffa3 	bl	8003a18 <USB_ReadInterrupts>
 8001ad2:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8001ad6:	d009      	beq.n	8001aec <HAL_PCD_IRQHandler+0xc2>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	f013 0f01 	tst.w	r3, #1
 8001ade:	f040 816e 	bne.w	8001dbe <HAL_PCD_IRQHandler+0x394>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001ae2:	6822      	ldr	r2, [r4, #0]
 8001ae4:	6953      	ldr	r3, [r2, #20]
 8001ae6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001aea:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001aec:	6820      	ldr	r0, [r4, #0]
 8001aee:	f001 ff93 	bl	8003a18 <USB_ReadInterrupts>
 8001af2:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 8001af6:	f040 8166 	bne.w	8001dc6 <HAL_PCD_IRQHandler+0x39c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001afa:	6820      	ldr	r0, [r4, #0]
 8001afc:	f001 ff8c 	bl	8003a18 <USB_ReadInterrupts>
 8001b00:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8001b04:	f040 81b3 	bne.w	8001e6e <HAL_PCD_IRQHandler+0x444>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b08:	6820      	ldr	r0, [r4, #0]
 8001b0a:	f001 ff85 	bl	8003a18 <USB_ReadInterrupts>
 8001b0e:	f010 0f08 	tst.w	r0, #8
 8001b12:	f040 81c4 	bne.w	8001e9e <HAL_PCD_IRQHandler+0x474>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001b16:	6820      	ldr	r0, [r4, #0]
 8001b18:	f001 ff7e 	bl	8003a18 <USB_ReadInterrupts>
 8001b1c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8001b20:	f000 81d7 	beq.w	8001ed2 <HAL_PCD_IRQHandler+0x4a8>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001b24:	69ab      	ldr	r3, [r5, #24]
 8001b26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b2a:	61ab      	str	r3, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b2c:	2601      	movs	r6, #1
 8001b2e:	e1c0      	b.n	8001eb2 <HAL_PCD_IRQHandler+0x488>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b30:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001b34:	ea18 0f03 	tst.w	r8, r3
 8001b38:	d0b0      	beq.n	8001a9c <HAL_PCD_IRQHandler+0x72>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b3a:	ea4f 1a18 	mov.w	sl, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	eb09 0bc9 	add.w	fp, r9, r9, lsl #3
 8001b48:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 8001b4c:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8001b50:	f8db 1260 	ldr.w	r1, [fp, #608]	@ 0x260
 8001b54:	4628      	mov	r0, r5
 8001b56:	f001 feb5 	bl	80038c4 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b5a:	f8db 3260 	ldr.w	r3, [fp, #608]	@ 0x260
 8001b5e:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 8001b62:	4453      	add	r3, sl
 8001b64:	f8cb 3260 	str.w	r3, [fp, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b68:	f8db 3268 	ldr.w	r3, [fp, #616]	@ 0x268
 8001b6c:	9a01      	ldr	r2, [sp, #4]
 8001b6e:	444a      	add	r2, r9
 8001b70:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001b74:	4453      	add	r3, sl
 8001b76:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 8001b7a:	e78f      	b.n	8001a9c <HAL_PCD_IRQHandler+0x72>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001b7c:	2208      	movs	r2, #8
 8001b7e:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 8001b82:	4628      	mov	r0, r5
 8001b84:	f001 fe9e 	bl	80038c4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b88:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001b8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001b90:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 8001b94:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8001b98:	4442      	add	r2, r8
 8001b9a:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
 8001b9e:	e77d      	b.n	8001a9c <HAL_PCD_IRQHandler+0x72>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ba0:	6820      	ldr	r0, [r4, #0]
 8001ba2:	f001 ff3d 	bl	8003a20 <USB_ReadDevAllOutEpInterrupt>
 8001ba6:	4680      	mov	r8, r0
      epnum = 0U;
 8001ba8:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8001baa:	e035      	b.n	8001c18 <HAL_PCD_IRQHandler+0x1ee>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001bac:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001bb6:	4649      	mov	r1, r9
 8001bb8:	4620      	mov	r0, r4
 8001bba:	f7ff fd11 	bl	80015e0 <PCD_EP_OutXfrComplete_int>
 8001bbe:	e03c      	b.n	8001c3a <HAL_PCD_IRQHandler+0x210>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001bc0:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001bc4:	2208      	movs	r2, #8
 8001bc6:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001bca:	4649      	mov	r1, r9
 8001bcc:	4620      	mov	r0, r4
 8001bce:	f7ff fd89 	bl	80016e4 <PCD_EP_OutSetupPacket_int>
 8001bd2:	e035      	b.n	8001c40 <HAL_PCD_IRQHandler+0x216>
            if (ep->is_iso_incomplete == 1U)
 8001bd4:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001bd8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001bdc:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d041      	beq.n	8001c68 <HAL_PCD_IRQHandler+0x23e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001be4:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001be8:	2202      	movs	r2, #2
 8001bea:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001bee:	f01a 0f20 	tst.w	sl, #32
 8001bf2:	d004      	beq.n	8001bfe <HAL_PCD_IRQHandler+0x1d4>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001bf4:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001bfe:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
 8001c02:	d005      	beq.n	8001c10 <HAL_PCD_IRQHandler+0x1e6>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c04:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001c08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c0c:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
        epnum++;
 8001c10:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001c14:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8001c18:	f1b8 0f00 	cmp.w	r8, #0
 8001c1c:	f43f af49 	beq.w	8001ab2 <HAL_PCD_IRQHandler+0x88>
        if ((ep_intr & 0x1U) != 0U)
 8001c20:	f018 0f01 	tst.w	r8, #1
 8001c24:	d0f4      	beq.n	8001c10 <HAL_PCD_IRQHandler+0x1e6>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c26:	fa5f fb89 	uxtb.w	fp, r9
 8001c2a:	4659      	mov	r1, fp
 8001c2c:	6820      	ldr	r0, [r4, #0]
 8001c2e:	f001 ff07 	bl	8003a40 <USB_ReadDevOutEPInterrupt>
 8001c32:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c34:	f010 0f01 	tst.w	r0, #1
 8001c38:	d1b8      	bne.n	8001bac <HAL_PCD_IRQHandler+0x182>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c3a:	f01a 0f08 	tst.w	sl, #8
 8001c3e:	d1bf      	bne.n	8001bc0 <HAL_PCD_IRQHandler+0x196>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c40:	f01a 0f10 	tst.w	sl, #16
 8001c44:	d004      	beq.n	8001c50 <HAL_PCD_IRQHandler+0x226>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c46:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001c4a:	2210      	movs	r2, #16
 8001c4c:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001c50:	f01a 0f02 	tst.w	sl, #2
 8001c54:	d0cb      	beq.n	8001bee <HAL_PCD_IRQHandler+0x1c4>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001c56:	696b      	ldr	r3, [r5, #20]
 8001c58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001c5c:	d0ba      	beq.n	8001bd4 <HAL_PCD_IRQHandler+0x1aa>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	e7b5      	b.n	8001bd4 <HAL_PCD_IRQHandler+0x1aa>
              ep->is_iso_incomplete = 0U;
 8001c68:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001c6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c76:	4659      	mov	r1, fp
 8001c78:	4620      	mov	r0, r4
 8001c7a:	f003 f93f 	bl	8004efc <HAL_PCD_ISOOUTIncompleteCallback>
 8001c7e:	e7b1      	b.n	8001be4 <HAL_PCD_IRQHandler+0x1ba>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c80:	6820      	ldr	r0, [r4, #0]
 8001c82:	f001 fed5 	bl	8003a30 <USB_ReadDevAllInEpInterrupt>
 8001c86:	4680      	mov	r8, r0
      epnum = 0U;
 8001c88:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8001c8a:	e025      	b.n	8001cd8 <HAL_PCD_IRQHandler+0x2ae>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001c8c:	4659      	mov	r1, fp
 8001c8e:	4620      	mov	r0, r4
 8001c90:	f003 f8f2 	bl	8004e78 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001c94:	f01a 0f08 	tst.w	sl, #8
 8001c98:	d004      	beq.n	8001ca4 <HAL_PCD_IRQHandler+0x27a>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001c9a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001c9e:	2208      	movs	r2, #8
 8001ca0:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001ca4:	f01a 0f10 	tst.w	sl, #16
 8001ca8:	d004      	beq.n	8001cb4 <HAL_PCD_IRQHandler+0x28a>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001caa:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001cae:	2210      	movs	r2, #16
 8001cb0:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001cb4:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8001cb8:	d004      	beq.n	8001cc4 <HAL_PCD_IRQHandler+0x29a>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001cba:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001cbe:	2240      	movs	r2, #64	@ 0x40
 8001cc0:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001cc4:	f01a 0f02 	tst.w	sl, #2
 8001cc8:	d140      	bne.n	8001d4c <HAL_PCD_IRQHandler+0x322>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001cca:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 8001cce:	d159      	bne.n	8001d84 <HAL_PCD_IRQHandler+0x35a>
        epnum++;
 8001cd0:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001cd4:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8001cd8:	f1b8 0f00 	cmp.w	r8, #0
 8001cdc:	f43f aef0 	beq.w	8001ac0 <HAL_PCD_IRQHandler+0x96>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001ce0:	f018 0f01 	tst.w	r8, #1
 8001ce4:	d0f4      	beq.n	8001cd0 <HAL_PCD_IRQHandler+0x2a6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ce6:	fa5f fb89 	uxtb.w	fp, r9
 8001cea:	4659      	mov	r1, fp
 8001cec:	6820      	ldr	r0, [r4, #0]
 8001cee:	f001 feb0 	bl	8003a52 <USB_ReadDevInEPInterrupt>
 8001cf2:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001cf4:	f010 0f01 	tst.w	r0, #1
 8001cf8:	d0cc      	beq.n	8001c94 <HAL_PCD_IRQHandler+0x26a>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001cfa:	f009 020f 	and.w	r2, r9, #15
 8001cfe:	2101      	movs	r1, #1
 8001d00:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d06:	ea23 0302 	bic.w	r3, r3, r2
 8001d0a:	637b      	str	r3, [r7, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001d0c:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001d10:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
            if (hpcd->Init.dma_enable == 1U)
 8001d14:	79a3      	ldrb	r3, [r4, #6]
 8001d16:	428b      	cmp	r3, r1
 8001d18:	d1b8      	bne.n	8001c8c <HAL_PCD_IRQHandler+0x262>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001d1a:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001d1e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001d22:	6a1a      	ldr	r2, [r3, #32]
 8001d24:	69d9      	ldr	r1, [r3, #28]
 8001d26:	440a      	add	r2, r1
 8001d28:	621a      	str	r2, [r3, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d2a:	f1b9 0f00 	cmp.w	r9, #0
 8001d2e:	d1ad      	bne.n	8001c8c <HAL_PCD_IRQHandler+0x262>
 8001d30:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001d34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1a6      	bne.n	8001c8c <HAL_PCD_IRQHandler+0x262>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d3e:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001d42:	2101      	movs	r1, #1
 8001d44:	6820      	ldr	r0, [r4, #0]
 8001d46:	f001 fedb 	bl	8003b00 <USB_EP0_OutStart>
 8001d4a:	e79f      	b.n	8001c8c <HAL_PCD_IRQHandler+0x262>
            (void)USB_FlushTxFifo(USBx, epnum);
 8001d4c:	4649      	mov	r1, r9
 8001d4e:	4628      	mov	r0, r5
 8001d50:	f001 fa32 	bl	80031b8 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8001d54:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001d58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001d5c:	7ddb      	ldrb	r3, [r3, #23]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d005      	beq.n	8001d6e <HAL_PCD_IRQHandler+0x344>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001d62:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001d66:	2202      	movs	r2, #2
 8001d68:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 8001d6c:	e7ad      	b.n	8001cca <HAL_PCD_IRQHandler+0x2a0>
              ep->is_iso_incomplete = 0U;
 8001d6e:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001d72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001d76:	2200      	movs	r2, #0
 8001d78:	75da      	strb	r2, [r3, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d7a:	4659      	mov	r1, fp
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	f003 f8c3 	bl	8004f08 <HAL_PCD_ISOINIncompleteCallback>
 8001d82:	e7ee      	b.n	8001d62 <HAL_PCD_IRQHandler+0x338>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001d84:	4649      	mov	r1, r9
 8001d86:	4620      	mov	r0, r4
 8001d88:	f7ff fb1f 	bl	80013ca <PCD_WriteEmptyTxFifo>
 8001d8c:	e7a0      	b.n	8001cd0 <HAL_PCD_IRQHandler+0x2a6>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f023 0301 	bic.w	r3, r3, #1
 8001d94:	607b      	str	r3, [r7, #4]
      if (hpcd->LPM_State == LPM_L1)
 8001d96:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d008      	beq.n	8001db0 <HAL_PCD_IRQHandler+0x386>
        HAL_PCD_ResumeCallback(hpcd);
 8001d9e:	4620      	mov	r0, r4
 8001da0:	f003 f8a6 	bl	8004ef0 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001da4:	6822      	ldr	r2, [r4, #0]
 8001da6:	6953      	ldr	r3, [r2, #20]
 8001da8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001dac:	6153      	str	r3, [r2, #20]
 8001dae:	e68d      	b.n	8001acc <HAL_PCD_IRQHandler+0xa2>
        hpcd->LPM_State = LPM_L0;
 8001db0:	2100      	movs	r1, #0
 8001db2:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001db6:	4620      	mov	r0, r4
 8001db8:	f000 f93f 	bl	800203a <HAL_PCDEx_LPM_Callback>
 8001dbc:	e7f2      	b.n	8001da4 <HAL_PCD_IRQHandler+0x37a>
        HAL_PCD_SuspendCallback(hpcd);
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	f003 f87e 	bl	8004ec0 <HAL_PCD_SuspendCallback>
 8001dc4:	e68d      	b.n	8001ae2 <HAL_PCD_IRQHandler+0xb8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f023 0301 	bic.w	r3, r3, #1
 8001dcc:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001dce:	2110      	movs	r1, #16
 8001dd0:	6820      	ldr	r0, [r4, #0]
 8001dd2:	f001 f9f1 	bl	80031b8 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dd6:	e01a      	b.n	8001e0e <HAL_PCD_IRQHandler+0x3e4>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001dd8:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8001ddc:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8001de0:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001de4:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8001de8:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001dec:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001df0:	f8c3 1b08 	str.w	r1, [r3, #2824]	@ 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001df4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8001df8:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001dfc:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001e00:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8001e04:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8001e08:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e0c:	3601      	adds	r6, #1
 8001e0e:	7923      	ldrb	r3, [r4, #4]
 8001e10:	42b3      	cmp	r3, r6
 8001e12:	d8e1      	bhi.n	8001dd8 <HAL_PCD_IRQHandler+0x3ae>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001e1a:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001e1c:	7be3      	ldrb	r3, [r4, #15]
 8001e1e:	b1db      	cbz	r3, 8001e58 <HAL_PCD_IRQHandler+0x42e>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001e20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e24:	f043 030b 	orr.w	r3, r3, #11
 8001e28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001e2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e2e:	f043 030b 	orr.w	r3, r3, #11
 8001e32:	647b      	str	r3, [r7, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001e34:	f8d5 3800 	ldr.w	r3, [r5, #2048]	@ 0x800
 8001e38:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001e3c:	f8c5 3800 	str.w	r3, [r5, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e40:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001e44:	79a1      	ldrb	r1, [r4, #6]
 8001e46:	6820      	ldr	r0, [r4, #0]
 8001e48:	f001 fe5a 	bl	8003b00 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001e4c:	6822      	ldr	r2, [r4, #0]
 8001e4e:	6953      	ldr	r3, [r2, #20]
 8001e50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e54:	6153      	str	r3, [r2, #20]
 8001e56:	e650      	b.n	8001afa <HAL_PCD_IRQHandler+0xd0>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e5e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001e62:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	f043 030b 	orr.w	r3, r3, #11
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	e7e2      	b.n	8001e34 <HAL_PCD_IRQHandler+0x40a>
      (void)USB_ActivateSetup(hpcd->Instance);
 8001e6e:	6820      	ldr	r0, [r4, #0]
 8001e70:	f001 fe36 	bl	8003ae0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001e74:	6820      	ldr	r0, [r4, #0]
 8001e76:	f001 fab9 	bl	80033ec <USB_GetDevSpeed>
 8001e7a:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e7c:	6826      	ldr	r6, [r4, #0]
 8001e7e:	f000 fbdd 	bl	800263c <HAL_RCC_GetHCLKFreq>
 8001e82:	4601      	mov	r1, r0
 8001e84:	79e2      	ldrb	r2, [r4, #7]
 8001e86:	4630      	mov	r0, r6
 8001e88:	f001 f918 	bl	80030bc <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	f003 f804 	bl	8004e9a <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001e92:	6822      	ldr	r2, [r4, #0]
 8001e94:	6953      	ldr	r3, [r2, #20]
 8001e96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e9a:	6153      	str	r3, [r2, #20]
 8001e9c:	e634      	b.n	8001b08 <HAL_PCD_IRQHandler+0xde>
      HAL_PCD_SOFCallback(hpcd);
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	f002 fff5 	bl	8004e8e <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001ea4:	6822      	ldr	r2, [r4, #0]
 8001ea6:	6953      	ldr	r3, [r2, #20]
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	6153      	str	r3, [r2, #20]
 8001eae:	e632      	b.n	8001b16 <HAL_PCD_IRQHandler+0xec>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eb0:	3601      	adds	r6, #1
 8001eb2:	7923      	ldrb	r3, [r4, #4]
 8001eb4:	42b3      	cmp	r3, r6
 8001eb6:	d90c      	bls.n	8001ed2 <HAL_PCD_IRQHandler+0x4a8>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001eb8:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8001ebc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001ec0:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d1f3      	bne.n	8001eb0 <HAL_PCD_IRQHandler+0x486>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001ec8:	b2f1      	uxtb	r1, r6
 8001eca:	4620      	mov	r0, r4
 8001ecc:	f7ff fd93 	bl	80019f6 <HAL_PCD_EP_Abort>
 8001ed0:	e7ee      	b.n	8001eb0 <HAL_PCD_IRQHandler+0x486>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ed2:	6820      	ldr	r0, [r4, #0]
 8001ed4:	f001 fda0 	bl	8003a18 <USB_ReadInterrupts>
 8001ed8:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 8001edc:	d125      	bne.n	8001f2a <HAL_PCD_IRQHandler+0x500>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ede:	6820      	ldr	r0, [r4, #0]
 8001ee0:	f001 fd9a 	bl	8003a18 <USB_ReadInterrupts>
 8001ee4:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 8001ee8:	d059      	beq.n	8001f9e <HAL_PCD_IRQHandler+0x574>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eea:	2301      	movs	r3, #1
 8001eec:	e026      	b.n	8001f3c <HAL_PCD_IRQHandler+0x512>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eee:	3601      	adds	r6, #1
 8001ef0:	7923      	ldrb	r3, [r4, #4]
 8001ef2:	42b3      	cmp	r3, r6
 8001ef4:	d91b      	bls.n	8001f2e <HAL_PCD_IRQHandler+0x504>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001ef6:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8001efa:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001efe:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8001f02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001f06:	7e1b      	ldrb	r3, [r3, #24]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d1f0      	bne.n	8001eee <HAL_PCD_IRQHandler+0x4c4>
 8001f0c:	2a00      	cmp	r2, #0
 8001f0e:	daee      	bge.n	8001eee <HAL_PCD_IRQHandler+0x4c4>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001f10:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8001f14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001f18:	2201      	movs	r2, #1
 8001f1a:	75da      	strb	r2, [r3, #23]
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001f1c:	f066 017f 	orn	r1, r6, #127	@ 0x7f
 8001f20:	b2c9      	uxtb	r1, r1
 8001f22:	4620      	mov	r0, r4
 8001f24:	f7ff fd67 	bl	80019f6 <HAL_PCD_EP_Abort>
 8001f28:	e7e1      	b.n	8001eee <HAL_PCD_IRQHandler+0x4c4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f2a:	2601      	movs	r6, #1
 8001f2c:	e7e0      	b.n	8001ef0 <HAL_PCD_IRQHandler+0x4c6>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f2e:	6822      	ldr	r2, [r4, #0]
 8001f30:	6953      	ldr	r3, [r2, #20]
 8001f32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f36:	6153      	str	r3, [r2, #20]
 8001f38:	e7d1      	b.n	8001ede <HAL_PCD_IRQHandler+0x4b4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	7922      	ldrb	r2, [r4, #4]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d928      	bls.n	8001f94 <HAL_PCD_IRQHandler+0x56a>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001f42:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8001f46:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	@ 0xb00
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f4a:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001f4e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001f52:	f892 2258 	ldrb.w	r2, [r2, #600]	@ 0x258
 8001f56:	2a01      	cmp	r2, #1
 8001f58:	d1ef      	bne.n	8001f3a <HAL_PCD_IRQHandler+0x510>
 8001f5a:	2900      	cmp	r1, #0
 8001f5c:	daed      	bge.n	8001f3a <HAL_PCD_IRQHandler+0x510>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001f5e:	f401 3180 	and.w	r1, r1, #65536	@ 0x10000
 8001f62:	f8d4 24d4 	ldr.w	r2, [r4, #1236]	@ 0x4d4
 8001f66:	f002 0201 	and.w	r2, r2, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f6a:	4291      	cmp	r1, r2
 8001f6c:	d1e5      	bne.n	8001f3a <HAL_PCD_IRQHandler+0x510>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001f6e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001f72:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001f76:	2101      	movs	r1, #1
 8001f78:	f882 1257 	strb.w	r1, [r2, #599]	@ 0x257
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001f7c:	69aa      	ldr	r2, [r5, #24]
 8001f7e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f82:	61aa      	str	r2, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001f84:	696a      	ldr	r2, [r5, #20]
 8001f86:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8001f8a:	d1d6      	bne.n	8001f3a <HAL_PCD_IRQHandler+0x510>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f92:	607b      	str	r3, [r7, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f94:	6822      	ldr	r2, [r4, #0]
 8001f96:	6953      	ldr	r3, [r2, #20]
 8001f98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f9c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001f9e:	6820      	ldr	r0, [r4, #0]
 8001fa0:	f001 fd3a 	bl	8003a18 <USB_ReadInterrupts>
 8001fa4:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8001fa8:	d110      	bne.n	8001fcc <HAL_PCD_IRQHandler+0x5a2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001faa:	6820      	ldr	r0, [r4, #0]
 8001fac:	f001 fd34 	bl	8003a18 <USB_ReadInterrupts>
 8001fb0:	f010 0f04 	tst.w	r0, #4
 8001fb4:	f43f ad42 	beq.w	8001a3c <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8001fb8:	6823      	ldr	r3, [r4, #0]
 8001fba:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001fbc:	f015 0f04 	tst.w	r5, #4
 8001fc0:	d10d      	bne.n	8001fde <HAL_PCD_IRQHandler+0x5b4>
      hpcd->Instance->GOTGINT |= RegVal;
 8001fc2:	6822      	ldr	r2, [r4, #0]
 8001fc4:	6853      	ldr	r3, [r2, #4]
 8001fc6:	432b      	orrs	r3, r5
 8001fc8:	6053      	str	r3, [r2, #4]
 8001fca:	e537      	b.n	8001a3c <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 8001fcc:	4620      	mov	r0, r4
 8001fce:	f002 ffa1 	bl	8004f14 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001fd2:	6822      	ldr	r2, [r4, #0]
 8001fd4:	6953      	ldr	r3, [r2, #20]
 8001fd6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001fda:	6153      	str	r3, [r2, #20]
 8001fdc:	e7e5      	b.n	8001faa <HAL_PCD_IRQHandler+0x580>
        HAL_PCD_DisconnectCallback(hpcd);
 8001fde:	4620      	mov	r0, r4
 8001fe0:	f002 ff9e 	bl	8004f20 <HAL_PCD_DisconnectCallback>
 8001fe4:	e7ed      	b.n	8001fc2 <HAL_PCD_IRQHandler+0x598>

08001fe6 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001fe6:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001fe8:	6804      	ldr	r4, [r0, #0]
 8001fea:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 8001fec:	b931      	cbnz	r1, 8001ffc <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001fee:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001ff2:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001ffe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002000:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002004:	2300      	movs	r3, #0
 8002006:	e008      	b.n	800201a <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002008:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800200c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8002010:	6849      	ldr	r1, [r1, #4]
 8002012:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002016:	3301      	adds	r3, #1
 8002018:	b2db      	uxtb	r3, r3
 800201a:	f10c 31ff 	add.w	r1, ip, #4294967295	@ 0xffffffff
 800201e:	428b      	cmp	r3, r1
 8002020:	d3f2      	bcc.n	8002008 <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002022:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8002026:	f10c 013f 	add.w	r1, ip, #63	@ 0x3f
 800202a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800202e:	6060      	str	r0, [r4, #4]
 8002030:	e7e0      	b.n	8001ff4 <HAL_PCDEx_SetTxFiFo+0xe>

08002032 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8002032:	6803      	ldr	r3, [r0, #0]
 8002034:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 8002036:	2000      	movs	r0, #0
 8002038:	4770      	bx	lr

0800203a <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800203a:	4770      	bx	lr

0800203c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800203c:	2800      	cmp	r0, #0
 800203e:	f000 81e0 	beq.w	8002402 <HAL_RCC_OscConfig+0x3c6>
{
 8002042:	b570      	push	{r4, r5, r6, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002048:	6803      	ldr	r3, [r0, #0]
 800204a:	f013 0f01 	tst.w	r3, #1
 800204e:	d03b      	beq.n	80020c8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002050:	4b9f      	ldr	r3, [pc, #636]	@ (80022d0 <HAL_RCC_OscConfig+0x294>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b04      	cmp	r3, #4
 800205a:	d02c      	beq.n	80020b6 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800205c:	4b9c      	ldr	r3, [pc, #624]	@ (80022d0 <HAL_RCC_OscConfig+0x294>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002064:	2b08      	cmp	r3, #8
 8002066:	d021      	beq.n	80020ac <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002068:	6863      	ldr	r3, [r4, #4]
 800206a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800206e:	d04f      	beq.n	8002110 <HAL_RCC_OscConfig+0xd4>
 8002070:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002074:	d052      	beq.n	800211c <HAL_RCC_OscConfig+0xe0>
 8002076:	4b96      	ldr	r3, [pc, #600]	@ (80022d0 <HAL_RCC_OscConfig+0x294>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002086:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002088:	6863      	ldr	r3, [r4, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d050      	beq.n	8002130 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7fe fdad 	bl	8000bec <HAL_GetTick>
 8002092:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002094:	4b8e      	ldr	r3, [pc, #568]	@ (80022d0 <HAL_RCC_OscConfig+0x294>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800209c:	d114      	bne.n	80020c8 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800209e:	f7fe fda5 	bl	8000bec <HAL_GetTick>
 80020a2:	1b40      	subs	r0, r0, r5
 80020a4:	2864      	cmp	r0, #100	@ 0x64
 80020a6:	d9f5      	bls.n	8002094 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80020a8:	2003      	movs	r0, #3
 80020aa:	e1b1      	b.n	8002410 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ac:	4b88      	ldr	r3, [pc, #544]	@ (80022d0 <HAL_RCC_OscConfig+0x294>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80020b4:	d0d8      	beq.n	8002068 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b6:	4b86      	ldr	r3, [pc, #536]	@ (80022d0 <HAL_RCC_OscConfig+0x294>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80020be:	d003      	beq.n	80020c8 <HAL_RCC_OscConfig+0x8c>
 80020c0:	6863      	ldr	r3, [r4, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 819f 	beq.w	8002406 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c8:	6823      	ldr	r3, [r4, #0]
 80020ca:	f013 0f02 	tst.w	r3, #2
 80020ce:	d054      	beq.n	800217a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80020d0:	4b7f      	ldr	r3, [pc, #508]	@ (80022d0 <HAL_RCC_OscConfig+0x294>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f013 0f0c 	tst.w	r3, #12
 80020d8:	d03e      	beq.n	8002158 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020da:	4b7d      	ldr	r3, [pc, #500]	@ (80022d0 <HAL_RCC_OscConfig+0x294>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d033      	beq.n	800214e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020e6:	68e3      	ldr	r3, [r4, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d068      	beq.n	80021be <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ec:	4b79      	ldr	r3, [pc, #484]	@ (80022d4 <HAL_RCC_OscConfig+0x298>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f2:	f7fe fd7b 	bl	8000bec <HAL_GetTick>
 80020f6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f8:	4b75      	ldr	r3, [pc, #468]	@ (80022d0 <HAL_RCC_OscConfig+0x294>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f013 0f02 	tst.w	r3, #2
 8002100:	d154      	bne.n	80021ac <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002102:	f7fe fd73 	bl	8000bec <HAL_GetTick>
 8002106:	1b40      	subs	r0, r0, r5
 8002108:	2802      	cmp	r0, #2
 800210a:	d9f5      	bls.n	80020f8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800210c:	2003      	movs	r0, #3
 800210e:	e17f      	b.n	8002410 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002110:	4a6f      	ldr	r2, [pc, #444]	@ (80022d0 <HAL_RCC_OscConfig+0x294>)
 8002112:	6813      	ldr	r3, [r2, #0]
 8002114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	e7b5      	b.n	8002088 <HAL_RCC_OscConfig+0x4c>
 800211c:	4b6c      	ldr	r3, [pc, #432]	@ (80022d0 <HAL_RCC_OscConfig+0x294>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	e7ab      	b.n	8002088 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002130:	f7fe fd5c 	bl	8000bec <HAL_GetTick>
 8002134:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002136:	4b66      	ldr	r3, [pc, #408]	@ (80022d0 <HAL_RCC_OscConfig+0x294>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800213e:	d0c3      	beq.n	80020c8 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002140:	f7fe fd54 	bl	8000bec <HAL_GetTick>
 8002144:	1b40      	subs	r0, r0, r5
 8002146:	2864      	cmp	r0, #100	@ 0x64
 8002148:	d9f5      	bls.n	8002136 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800214a:	2003      	movs	r0, #3
 800214c:	e160      	b.n	8002410 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800214e:	4b60      	ldr	r3, [pc, #384]	@ (80022d0 <HAL_RCC_OscConfig+0x294>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002156:	d1c6      	bne.n	80020e6 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002158:	4b5d      	ldr	r3, [pc, #372]	@ (80022d0 <HAL_RCC_OscConfig+0x294>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f013 0f02 	tst.w	r3, #2
 8002160:	d003      	beq.n	800216a <HAL_RCC_OscConfig+0x12e>
 8002162:	68e3      	ldr	r3, [r4, #12]
 8002164:	2b01      	cmp	r3, #1
 8002166:	f040 8150 	bne.w	800240a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216a:	4a59      	ldr	r2, [pc, #356]	@ (80022d0 <HAL_RCC_OscConfig+0x294>)
 800216c:	6813      	ldr	r3, [r2, #0]
 800216e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002172:	6921      	ldr	r1, [r4, #16]
 8002174:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002178:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217a:	6823      	ldr	r3, [r4, #0]
 800217c:	f013 0f08 	tst.w	r3, #8
 8002180:	d042      	beq.n	8002208 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002182:	6963      	ldr	r3, [r4, #20]
 8002184:	b36b      	cbz	r3, 80021e2 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002186:	4b53      	ldr	r3, [pc, #332]	@ (80022d4 <HAL_RCC_OscConfig+0x298>)
 8002188:	2201      	movs	r2, #1
 800218a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218e:	f7fe fd2d 	bl	8000bec <HAL_GetTick>
 8002192:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002194:	4b4e      	ldr	r3, [pc, #312]	@ (80022d0 <HAL_RCC_OscConfig+0x294>)
 8002196:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002198:	f013 0f02 	tst.w	r3, #2
 800219c:	d134      	bne.n	8002208 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800219e:	f7fe fd25 	bl	8000bec <HAL_GetTick>
 80021a2:	1b40      	subs	r0, r0, r5
 80021a4:	2802      	cmp	r0, #2
 80021a6:	d9f5      	bls.n	8002194 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80021a8:	2003      	movs	r0, #3
 80021aa:	e131      	b.n	8002410 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ac:	4a48      	ldr	r2, [pc, #288]	@ (80022d0 <HAL_RCC_OscConfig+0x294>)
 80021ae:	6813      	ldr	r3, [r2, #0]
 80021b0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80021b4:	6921      	ldr	r1, [r4, #16]
 80021b6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	e7dd      	b.n	800217a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80021be:	4b45      	ldr	r3, [pc, #276]	@ (80022d4 <HAL_RCC_OscConfig+0x298>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021c4:	f7fe fd12 	bl	8000bec <HAL_GetTick>
 80021c8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ca:	4b41      	ldr	r3, [pc, #260]	@ (80022d0 <HAL_RCC_OscConfig+0x294>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f013 0f02 	tst.w	r3, #2
 80021d2:	d0d2      	beq.n	800217a <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d4:	f7fe fd0a 	bl	8000bec <HAL_GetTick>
 80021d8:	1b40      	subs	r0, r0, r5
 80021da:	2802      	cmp	r0, #2
 80021dc:	d9f5      	bls.n	80021ca <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80021de:	2003      	movs	r0, #3
 80021e0:	e116      	b.n	8002410 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021e2:	4b3c      	ldr	r3, [pc, #240]	@ (80022d4 <HAL_RCC_OscConfig+0x298>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ea:	f7fe fcff 	bl	8000bec <HAL_GetTick>
 80021ee:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f0:	4b37      	ldr	r3, [pc, #220]	@ (80022d0 <HAL_RCC_OscConfig+0x294>)
 80021f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021f4:	f013 0f02 	tst.w	r3, #2
 80021f8:	d006      	beq.n	8002208 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021fa:	f7fe fcf7 	bl	8000bec <HAL_GetTick>
 80021fe:	1b40      	subs	r0, r0, r5
 8002200:	2802      	cmp	r0, #2
 8002202:	d9f5      	bls.n	80021f0 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8002204:	2003      	movs	r0, #3
 8002206:	e103      	b.n	8002410 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002208:	6823      	ldr	r3, [r4, #0]
 800220a:	f013 0f04 	tst.w	r3, #4
 800220e:	d077      	beq.n	8002300 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002210:	4b2f      	ldr	r3, [pc, #188]	@ (80022d0 <HAL_RCC_OscConfig+0x294>)
 8002212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002214:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002218:	d133      	bne.n	8002282 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	9301      	str	r3, [sp, #4]
 800221e:	4b2c      	ldr	r3, [pc, #176]	@ (80022d0 <HAL_RCC_OscConfig+0x294>)
 8002220:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002222:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002226:	641a      	str	r2, [r3, #64]	@ 0x40
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002232:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002234:	4b28      	ldr	r3, [pc, #160]	@ (80022d8 <HAL_RCC_OscConfig+0x29c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800223c:	d023      	beq.n	8002286 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800223e:	68a3      	ldr	r3, [r4, #8]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d034      	beq.n	80022ae <HAL_RCC_OscConfig+0x272>
 8002244:	2b05      	cmp	r3, #5
 8002246:	d038      	beq.n	80022ba <HAL_RCC_OscConfig+0x27e>
 8002248:	4b21      	ldr	r3, [pc, #132]	@ (80022d0 <HAL_RCC_OscConfig+0x294>)
 800224a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800224c:	f022 0201 	bic.w	r2, r2, #1
 8002250:	671a      	str	r2, [r3, #112]	@ 0x70
 8002252:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002254:	f022 0204 	bic.w	r2, r2, #4
 8002258:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800225a:	68a3      	ldr	r3, [r4, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d03d      	beq.n	80022dc <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002260:	f7fe fcc4 	bl	8000bec <HAL_GetTick>
 8002264:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002266:	4b1a      	ldr	r3, [pc, #104]	@ (80022d0 <HAL_RCC_OscConfig+0x294>)
 8002268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800226a:	f013 0f02 	tst.w	r3, #2
 800226e:	d146      	bne.n	80022fe <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002270:	f7fe fcbc 	bl	8000bec <HAL_GetTick>
 8002274:	1b80      	subs	r0, r0, r6
 8002276:	f241 3388 	movw	r3, #5000	@ 0x1388
 800227a:	4298      	cmp	r0, r3
 800227c:	d9f3      	bls.n	8002266 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800227e:	2003      	movs	r0, #3
 8002280:	e0c6      	b.n	8002410 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8002282:	2500      	movs	r5, #0
 8002284:	e7d6      	b.n	8002234 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002286:	4a14      	ldr	r2, [pc, #80]	@ (80022d8 <HAL_RCC_OscConfig+0x29c>)
 8002288:	6813      	ldr	r3, [r2, #0]
 800228a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800228e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002290:	f7fe fcac 	bl	8000bec <HAL_GetTick>
 8002294:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002296:	4b10      	ldr	r3, [pc, #64]	@ (80022d8 <HAL_RCC_OscConfig+0x29c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800229e:	d1ce      	bne.n	800223e <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a0:	f7fe fca4 	bl	8000bec <HAL_GetTick>
 80022a4:	1b80      	subs	r0, r0, r6
 80022a6:	2802      	cmp	r0, #2
 80022a8:	d9f5      	bls.n	8002296 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80022aa:	2003      	movs	r0, #3
 80022ac:	e0b0      	b.n	8002410 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ae:	4a08      	ldr	r2, [pc, #32]	@ (80022d0 <HAL_RCC_OscConfig+0x294>)
 80022b0:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80022b8:	e7cf      	b.n	800225a <HAL_RCC_OscConfig+0x21e>
 80022ba:	4b05      	ldr	r3, [pc, #20]	@ (80022d0 <HAL_RCC_OscConfig+0x294>)
 80022bc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80022be:	f042 0204 	orr.w	r2, r2, #4
 80022c2:	671a      	str	r2, [r3, #112]	@ 0x70
 80022c4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	671a      	str	r2, [r3, #112]	@ 0x70
 80022cc:	e7c5      	b.n	800225a <HAL_RCC_OscConfig+0x21e>
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800
 80022d4:	42470000 	.word	0x42470000
 80022d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022dc:	f7fe fc86 	bl	8000bec <HAL_GetTick>
 80022e0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e2:	4b52      	ldr	r3, [pc, #328]	@ (800242c <HAL_RCC_OscConfig+0x3f0>)
 80022e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e6:	f013 0f02 	tst.w	r3, #2
 80022ea:	d008      	beq.n	80022fe <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ec:	f7fe fc7e 	bl	8000bec <HAL_GetTick>
 80022f0:	1b80      	subs	r0, r0, r6
 80022f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80022f6:	4298      	cmp	r0, r3
 80022f8:	d9f3      	bls.n	80022e2 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80022fa:	2003      	movs	r0, #3
 80022fc:	e088      	b.n	8002410 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022fe:	b9ed      	cbnz	r5, 800233c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002300:	69a3      	ldr	r3, [r4, #24]
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 8083 	beq.w	800240e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002308:	4a48      	ldr	r2, [pc, #288]	@ (800242c <HAL_RCC_OscConfig+0x3f0>)
 800230a:	6892      	ldr	r2, [r2, #8]
 800230c:	f002 020c 	and.w	r2, r2, #12
 8002310:	2a08      	cmp	r2, #8
 8002312:	d051      	beq.n	80023b8 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002314:	2b02      	cmp	r3, #2
 8002316:	d017      	beq.n	8002348 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002318:	4b45      	ldr	r3, [pc, #276]	@ (8002430 <HAL_RCC_OscConfig+0x3f4>)
 800231a:	2200      	movs	r2, #0
 800231c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231e:	f7fe fc65 	bl	8000bec <HAL_GetTick>
 8002322:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002324:	4b41      	ldr	r3, [pc, #260]	@ (800242c <HAL_RCC_OscConfig+0x3f0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800232c:	d042      	beq.n	80023b4 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232e:	f7fe fc5d 	bl	8000bec <HAL_GetTick>
 8002332:	1b00      	subs	r0, r0, r4
 8002334:	2802      	cmp	r0, #2
 8002336:	d9f5      	bls.n	8002324 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002338:	2003      	movs	r0, #3
 800233a:	e069      	b.n	8002410 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 800233c:	4a3b      	ldr	r2, [pc, #236]	@ (800242c <HAL_RCC_OscConfig+0x3f0>)
 800233e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002340:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002344:	6413      	str	r3, [r2, #64]	@ 0x40
 8002346:	e7db      	b.n	8002300 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8002348:	4b39      	ldr	r3, [pc, #228]	@ (8002430 <HAL_RCC_OscConfig+0x3f4>)
 800234a:	2200      	movs	r2, #0
 800234c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800234e:	f7fe fc4d 	bl	8000bec <HAL_GetTick>
 8002352:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002354:	4b35      	ldr	r3, [pc, #212]	@ (800242c <HAL_RCC_OscConfig+0x3f0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800235c:	d006      	beq.n	800236c <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235e:	f7fe fc45 	bl	8000bec <HAL_GetTick>
 8002362:	1b40      	subs	r0, r0, r5
 8002364:	2802      	cmp	r0, #2
 8002366:	d9f5      	bls.n	8002354 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002368:	2003      	movs	r0, #3
 800236a:	e051      	b.n	8002410 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800236c:	69e3      	ldr	r3, [r4, #28]
 800236e:	6a22      	ldr	r2, [r4, #32]
 8002370:	4313      	orrs	r3, r2
 8002372:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002374:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002378:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800237a:	0852      	lsrs	r2, r2, #1
 800237c:	3a01      	subs	r2, #1
 800237e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002382:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002384:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002388:	4a28      	ldr	r2, [pc, #160]	@ (800242c <HAL_RCC_OscConfig+0x3f0>)
 800238a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800238c:	4b28      	ldr	r3, [pc, #160]	@ (8002430 <HAL_RCC_OscConfig+0x3f4>)
 800238e:	2201      	movs	r2, #1
 8002390:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002392:	f7fe fc2b 	bl	8000bec <HAL_GetTick>
 8002396:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002398:	4b24      	ldr	r3, [pc, #144]	@ (800242c <HAL_RCC_OscConfig+0x3f0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80023a0:	d106      	bne.n	80023b0 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a2:	f7fe fc23 	bl	8000bec <HAL_GetTick>
 80023a6:	1b00      	subs	r0, r0, r4
 80023a8:	2802      	cmp	r0, #2
 80023aa:	d9f5      	bls.n	8002398 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80023ac:	2003      	movs	r0, #3
 80023ae:	e02f      	b.n	8002410 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80023b0:	2000      	movs	r0, #0
 80023b2:	e02d      	b.n	8002410 <HAL_RCC_OscConfig+0x3d4>
 80023b4:	2000      	movs	r0, #0
 80023b6:	e02b      	b.n	8002410 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d02b      	beq.n	8002414 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 80023bc:	4b1b      	ldr	r3, [pc, #108]	@ (800242c <HAL_RCC_OscConfig+0x3f0>)
 80023be:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c0:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 80023c4:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023c6:	4291      	cmp	r1, r2
 80023c8:	d126      	bne.n	8002418 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023ce:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d0:	428a      	cmp	r2, r1
 80023d2:	d123      	bne.n	800241c <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023d4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023d6:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80023da:	401a      	ands	r2, r3
 80023dc:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80023e0:	d11e      	bne.n	8002420 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023e2:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80023e6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80023e8:	0852      	lsrs	r2, r2, #1
 80023ea:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023ec:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80023f0:	d118      	bne.n	8002424 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023f2:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80023f6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023f8:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80023fc:	d114      	bne.n	8002428 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80023fe:	2000      	movs	r0, #0
 8002400:	e006      	b.n	8002410 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8002402:	2001      	movs	r0, #1
}
 8002404:	4770      	bx	lr
        return HAL_ERROR;
 8002406:	2001      	movs	r0, #1
 8002408:	e002      	b.n	8002410 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 800240a:	2001      	movs	r0, #1
 800240c:	e000      	b.n	8002410 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 800240e:	2000      	movs	r0, #0
}
 8002410:	b002      	add	sp, #8
 8002412:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002414:	2001      	movs	r0, #1
 8002416:	e7fb      	b.n	8002410 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8002418:	2001      	movs	r0, #1
 800241a:	e7f9      	b.n	8002410 <HAL_RCC_OscConfig+0x3d4>
 800241c:	2001      	movs	r0, #1
 800241e:	e7f7      	b.n	8002410 <HAL_RCC_OscConfig+0x3d4>
 8002420:	2001      	movs	r0, #1
 8002422:	e7f5      	b.n	8002410 <HAL_RCC_OscConfig+0x3d4>
 8002424:	2001      	movs	r0, #1
 8002426:	e7f3      	b.n	8002410 <HAL_RCC_OscConfig+0x3d4>
 8002428:	2001      	movs	r0, #1
 800242a:	e7f1      	b.n	8002410 <HAL_RCC_OscConfig+0x3d4>
 800242c:	40023800 	.word	0x40023800
 8002430:	42470000 	.word	0x42470000

08002434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002434:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002436:	4b26      	ldr	r3, [pc, #152]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	2b04      	cmp	r3, #4
 8002440:	d041      	beq.n	80024c6 <HAL_RCC_GetSysClockFreq+0x92>
 8002442:	2b08      	cmp	r3, #8
 8002444:	d141      	bne.n	80024ca <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002446:	4b22      	ldr	r3, [pc, #136]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002454:	d012      	beq.n	800247c <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002456:	4b1e      	ldr	r3, [pc, #120]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002458:	6859      	ldr	r1, [r3, #4]
 800245a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800245e:	481d      	ldr	r0, [pc, #116]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002460:	2300      	movs	r3, #0
 8002462:	fba1 0100 	umull	r0, r1, r1, r0
 8002466:	f7fd ff23 	bl	80002b0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800246a:	4b19      	ldr	r3, [pc, #100]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002472:	3301      	adds	r3, #1
 8002474:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002476:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800247a:	e027      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x98>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800247c:	4b14      	ldr	r3, [pc, #80]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800247e:	6858      	ldr	r0, [r3, #4]
 8002480:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002484:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002488:	ebbc 0c00 	subs.w	ip, ip, r0
 800248c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002490:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002494:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002498:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800249c:	ebb1 010c 	subs.w	r1, r1, ip
 80024a0:	eb63 030e 	sbc.w	r3, r3, lr
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024aa:	00c9      	lsls	r1, r1, #3
 80024ac:	eb11 0c00 	adds.w	ip, r1, r0
 80024b0:	f143 0300 	adc.w	r3, r3, #0
 80024b4:	0299      	lsls	r1, r3, #10
 80024b6:	2300      	movs	r3, #0
 80024b8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80024bc:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80024c0:	f7fd fef6 	bl	80002b0 <__aeabi_uldivmod>
 80024c4:	e7d1      	b.n	800246a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 80024c6:	4803      	ldr	r0, [pc, #12]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024c8:	e000      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x98>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024ca:	4803      	ldr	r0, [pc, #12]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0xa4>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80024cc:	bd08      	pop	{r3, pc}
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800
 80024d4:	017d7840 	.word	0x017d7840
 80024d8:	00f42400 	.word	0x00f42400

080024dc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80024dc:	2800      	cmp	r0, #0
 80024de:	f000 809b 	beq.w	8002618 <HAL_RCC_ClockConfig+0x13c>
{
 80024e2:	b570      	push	{r4, r5, r6, lr}
 80024e4:	460d      	mov	r5, r1
 80024e6:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024e8:	4b4f      	ldr	r3, [pc, #316]	@ (8002628 <HAL_RCC_ClockConfig+0x14c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	428b      	cmp	r3, r1
 80024f2:	d208      	bcs.n	8002506 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f4:	b2cb      	uxtb	r3, r1
 80024f6:	4a4c      	ldr	r2, [pc, #304]	@ (8002628 <HAL_RCC_ClockConfig+0x14c>)
 80024f8:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fa:	6813      	ldr	r3, [r2, #0]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	428b      	cmp	r3, r1
 8002502:	f040 808b 	bne.w	800261c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002506:	6823      	ldr	r3, [r4, #0]
 8002508:	f013 0f02 	tst.w	r3, #2
 800250c:	d017      	beq.n	800253e <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250e:	f013 0f04 	tst.w	r3, #4
 8002512:	d004      	beq.n	800251e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002514:	4a45      	ldr	r2, [pc, #276]	@ (800262c <HAL_RCC_ClockConfig+0x150>)
 8002516:	6893      	ldr	r3, [r2, #8]
 8002518:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800251c:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251e:	6823      	ldr	r3, [r4, #0]
 8002520:	f013 0f08 	tst.w	r3, #8
 8002524:	d004      	beq.n	8002530 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002526:	4a41      	ldr	r2, [pc, #260]	@ (800262c <HAL_RCC_ClockConfig+0x150>)
 8002528:	6893      	ldr	r3, [r2, #8]
 800252a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800252e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002530:	4a3e      	ldr	r2, [pc, #248]	@ (800262c <HAL_RCC_ClockConfig+0x150>)
 8002532:	6893      	ldr	r3, [r2, #8]
 8002534:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002538:	68a1      	ldr	r1, [r4, #8]
 800253a:	430b      	orrs	r3, r1
 800253c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800253e:	6823      	ldr	r3, [r4, #0]
 8002540:	f013 0f01 	tst.w	r3, #1
 8002544:	d032      	beq.n	80025ac <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002546:	6863      	ldr	r3, [r4, #4]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d021      	beq.n	8002590 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800254c:	1e9a      	subs	r2, r3, #2
 800254e:	2a01      	cmp	r2, #1
 8002550:	d925      	bls.n	800259e <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002552:	4a36      	ldr	r2, [pc, #216]	@ (800262c <HAL_RCC_ClockConfig+0x150>)
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	f012 0f02 	tst.w	r2, #2
 800255a:	d061      	beq.n	8002620 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800255c:	4933      	ldr	r1, [pc, #204]	@ (800262c <HAL_RCC_ClockConfig+0x150>)
 800255e:	688a      	ldr	r2, [r1, #8]
 8002560:	f022 0203 	bic.w	r2, r2, #3
 8002564:	4313      	orrs	r3, r2
 8002566:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002568:	f7fe fb40 	bl	8000bec <HAL_GetTick>
 800256c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256e:	4b2f      	ldr	r3, [pc, #188]	@ (800262c <HAL_RCC_ClockConfig+0x150>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 030c 	and.w	r3, r3, #12
 8002576:	6862      	ldr	r2, [r4, #4]
 8002578:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800257c:	d016      	beq.n	80025ac <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800257e:	f7fe fb35 	bl	8000bec <HAL_GetTick>
 8002582:	1b80      	subs	r0, r0, r6
 8002584:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002588:	4298      	cmp	r0, r3
 800258a:	d9f0      	bls.n	800256e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 800258c:	2003      	movs	r0, #3
 800258e:	e042      	b.n	8002616 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002590:	4a26      	ldr	r2, [pc, #152]	@ (800262c <HAL_RCC_ClockConfig+0x150>)
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002598:	d1e0      	bne.n	800255c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800259a:	2001      	movs	r0, #1
 800259c:	e03b      	b.n	8002616 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259e:	4a23      	ldr	r2, [pc, #140]	@ (800262c <HAL_RCC_ClockConfig+0x150>)
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80025a6:	d1d9      	bne.n	800255c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80025a8:	2001      	movs	r0, #1
 80025aa:	e034      	b.n	8002616 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002628 <HAL_RCC_ClockConfig+0x14c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	42ab      	cmp	r3, r5
 80025b6:	d907      	bls.n	80025c8 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b8:	b2ea      	uxtb	r2, r5
 80025ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002628 <HAL_RCC_ClockConfig+0x14c>)
 80025bc:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	42ab      	cmp	r3, r5
 80025c6:	d12d      	bne.n	8002624 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c8:	6823      	ldr	r3, [r4, #0]
 80025ca:	f013 0f04 	tst.w	r3, #4
 80025ce:	d006      	beq.n	80025de <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d0:	4a16      	ldr	r2, [pc, #88]	@ (800262c <HAL_RCC_ClockConfig+0x150>)
 80025d2:	6893      	ldr	r3, [r2, #8]
 80025d4:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80025d8:	68e1      	ldr	r1, [r4, #12]
 80025da:	430b      	orrs	r3, r1
 80025dc:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025de:	6823      	ldr	r3, [r4, #0]
 80025e0:	f013 0f08 	tst.w	r3, #8
 80025e4:	d007      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025e6:	4a11      	ldr	r2, [pc, #68]	@ (800262c <HAL_RCC_ClockConfig+0x150>)
 80025e8:	6893      	ldr	r3, [r2, #8]
 80025ea:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80025ee:	6921      	ldr	r1, [r4, #16]
 80025f0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80025f4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025f6:	f7ff ff1d 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 80025fa:	4b0c      	ldr	r3, [pc, #48]	@ (800262c <HAL_RCC_ClockConfig+0x150>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002602:	4a0b      	ldr	r2, [pc, #44]	@ (8002630 <HAL_RCC_ClockConfig+0x154>)
 8002604:	5cd3      	ldrb	r3, [r2, r3]
 8002606:	40d8      	lsrs	r0, r3
 8002608:	4b0a      	ldr	r3, [pc, #40]	@ (8002634 <HAL_RCC_ClockConfig+0x158>)
 800260a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800260c:	4b0a      	ldr	r3, [pc, #40]	@ (8002638 <HAL_RCC_ClockConfig+0x15c>)
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	f7fe faa0 	bl	8000b54 <HAL_InitTick>
  return HAL_OK;
 8002614:	2000      	movs	r0, #0
}
 8002616:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002618:	2001      	movs	r0, #1
}
 800261a:	4770      	bx	lr
      return HAL_ERROR;
 800261c:	2001      	movs	r0, #1
 800261e:	e7fa      	b.n	8002616 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002620:	2001      	movs	r0, #1
 8002622:	e7f8      	b.n	8002616 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002624:	2001      	movs	r0, #1
 8002626:	e7f6      	b.n	8002616 <HAL_RCC_ClockConfig+0x13a>
 8002628:	40023c00 	.word	0x40023c00
 800262c:	40023800 	.word	0x40023800
 8002630:	080061b0 	.word	0x080061b0
 8002634:	20000000 	.word	0x20000000
 8002638:	20000008 	.word	0x20000008

0800263c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800263c:	4b01      	ldr	r3, [pc, #4]	@ (8002644 <HAL_RCC_GetHCLKFreq+0x8>)
 800263e:	6818      	ldr	r0, [r3, #0]
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	20000000 	.word	0x20000000

08002648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002648:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800264a:	f7ff fff7 	bl	800263c <HAL_RCC_GetHCLKFreq>
 800264e:	4b04      	ldr	r3, [pc, #16]	@ (8002660 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002656:	4a03      	ldr	r2, [pc, #12]	@ (8002664 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002658:	5cd3      	ldrb	r3, [r2, r3]
}
 800265a:	40d8      	lsrs	r0, r3
 800265c:	bd08      	pop	{r3, pc}
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800
 8002664:	080061a8 	.word	0x080061a8

08002668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002668:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800266a:	f7ff ffe7 	bl	800263c <HAL_RCC_GetHCLKFreq>
 800266e:	4b04      	ldr	r3, [pc, #16]	@ (8002680 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002676:	4a03      	ldr	r2, [pc, #12]	@ (8002684 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002678:	5cd3      	ldrb	r3, [r2, r3]
}
 800267a:	40d8      	lsrs	r0, r3
 800267c:	bd08      	pop	{r3, pc}
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800
 8002684:	080061a8 	.word	0x080061a8

08002688 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002688:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800268a:	f102 030c 	add.w	r3, r2, #12
 800268e:	e853 3f00 	ldrex	r3, [r3]
 8002692:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002696:	320c      	adds	r2, #12
 8002698:	e842 3100 	strex	r1, r3, [r2]
 800269c:	2900      	cmp	r1, #0
 800269e:	d1f3      	bne.n	8002688 <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026a0:	2320      	movs	r3, #32
 80026a2:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
}
 80026a6:	4770      	bx	lr

080026a8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026a8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026aa:	f102 030c 	add.w	r3, r2, #12
 80026ae:	e853 3f00 	ldrex	r3, [r3]
 80026b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b6:	320c      	adds	r2, #12
 80026b8:	e842 3100 	strex	r1, r3, [r2]
 80026bc:	2900      	cmp	r1, #0
 80026be:	d1f3      	bne.n	80026a8 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026c0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c2:	f102 0314 	add.w	r3, r2, #20
 80026c6:	e853 3f00 	ldrex	r3, [r3]
 80026ca:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ce:	3214      	adds	r2, #20
 80026d0:	e842 3100 	strex	r1, r3, [r2]
 80026d4:	2900      	cmp	r1, #0
 80026d6:	d1f3      	bne.n	80026c0 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026d8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d005      	beq.n	80026ea <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026de:	2320      	movs	r3, #32
 80026e0:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026e4:	2300      	movs	r3, #0
 80026e6:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80026e8:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026ea:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ec:	f102 030c 	add.w	r3, r2, #12
 80026f0:	e853 3f00 	ldrex	r3, [r3]
 80026f4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f8:	320c      	adds	r2, #12
 80026fa:	e842 3100 	strex	r1, r3, [r2]
 80026fe:	2900      	cmp	r1, #0
 8002700:	d1f3      	bne.n	80026ea <UART_EndRxTransfer+0x42>
 8002702:	e7ec      	b.n	80026de <UART_EndRxTransfer+0x36>

08002704 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002704:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b21      	cmp	r3, #33	@ 0x21
 800270c:	d001      	beq.n	8002712 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800270e:	2002      	movs	r0, #2
  }
}
 8002710:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002712:	6883      	ldr	r3, [r0, #8]
 8002714:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002718:	d017      	beq.n	800274a <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800271a:	6a03      	ldr	r3, [r0, #32]
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	6202      	str	r2, [r0, #32]
 8002720:	781a      	ldrb	r2, [r3, #0]
 8002722:	6803      	ldr	r3, [r0, #0]
 8002724:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8002726:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8002728:	b29b      	uxth	r3, r3
 800272a:	3b01      	subs	r3, #1
 800272c:	b29b      	uxth	r3, r3
 800272e:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8002730:	b94b      	cbnz	r3, 8002746 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002732:	6802      	ldr	r2, [r0, #0]
 8002734:	68d3      	ldr	r3, [r2, #12]
 8002736:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800273a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800273c:	6802      	ldr	r2, [r0, #0]
 800273e:	68d3      	ldr	r3, [r2, #12]
 8002740:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002744:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8002746:	2000      	movs	r0, #0
 8002748:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800274a:	6903      	ldr	r3, [r0, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1e4      	bne.n	800271a <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002750:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	6802      	ldr	r2, [r0, #0]
 8002756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800275a:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 800275c:	6a03      	ldr	r3, [r0, #32]
 800275e:	3302      	adds	r3, #2
 8002760:	6203      	str	r3, [r0, #32]
 8002762:	e7e0      	b.n	8002726 <UART_Transmit_IT+0x22>

08002764 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002764:	b510      	push	{r4, lr}
 8002766:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002768:	6802      	ldr	r2, [r0, #0]
 800276a:	6913      	ldr	r3, [r2, #16]
 800276c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002770:	68c1      	ldr	r1, [r0, #12]
 8002772:	430b      	orrs	r3, r1
 8002774:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002776:	6883      	ldr	r3, [r0, #8]
 8002778:	6902      	ldr	r2, [r0, #16]
 800277a:	431a      	orrs	r2, r3
 800277c:	6943      	ldr	r3, [r0, #20]
 800277e:	431a      	orrs	r2, r3
 8002780:	69c3      	ldr	r3, [r0, #28]
 8002782:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002784:	6801      	ldr	r1, [r0, #0]
 8002786:	68cb      	ldr	r3, [r1, #12]
 8002788:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800278c:	f023 030c 	bic.w	r3, r3, #12
 8002790:	4313      	orrs	r3, r2
 8002792:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002794:	6802      	ldr	r2, [r0, #0]
 8002796:	6953      	ldr	r3, [r2, #20]
 8002798:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800279c:	6981      	ldr	r1, [r0, #24]
 800279e:	430b      	orrs	r3, r1
 80027a0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027a2:	6803      	ldr	r3, [r0, #0]
 80027a4:	4a31      	ldr	r2, [pc, #196]	@ (800286c <UART_SetConfig+0x108>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d006      	beq.n	80027b8 <UART_SetConfig+0x54>
 80027aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d002      	beq.n	80027b8 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027b2:	f7ff ff49 	bl	8002648 <HAL_RCC_GetPCLK1Freq>
 80027b6:	e001      	b.n	80027bc <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80027b8:	f7ff ff56 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027bc:	69e3      	ldr	r3, [r4, #28]
 80027be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027c2:	d029      	beq.n	8002818 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027c4:	2100      	movs	r1, #0
 80027c6:	1803      	adds	r3, r0, r0
 80027c8:	4149      	adcs	r1, r1
 80027ca:	181b      	adds	r3, r3, r0
 80027cc:	f141 0100 	adc.w	r1, r1, #0
 80027d0:	00c9      	lsls	r1, r1, #3
 80027d2:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	1818      	adds	r0, r3, r0
 80027da:	6863      	ldr	r3, [r4, #4]
 80027dc:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80027e0:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80027e4:	f141 0100 	adc.w	r1, r1, #0
 80027e8:	f7fd fd62 	bl	80002b0 <__aeabi_uldivmod>
 80027ec:	4a20      	ldr	r2, [pc, #128]	@ (8002870 <UART_SetConfig+0x10c>)
 80027ee:	fba2 3100 	umull	r3, r1, r2, r0
 80027f2:	0949      	lsrs	r1, r1, #5
 80027f4:	2364      	movs	r3, #100	@ 0x64
 80027f6:	fb03 0311 	mls	r3, r3, r1, r0
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	3332      	adds	r3, #50	@ 0x32
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002808:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800280c:	f003 030f 	and.w	r3, r3, #15
 8002810:	6821      	ldr	r1, [r4, #0]
 8002812:	4413      	add	r3, r2
 8002814:	608b      	str	r3, [r1, #8]
  }
}
 8002816:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002818:	2300      	movs	r3, #0
 800281a:	1802      	adds	r2, r0, r0
 800281c:	eb43 0103 	adc.w	r1, r3, r3
 8002820:	1812      	adds	r2, r2, r0
 8002822:	f141 0100 	adc.w	r1, r1, #0
 8002826:	00c9      	lsls	r1, r1, #3
 8002828:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800282c:	00d2      	lsls	r2, r2, #3
 800282e:	1810      	adds	r0, r2, r0
 8002830:	f141 0100 	adc.w	r1, r1, #0
 8002834:	6862      	ldr	r2, [r4, #4]
 8002836:	1892      	adds	r2, r2, r2
 8002838:	415b      	adcs	r3, r3
 800283a:	f7fd fd39 	bl	80002b0 <__aeabi_uldivmod>
 800283e:	4a0c      	ldr	r2, [pc, #48]	@ (8002870 <UART_SetConfig+0x10c>)
 8002840:	fba2 3100 	umull	r3, r1, r2, r0
 8002844:	0949      	lsrs	r1, r1, #5
 8002846:	2364      	movs	r3, #100	@ 0x64
 8002848:	fb03 0311 	mls	r3, r3, r1, r0
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	3332      	adds	r3, #50	@ 0x32
 8002850:	fba2 2303 	umull	r2, r3, r2, r3
 8002854:	095b      	lsrs	r3, r3, #5
 8002856:	005a      	lsls	r2, r3, #1
 8002858:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 800285c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	6821      	ldr	r1, [r4, #0]
 8002866:	4413      	add	r3, r2
 8002868:	608b      	str	r3, [r1, #8]
 800286a:	e7d4      	b.n	8002816 <UART_SetConfig+0xb2>
 800286c:	40011000 	.word	0x40011000
 8002870:	51eb851f 	.word	0x51eb851f

08002874 <UART_WaitOnFlagUntilTimeout>:
{
 8002874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002878:	b083      	sub	sp, #12
 800287a:	4605      	mov	r5, r0
 800287c:	460e      	mov	r6, r1
 800287e:	4617      	mov	r7, r2
 8002880:	4699      	mov	r9, r3
 8002882:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002886:	682b      	ldr	r3, [r5, #0]
 8002888:	681c      	ldr	r4, [r3, #0]
 800288a:	ea36 0404 	bics.w	r4, r6, r4
 800288e:	bf0c      	ite	eq
 8002890:	2401      	moveq	r4, #1
 8002892:	2400      	movne	r4, #0
 8002894:	42bc      	cmp	r4, r7
 8002896:	d128      	bne.n	80028ea <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8002898:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800289c:	d0f3      	beq.n	8002886 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800289e:	f7fe f9a5 	bl	8000bec <HAL_GetTick>
 80028a2:	eba0 0009 	sub.w	r0, r0, r9
 80028a6:	4540      	cmp	r0, r8
 80028a8:	d823      	bhi.n	80028f2 <UART_WaitOnFlagUntilTimeout+0x7e>
 80028aa:	f1b8 0f00 	cmp.w	r8, #0
 80028ae:	d022      	beq.n	80028f6 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80028b0:	682b      	ldr	r3, [r5, #0]
 80028b2:	68da      	ldr	r2, [r3, #12]
 80028b4:	f012 0f04 	tst.w	r2, #4
 80028b8:	d0e5      	beq.n	8002886 <UART_WaitOnFlagUntilTimeout+0x12>
 80028ba:	2e80      	cmp	r6, #128	@ 0x80
 80028bc:	d0e3      	beq.n	8002886 <UART_WaitOnFlagUntilTimeout+0x12>
 80028be:	2e40      	cmp	r6, #64	@ 0x40
 80028c0:	d0e1      	beq.n	8002886 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	f012 0f08 	tst.w	r2, #8
 80028c8:	d0dd      	beq.n	8002886 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 80028ca:	2400      	movs	r4, #0
 80028cc:	9401      	str	r4, [sp, #4]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	9201      	str	r2, [sp, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	9301      	str	r3, [sp, #4]
 80028d6:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80028d8:	4628      	mov	r0, r5
 80028da:	f7ff fee5 	bl	80026a8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028de:	2308      	movs	r3, #8
 80028e0:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 80028e2:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 80028e6:	2001      	movs	r0, #1
 80028e8:	e000      	b.n	80028ec <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 80028ea:	2000      	movs	r0, #0
}
 80028ec:	b003      	add	sp, #12
 80028ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80028f2:	2003      	movs	r0, #3
 80028f4:	e7fa      	b.n	80028ec <UART_WaitOnFlagUntilTimeout+0x78>
 80028f6:	2003      	movs	r0, #3
 80028f8:	e7f8      	b.n	80028ec <UART_WaitOnFlagUntilTimeout+0x78>

080028fa <HAL_UART_Init>:
  if (huart == NULL)
 80028fa:	b360      	cbz	r0, 8002956 <HAL_UART_Init+0x5c>
{
 80028fc:	b510      	push	{r4, lr}
 80028fe:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002900:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002904:	b313      	cbz	r3, 800294c <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8002906:	2324      	movs	r3, #36	@ 0x24
 8002908:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800290c:	6822      	ldr	r2, [r4, #0]
 800290e:	68d3      	ldr	r3, [r2, #12]
 8002910:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002914:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002916:	4620      	mov	r0, r4
 8002918:	f7ff ff24 	bl	8002764 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800291c:	6822      	ldr	r2, [r4, #0]
 800291e:	6913      	ldr	r3, [r2, #16]
 8002920:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002924:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002926:	6822      	ldr	r2, [r4, #0]
 8002928:	6953      	ldr	r3, [r2, #20]
 800292a:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800292e:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002930:	6822      	ldr	r2, [r4, #0]
 8002932:	68d3      	ldr	r3, [r2, #12]
 8002934:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002938:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293a:	2000      	movs	r0, #0
 800293c:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800293e:	2320      	movs	r3, #32
 8002940:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002944:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002948:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800294a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800294c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002950:	f7fd ffd0 	bl	80008f4 <HAL_UART_MspInit>
 8002954:	e7d7      	b.n	8002906 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002956:	2001      	movs	r0, #1
}
 8002958:	4770      	bx	lr

0800295a <HAL_UART_Transmit>:
{
 800295a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002962:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b20      	cmp	r3, #32
 800296a:	d156      	bne.n	8002a1a <HAL_UART_Transmit+0xc0>
 800296c:	4604      	mov	r4, r0
 800296e:	460d      	mov	r5, r1
 8002970:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002972:	2900      	cmp	r1, #0
 8002974:	d055      	beq.n	8002a22 <HAL_UART_Transmit+0xc8>
 8002976:	b90a      	cbnz	r2, 800297c <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8002978:	2001      	movs	r0, #1
 800297a:	e04f      	b.n	8002a1c <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800297c:	2300      	movs	r3, #0
 800297e:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002980:	2321      	movs	r3, #33	@ 0x21
 8002982:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8002986:	f7fe f931 	bl	8000bec <HAL_GetTick>
 800298a:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800298c:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002990:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002994:	68a3      	ldr	r3, [r4, #8]
 8002996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800299a:	d002      	beq.n	80029a2 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 800299c:	f04f 0800 	mov.w	r8, #0
 80029a0:	e014      	b.n	80029cc <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029a2:	6923      	ldr	r3, [r4, #16]
 80029a4:	b32b      	cbz	r3, 80029f2 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 80029a6:	f04f 0800 	mov.w	r8, #0
 80029aa:	e00f      	b.n	80029cc <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 80029ac:	2320      	movs	r3, #32
 80029ae:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 80029b2:	2003      	movs	r0, #3
 80029b4:	e032      	b.n	8002a1c <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029b6:	f838 3b02 	ldrh.w	r3, [r8], #2
 80029ba:	6822      	ldr	r2, [r4, #0]
 80029bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029c0:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80029c2:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80029c4:	b292      	uxth	r2, r2
 80029c6:	3a01      	subs	r2, #1
 80029c8:	b292      	uxth	r2, r2
 80029ca:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80029cc:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	b193      	cbz	r3, 80029f8 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029d2:	9600      	str	r6, [sp, #0]
 80029d4:	463b      	mov	r3, r7
 80029d6:	2200      	movs	r2, #0
 80029d8:	2180      	movs	r1, #128	@ 0x80
 80029da:	4620      	mov	r0, r4
 80029dc:	f7ff ff4a 	bl	8002874 <UART_WaitOnFlagUntilTimeout>
 80029e0:	2800      	cmp	r0, #0
 80029e2:	d1e3      	bne.n	80029ac <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 80029e4:	2d00      	cmp	r5, #0
 80029e6:	d0e6      	beq.n	80029b6 <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029e8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029f0:	e7e7      	b.n	80029c2 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 80029f2:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80029f4:	2500      	movs	r5, #0
 80029f6:	e7e9      	b.n	80029cc <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029f8:	9600      	str	r6, [sp, #0]
 80029fa:	463b      	mov	r3, r7
 80029fc:	2200      	movs	r2, #0
 80029fe:	2140      	movs	r1, #64	@ 0x40
 8002a00:	4620      	mov	r0, r4
 8002a02:	f7ff ff37 	bl	8002874 <UART_WaitOnFlagUntilTimeout>
 8002a06:	b918      	cbnz	r0, 8002a10 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8002a08:	2320      	movs	r3, #32
 8002a0a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8002a0e:	e005      	b.n	8002a1c <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8002a10:	2320      	movs	r3, #32
 8002a12:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8002a16:	2003      	movs	r0, #3
 8002a18:	e000      	b.n	8002a1c <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8002a1a:	2002      	movs	r0, #2
}
 8002a1c:	b002      	add	sp, #8
 8002a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002a22:	2001      	movs	r0, #1
 8002a24:	e7fa      	b.n	8002a1c <HAL_UART_Transmit+0xc2>

08002a26 <HAL_UART_TxCpltCallback>:
}
 8002a26:	4770      	bx	lr

08002a28 <UART_EndTransmit_IT>:
{
 8002a28:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a2a:	6801      	ldr	r1, [r0, #0]
 8002a2c:	68ca      	ldr	r2, [r1, #12]
 8002a2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a32:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002a34:	2220      	movs	r2, #32
 8002a36:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8002a3a:	f7ff fff4 	bl	8002a26 <HAL_UART_TxCpltCallback>
}
 8002a3e:	2000      	movs	r0, #0
 8002a40:	bd08      	pop	{r3, pc}

08002a42 <HAL_UART_RxCpltCallback>:
}
 8002a42:	4770      	bx	lr

08002a44 <HAL_UART_RxHalfCpltCallback>:
}
 8002a44:	4770      	bx	lr

08002a46 <HAL_UART_ErrorCallback>:
}
 8002a46:	4770      	bx	lr

08002a48 <UART_DMAError>:
{
 8002a48:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a4a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002a4c:	6823      	ldr	r3, [r4, #0]
 8002a4e:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002a50:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b21      	cmp	r3, #33	@ 0x21
 8002a58:	d010      	beq.n	8002a7c <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a5a:	6823      	ldr	r3, [r4, #0]
 8002a5c:	695a      	ldr	r2, [r3, #20]
 8002a5e:	f002 0240 	and.w	r2, r2, #64	@ 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002a62:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b22      	cmp	r3, #34	@ 0x22
 8002a6a:	d011      	beq.n	8002a90 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002a6c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002a6e:	f043 0310 	orr.w	r3, r3, #16
 8002a72:	6463      	str	r3, [r4, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 8002a74:	4620      	mov	r0, r4
 8002a76:	f7ff ffe6 	bl	8002a46 <HAL_UART_ErrorCallback>
}
 8002a7a:	bd10      	pop	{r4, pc}
 8002a7c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002a80:	2a00      	cmp	r2, #0
 8002a82:	d0ea      	beq.n	8002a5a <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	84e3      	strh	r3, [r4, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8002a88:	4620      	mov	r0, r4
 8002a8a:	f7ff fdfd 	bl	8002688 <UART_EndTxTransfer>
 8002a8e:	e7e4      	b.n	8002a5a <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002a90:	2a00      	cmp	r2, #0
 8002a92:	d0eb      	beq.n	8002a6c <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f7ff fe05 	bl	80026a8 <UART_EndRxTransfer>
 8002a9e:	e7e5      	b.n	8002a6c <UART_DMAError+0x24>

08002aa0 <UART_DMAAbortOnError>:
{
 8002aa0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aa2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002aa8:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8002aaa:	f7ff ffcc 	bl	8002a46 <HAL_UART_ErrorCallback>
}
 8002aae:	bd08      	pop	{r3, pc}

08002ab0 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ab0:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b22      	cmp	r3, #34	@ 0x22
 8002ab8:	d169      	bne.n	8002b8e <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aba:	6883      	ldr	r3, [r0, #8]
 8002abc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ac0:	d04f      	beq.n	8002b62 <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ac2:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ac4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ac8:	d004      	beq.n	8002ad4 <UART_Receive_IT+0x24>
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d156      	bne.n	8002b7c <UART_Receive_IT+0xcc>
 8002ace:	6903      	ldr	r3, [r0, #16]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d153      	bne.n	8002b7c <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ad4:	6803      	ldr	r3, [r0, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8002ada:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002adc:	3301      	adds	r3, #1
 8002ade:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8002ae0:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d151      	bne.n	8002b92 <UART_Receive_IT+0xe2>
{
 8002aee:	b500      	push	{lr}
 8002af0:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002af2:	6802      	ldr	r2, [r0, #0]
 8002af4:	68d3      	ldr	r3, [r2, #12]
 8002af6:	f023 0320 	bic.w	r3, r3, #32
 8002afa:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002afc:	6802      	ldr	r2, [r0, #0]
 8002afe:	68d3      	ldr	r3, [r2, #12]
 8002b00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b04:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b06:	6802      	ldr	r2, [r0, #0]
 8002b08:	6953      	ldr	r3, [r2, #20]
 8002b0a:	f023 0301 	bic.w	r3, r3, #1
 8002b0e:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002b10:	2320      	movs	r3, #32
 8002b12:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b16:	2300      	movs	r3, #0
 8002b18:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b1a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d133      	bne.n	8002b88 <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b20:	2300      	movs	r3, #0
 8002b22:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b24:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b26:	f102 030c 	add.w	r3, r2, #12
 8002b2a:	e853 3f00 	ldrex	r3, [r3]
 8002b2e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b32:	320c      	adds	r2, #12
 8002b34:	e842 3100 	strex	r1, r3, [r2]
 8002b38:	2900      	cmp	r1, #0
 8002b3a:	d1f3      	bne.n	8002b24 <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b3c:	6803      	ldr	r3, [r0, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	f012 0f10 	tst.w	r2, #16
 8002b44:	d006      	beq.n	8002b54 <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b46:	2200      	movs	r2, #0
 8002b48:	9201      	str	r2, [sp, #4]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	9201      	str	r2, [sp, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b54:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8002b56:	f7fd fda5 	bl	80006a4 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8002b5a:	2000      	movs	r0, #0
}
 8002b5c:	b003      	add	sp, #12
 8002b5e:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b62:	6902      	ldr	r2, [r0, #16]
 8002b64:	2a00      	cmp	r2, #0
 8002b66:	d1ac      	bne.n	8002ac2 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b68:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b6a:	6803      	ldr	r3, [r0, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b72:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8002b74:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002b76:	3302      	adds	r3, #2
 8002b78:	6283      	str	r3, [r0, #40]	@ 0x28
 8002b7a:	e7b1      	b.n	8002ae0 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b7c:	6803      	ldr	r3, [r0, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b84:	7013      	strb	r3, [r2, #0]
 8002b86:	e7a8      	b.n	8002ada <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 8002b88:	f7ff ff5b 	bl	8002a42 <HAL_UART_RxCpltCallback>
 8002b8c:	e7e5      	b.n	8002b5a <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 8002b8e:	2002      	movs	r0, #2
 8002b90:	4770      	bx	lr
    return HAL_OK;
 8002b92:	2000      	movs	r0, #0
}
 8002b94:	4770      	bx	lr
	...

08002b98 <HAL_UART_IRQHandler>:
{
 8002b98:	b510      	push	{r4, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b9e:	6802      	ldr	r2, [r0, #0]
 8002ba0:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ba2:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ba4:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8002ba6:	f013 0f0f 	tst.w	r3, #15
 8002baa:	d109      	bne.n	8002bc0 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bac:	f013 0f20 	tst.w	r3, #32
 8002bb0:	d00c      	beq.n	8002bcc <HAL_UART_IRQHandler+0x34>
 8002bb2:	f010 0f20 	tst.w	r0, #32
 8002bb6:	d009      	beq.n	8002bcc <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 8002bb8:	4620      	mov	r0, r4
 8002bba:	f7ff ff79 	bl	8002ab0 <UART_Receive_IT>
      return;
 8002bbe:	e016      	b.n	8002bee <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002bc0:	f011 0101 	ands.w	r1, r1, #1
 8002bc4:	d115      	bne.n	8002bf2 <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bc6:	f410 7f90 	tst.w	r0, #288	@ 0x120
 8002bca:	d112      	bne.n	8002bf2 <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bcc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002bce:	2901      	cmp	r1, #1
 8002bd0:	d079      	beq.n	8002cc6 <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002bd2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002bd6:	d003      	beq.n	8002be0 <HAL_UART_IRQHandler+0x48>
 8002bd8:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8002bdc:	f040 8114 	bne.w	8002e08 <HAL_UART_IRQHandler+0x270>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002be0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002be4:	d003      	beq.n	8002bee <HAL_UART_IRQHandler+0x56>
 8002be6:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8002bea:	f040 8111 	bne.w	8002e10 <HAL_UART_IRQHandler+0x278>
}
 8002bee:	b002      	add	sp, #8
 8002bf0:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bf2:	f013 0f01 	tst.w	r3, #1
 8002bf6:	d006      	beq.n	8002c06 <HAL_UART_IRQHandler+0x6e>
 8002bf8:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8002bfc:	d003      	beq.n	8002c06 <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bfe:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002c00:	f042 0201 	orr.w	r2, r2, #1
 8002c04:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c06:	f013 0f04 	tst.w	r3, #4
 8002c0a:	d004      	beq.n	8002c16 <HAL_UART_IRQHandler+0x7e>
 8002c0c:	b119      	cbz	r1, 8002c16 <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c0e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002c10:	f042 0202 	orr.w	r2, r2, #2
 8002c14:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c16:	f013 0f02 	tst.w	r3, #2
 8002c1a:	d004      	beq.n	8002c26 <HAL_UART_IRQHandler+0x8e>
 8002c1c:	b119      	cbz	r1, 8002c26 <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c1e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002c20:	f042 0204 	orr.w	r2, r2, #4
 8002c24:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c26:	f013 0f08 	tst.w	r3, #8
 8002c2a:	d007      	beq.n	8002c3c <HAL_UART_IRQHandler+0xa4>
 8002c2c:	f010 0f20 	tst.w	r0, #32
 8002c30:	d100      	bne.n	8002c34 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c32:	b119      	cbz	r1, 8002c3c <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c34:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002c36:	f042 0208 	orr.w	r2, r2, #8
 8002c3a:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c3c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002c3e:	2a00      	cmp	r2, #0
 8002c40:	d0d5      	beq.n	8002bee <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c42:	f013 0f20 	tst.w	r3, #32
 8002c46:	d002      	beq.n	8002c4e <HAL_UART_IRQHandler+0xb6>
 8002c48:	f010 0f20 	tst.w	r0, #32
 8002c4c:	d129      	bne.n	8002ca2 <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c4e:	6823      	ldr	r3, [r4, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c56:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002c58:	f012 0f08 	tst.w	r2, #8
 8002c5c:	d100      	bne.n	8002c60 <HAL_UART_IRQHandler+0xc8>
 8002c5e:	b363      	cbz	r3, 8002cba <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 8002c60:	4620      	mov	r0, r4
 8002c62:	f7ff fd21 	bl	80026a8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c66:	6823      	ldr	r3, [r4, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002c6e:	d020      	beq.n	8002cb2 <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c70:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c72:	f102 0314 	add.w	r3, r2, #20
 8002c76:	e853 3f00 	ldrex	r3, [r3]
 8002c7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7e:	3214      	adds	r2, #20
 8002c80:	e842 3100 	strex	r1, r3, [r2]
 8002c84:	2900      	cmp	r1, #0
 8002c86:	d1f3      	bne.n	8002c70 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 8002c88:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002c8a:	b173      	cbz	r3, 8002caa <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c8c:	4a62      	ldr	r2, [pc, #392]	@ (8002e18 <HAL_UART_IRQHandler+0x280>)
 8002c8e:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c90:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002c92:	f7fe f9a6 	bl	8000fe2 <HAL_DMA_Abort_IT>
 8002c96:	2800      	cmp	r0, #0
 8002c98:	d0a9      	beq.n	8002bee <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c9a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002c9c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002c9e:	4798      	blx	r3
 8002ca0:	e7a5      	b.n	8002bee <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	f7ff ff04 	bl	8002ab0 <UART_Receive_IT>
 8002ca8:	e7d1      	b.n	8002c4e <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 8002caa:	4620      	mov	r0, r4
 8002cac:	f7ff fecb 	bl	8002a46 <HAL_UART_ErrorCallback>
 8002cb0:	e79d      	b.n	8002bee <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	f7ff fec7 	bl	8002a46 <HAL_UART_ErrorCallback>
 8002cb8:	e799      	b.n	8002bee <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 8002cba:	4620      	mov	r0, r4
 8002cbc:	f7ff fec3 	bl	8002a46 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 8002cc4:	e793      	b.n	8002bee <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002cc6:	f013 0f10 	tst.w	r3, #16
 8002cca:	d082      	beq.n	8002bd2 <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ccc:	f010 0f10 	tst.w	r0, #16
 8002cd0:	f43f af7f 	beq.w	8002bd2 <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	9301      	str	r3, [sp, #4]
 8002cd8:	6813      	ldr	r3, [r2, #0]
 8002cda:	9301      	str	r3, [sp, #4]
 8002cdc:	6853      	ldr	r3, [r2, #4]
 8002cde:	9301      	str	r3, [sp, #4]
 8002ce0:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce2:	6953      	ldr	r3, [r2, #20]
 8002ce4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002ce8:	d052      	beq.n	8002d90 <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cea:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002cec:	6813      	ldr	r3, [r2, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f43f af7b 	beq.w	8002bee <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cf8:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8002cfa:	4299      	cmp	r1, r3
 8002cfc:	f67f af77 	bls.w	8002bee <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 8002d00:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d02:	69d3      	ldr	r3, [r2, #28]
 8002d04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d08:	d037      	beq.n	8002d7a <HAL_UART_IRQHandler+0x1e2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d0a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0c:	f102 030c 	add.w	r3, r2, #12
 8002d10:	e853 3f00 	ldrex	r3, [r3]
 8002d14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d18:	320c      	adds	r2, #12
 8002d1a:	e842 3100 	strex	r1, r3, [r2]
 8002d1e:	2900      	cmp	r1, #0
 8002d20:	d1f3      	bne.n	8002d0a <HAL_UART_IRQHandler+0x172>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d22:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d24:	f102 0314 	add.w	r3, r2, #20
 8002d28:	e853 3f00 	ldrex	r3, [r3]
 8002d2c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d30:	3214      	adds	r2, #20
 8002d32:	e842 3100 	strex	r1, r3, [r2]
 8002d36:	2900      	cmp	r1, #0
 8002d38:	d1f3      	bne.n	8002d22 <HAL_UART_IRQHandler+0x18a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d3a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3c:	f102 0314 	add.w	r3, r2, #20
 8002d40:	e853 3f00 	ldrex	r3, [r3]
 8002d44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d48:	3214      	adds	r2, #20
 8002d4a:	e842 3100 	strex	r1, r3, [r2]
 8002d4e:	2900      	cmp	r1, #0
 8002d50:	d1f3      	bne.n	8002d3a <HAL_UART_IRQHandler+0x1a2>
          huart->RxState = HAL_UART_STATE_READY;
 8002d52:	2320      	movs	r3, #32
 8002d54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d5c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5e:	f102 030c 	add.w	r3, r2, #12
 8002d62:	e853 3f00 	ldrex	r3, [r3]
 8002d66:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6a:	320c      	adds	r2, #12
 8002d6c:	e842 3100 	strex	r1, r3, [r2]
 8002d70:	2900      	cmp	r1, #0
 8002d72:	d1f3      	bne.n	8002d5c <HAL_UART_IRQHandler+0x1c4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d74:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002d76:	f7fe f8ea 	bl	8000f4e <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d7e:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8002d80:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	1ac9      	subs	r1, r1, r3
 8002d86:	b289      	uxth	r1, r1
 8002d88:	4620      	mov	r0, r4
 8002d8a:	f7fd fc8b 	bl	80006a4 <HAL_UARTEx_RxEventCallback>
      return;
 8002d8e:	e72e      	b.n	8002bee <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d90:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8002d92:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	1ac9      	subs	r1, r1, r3
 8002d98:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8002d9a:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f43f af25 	beq.w	8002bee <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 8002da4:	2900      	cmp	r1, #0
 8002da6:	f43f af22 	beq.w	8002bee <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002daa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dac:	f102 030c 	add.w	r3, r2, #12
 8002db0:	e853 3f00 	ldrex	r3, [r3]
 8002db4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db8:	320c      	adds	r2, #12
 8002dba:	e842 3000 	strex	r0, r3, [r2]
 8002dbe:	2800      	cmp	r0, #0
 8002dc0:	d1f3      	bne.n	8002daa <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc4:	f102 0314 	add.w	r3, r2, #20
 8002dc8:	e853 3f00 	ldrex	r3, [r3]
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd0:	3214      	adds	r2, #20
 8002dd2:	e842 3000 	strex	r0, r3, [r2]
 8002dd6:	2800      	cmp	r0, #0
 8002dd8:	d1f3      	bne.n	8002dc2 <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 8002dda:	2320      	movs	r3, #32
 8002ddc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de0:	2300      	movs	r3, #0
 8002de2:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de6:	f102 030c 	add.w	r3, r2, #12
 8002dea:	e853 3f00 	ldrex	r3, [r3]
 8002dee:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df2:	320c      	adds	r2, #12
 8002df4:	e842 3000 	strex	r0, r3, [r2]
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	d1f3      	bne.n	8002de4 <HAL_UART_IRQHandler+0x24c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e00:	4620      	mov	r0, r4
 8002e02:	f7fd fc4f 	bl	80006a4 <HAL_UARTEx_RxEventCallback>
      return;
 8002e06:	e6f2      	b.n	8002bee <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 8002e08:	4620      	mov	r0, r4
 8002e0a:	f7ff fc7b 	bl	8002704 <UART_Transmit_IT>
    return;
 8002e0e:	e6ee      	b.n	8002bee <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 8002e10:	4620      	mov	r0, r4
 8002e12:	f7ff fe09 	bl	8002a28 <UART_EndTransmit_IT>
    return;
 8002e16:	e6ea      	b.n	8002bee <HAL_UART_IRQHandler+0x56>
 8002e18:	08002aa1 	.word	0x08002aa1

08002e1c <UART_DMARxHalfCplt>:
{
 8002e1c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e1e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002e20:	2301      	movs	r3, #1
 8002e22:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e24:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d002      	beq.n	8002e30 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 8002e2a:	f7ff fe0b 	bl	8002a44 <HAL_UART_RxHalfCpltCallback>
}
 8002e2e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002e30:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8002e32:	0849      	lsrs	r1, r1, #1
 8002e34:	f7fd fc36 	bl	80006a4 <HAL_UARTEx_RxEventCallback>
 8002e38:	e7f9      	b.n	8002e2e <UART_DMARxHalfCplt+0x12>

08002e3a <UART_DMAReceiveCplt>:
{
 8002e3a:	b508      	push	{r3, lr}
 8002e3c:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e3e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002e48:	d12b      	bne.n	8002ea2 <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e4e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e50:	f102 030c 	add.w	r3, r2, #12
 8002e54:	e853 3f00 	ldrex	r3, [r3]
 8002e58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5c:	320c      	adds	r2, #12
 8002e5e:	e842 3100 	strex	r1, r3, [r2]
 8002e62:	2900      	cmp	r1, #0
 8002e64:	d1f3      	bne.n	8002e4e <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e66:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e68:	f102 0314 	add.w	r3, r2, #20
 8002e6c:	e853 3f00 	ldrex	r3, [r3]
 8002e70:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e74:	3214      	adds	r2, #20
 8002e76:	e842 3100 	strex	r1, r3, [r2]
 8002e7a:	2900      	cmp	r1, #0
 8002e7c:	d1f3      	bne.n	8002e66 <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e7e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e80:	f102 0314 	add.w	r3, r2, #20
 8002e84:	e853 3f00 	ldrex	r3, [r3]
 8002e88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8c:	3214      	adds	r2, #20
 8002e8e:	e842 3100 	strex	r1, r3, [r2]
 8002e92:	2900      	cmp	r1, #0
 8002e94:	d1f3      	bne.n	8002e7e <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8002e96:	2320      	movs	r3, #32
 8002e98:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e9c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d007      	beq.n	8002eb2 <UART_DMAReceiveCplt+0x78>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ea6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d00f      	beq.n	8002ecc <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8002eac:	f7ff fdc9 	bl	8002a42 <HAL_UART_RxCpltCallback>
}
 8002eb0:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eb2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb4:	f102 030c 	add.w	r3, r2, #12
 8002eb8:	e853 3f00 	ldrex	r3, [r3]
 8002ebc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec0:	320c      	adds	r2, #12
 8002ec2:	e842 3100 	strex	r1, r3, [r2]
 8002ec6:	2900      	cmp	r1, #0
 8002ec8:	d1f3      	bne.n	8002eb2 <UART_DMAReceiveCplt+0x78>
 8002eca:	e7ea      	b.n	8002ea2 <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ecc:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8002ece:	f7fd fbe9 	bl	80006a4 <HAL_UARTEx_RxEventCallback>
 8002ed2:	e7ed      	b.n	8002eb0 <UART_DMAReceiveCplt+0x76>

08002ed4 <UART_Start_Receive_DMA>:
{
 8002ed4:	b530      	push	{r4, r5, lr}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	4604      	mov	r4, r0
 8002eda:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 8002edc:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002ede:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee0:	2500      	movs	r5, #0
 8002ee2:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ee4:	2222      	movs	r2, #34	@ 0x22
 8002ee6:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002eea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8002eec:	481f      	ldr	r0, [pc, #124]	@ (8002f6c <UART_Start_Receive_DMA+0x98>)
 8002eee:	63d0      	str	r0, [r2, #60]	@ 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002ef0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002ef2:	481f      	ldr	r0, [pc, #124]	@ (8002f70 <UART_Start_Receive_DMA+0x9c>)
 8002ef4:	6410      	str	r0, [r2, #64]	@ 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002ef6:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002ef8:	481e      	ldr	r0, [pc, #120]	@ (8002f74 <UART_Start_Receive_DMA+0xa0>)
 8002efa:	64d0      	str	r0, [r2, #76]	@ 0x4c
  huart->hdmarx->XferAbortCallback = NULL;
 8002efc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002efe:	6515      	str	r5, [r2, #80]	@ 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002f00:	6820      	ldr	r0, [r4, #0]
 8002f02:	460a      	mov	r2, r1
 8002f04:	1d01      	adds	r1, r0, #4
 8002f06:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002f08:	f7fd ffec 	bl	8000ee4 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002f0c:	9501      	str	r5, [sp, #4]
 8002f0e:	6823      	ldr	r3, [r4, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	9201      	str	r2, [sp, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	9301      	str	r3, [sp, #4]
 8002f18:	9b01      	ldr	r3, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f1a:	6923      	ldr	r3, [r4, #16]
 8002f1c:	b15b      	cbz	r3, 8002f36 <UART_Start_Receive_DMA+0x62>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f1e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f20:	f102 030c 	add.w	r3, r2, #12
 8002f24:	e853 3f00 	ldrex	r3, [r3]
 8002f28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2c:	320c      	adds	r2, #12
 8002f2e:	e842 3100 	strex	r1, r3, [r2]
 8002f32:	2900      	cmp	r1, #0
 8002f34:	d1f3      	bne.n	8002f1e <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f36:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f38:	f102 0314 	add.w	r3, r2, #20
 8002f3c:	e853 3f00 	ldrex	r3, [r3]
 8002f40:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f44:	3214      	adds	r2, #20
 8002f46:	e842 3100 	strex	r1, r3, [r2]
 8002f4a:	2900      	cmp	r1, #0
 8002f4c:	d1f3      	bne.n	8002f36 <UART_Start_Receive_DMA+0x62>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f4e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f50:	f102 0314 	add.w	r3, r2, #20
 8002f54:	e853 3f00 	ldrex	r3, [r3]
 8002f58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5c:	3214      	adds	r2, #20
 8002f5e:	e842 3100 	strex	r1, r3, [r2]
 8002f62:	2900      	cmp	r1, #0
 8002f64:	d1f3      	bne.n	8002f4e <UART_Start_Receive_DMA+0x7a>
}
 8002f66:	2000      	movs	r0, #0
 8002f68:	b003      	add	sp, #12
 8002f6a:	bd30      	pop	{r4, r5, pc}
 8002f6c:	08002e3b 	.word	0x08002e3b
 8002f70:	08002e1d 	.word	0x08002e1d
 8002f74:	08002a49 	.word	0x08002a49

08002f78 <HAL_UARTEx_ReceiveToIdle_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f78:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	d129      	bne.n	8002fd6 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
{
 8002f82:	b510      	push	{r4, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8002f88:	b339      	cbz	r1, 8002fda <HAL_UARTEx_ReceiveToIdle_DMA+0x62>
 8002f8a:	b912      	cbnz	r2, 8002f92 <HAL_UARTEx_ReceiveToIdle_DMA+0x1a>
      return HAL_ERROR;
 8002f8c:	2001      	movs	r0, #1
}
 8002f8e:	b002      	add	sp, #8
 8002f90:	bd10      	pop	{r4, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002f92:	2301      	movs	r3, #1
 8002f94:	6303      	str	r3, [r0, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f96:	2300      	movs	r3, #0
 8002f98:	6343      	str	r3, [r0, #52]	@ 0x34
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002f9a:	f7ff ff9b 	bl	8002ed4 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 8002f9e:	2800      	cmp	r0, #0
 8002fa0:	d1f5      	bne.n	8002f8e <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fa2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d001      	beq.n	8002fac <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
        status = HAL_ERROR;
 8002fa8:	2001      	movs	r0, #1
    return status;
 8002faa:	e7f0      	b.n	8002f8e <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fac:	2300      	movs	r3, #0
 8002fae:	9301      	str	r3, [sp, #4]
 8002fb0:	6823      	ldr	r3, [r4, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	9201      	str	r2, [sp, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	9301      	str	r3, [sp, #4]
 8002fba:	9b01      	ldr	r3, [sp, #4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fbc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbe:	f102 030c 	add.w	r3, r2, #12
 8002fc2:	e853 3f00 	ldrex	r3, [r3]
 8002fc6:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fca:	320c      	adds	r2, #12
 8002fcc:	e842 3100 	strex	r1, r3, [r2]
 8002fd0:	2900      	cmp	r1, #0
 8002fd2:	d1f3      	bne.n	8002fbc <HAL_UARTEx_ReceiveToIdle_DMA+0x44>
 8002fd4:	e7db      	b.n	8002f8e <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
    return HAL_BUSY;
 8002fd6:	2002      	movs	r0, #2
}
 8002fd8:	4770      	bx	lr
      return HAL_ERROR;
 8002fda:	2001      	movs	r0, #1
 8002fdc:	e7d7      	b.n	8002f8e <HAL_UARTEx_ReceiveToIdle_DMA+0x16>

08002fde <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002fde:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002fe4:	9b01      	ldr	r3, [sp, #4]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8002fea:	9b01      	ldr	r3, [sp, #4]
 8002fec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002ff0:	d815      	bhi.n	800301e <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002ff2:	6903      	ldr	r3, [r0, #16]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	daf5      	bge.n	8002fe4 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002ffc:	6903      	ldr	r3, [r0, #16]
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 8003004:	9b01      	ldr	r3, [sp, #4]
 8003006:	3301      	adds	r3, #1
 8003008:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 800300a:	9b01      	ldr	r3, [sp, #4]
 800300c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003010:	d808      	bhi.n	8003024 <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003012:	6903      	ldr	r3, [r0, #16]
 8003014:	f013 0f01 	tst.w	r3, #1
 8003018:	d1f4      	bne.n	8003004 <USB_CoreReset+0x26>

  return HAL_OK;
 800301a:	2000      	movs	r0, #0
 800301c:	e000      	b.n	8003020 <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 800301e:	2003      	movs	r0, #3
}
 8003020:	b002      	add	sp, #8
 8003022:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003024:	2003      	movs	r0, #3
 8003026:	e7fb      	b.n	8003020 <USB_CoreReset+0x42>

08003028 <USB_CoreInit>:
{
 8003028:	b084      	sub	sp, #16
 800302a:	b510      	push	{r4, lr}
 800302c:	4604      	mov	r4, r0
 800302e:	a803      	add	r0, sp, #12
 8003030:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003034:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d121      	bne.n	8003080 <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800303c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800303e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003042:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003044:	68e3      	ldr	r3, [r4, #12]
 8003046:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800304a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800304e:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003050:	68e3      	ldr	r3, [r4, #12]
 8003052:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003056:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8003058:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d00a      	beq.n	8003076 <USB_CoreInit+0x4e>
    ret = USB_CoreReset(USBx);
 8003060:	4620      	mov	r0, r4
 8003062:	f7ff ffbc 	bl	8002fde <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8003066:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d01c      	beq.n	80030a8 <USB_CoreInit+0x80>
}
 800306e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003072:	b004      	add	sp, #16
 8003074:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003076:	68e3      	ldr	r3, [r4, #12]
 8003078:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800307c:	60e3      	str	r3, [r4, #12]
 800307e:	e7ef      	b.n	8003060 <USB_CoreInit+0x38>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003080:	68e3      	ldr	r3, [r4, #12]
 8003082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003086:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8003088:	4620      	mov	r0, r4
 800308a:	f7ff ffa8 	bl	8002fde <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800308e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8003092:	b923      	cbnz	r3, 800309e <USB_CoreInit+0x76>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003094:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003096:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800309a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800309c:	e7e3      	b.n	8003066 <USB_CoreInit+0x3e>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800309e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80030a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030a4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80030a6:	e7de      	b.n	8003066 <USB_CoreInit+0x3e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80030a8:	68a3      	ldr	r3, [r4, #8]
 80030aa:	f043 0306 	orr.w	r3, r3, #6
 80030ae:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80030b0:	68a3      	ldr	r3, [r4, #8]
 80030b2:	f043 0320 	orr.w	r3, r3, #32
 80030b6:	60a3      	str	r3, [r4, #8]
 80030b8:	e7d9      	b.n	800306e <USB_CoreInit+0x46>
	...

080030bc <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80030bc:	2a02      	cmp	r2, #2
 80030be:	d00a      	beq.n	80030d6 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 80030c0:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80030c2:	68c3      	ldr	r3, [r0, #12]
 80030c4:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 80030c8:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80030ca:	68c3      	ldr	r3, [r0, #12]
 80030cc:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80030d0:	60c3      	str	r3, [r0, #12]
}
 80030d2:	2000      	movs	r0, #0
 80030d4:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80030d6:	4b23      	ldr	r3, [pc, #140]	@ (8003164 <USB_SetTurnaroundTime+0xa8>)
 80030d8:	440b      	add	r3, r1
 80030da:	4a23      	ldr	r2, [pc, #140]	@ (8003168 <USB_SetTurnaroundTime+0xac>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d92f      	bls.n	8003140 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80030e0:	4b22      	ldr	r3, [pc, #136]	@ (800316c <USB_SetTurnaroundTime+0xb0>)
 80030e2:	440b      	add	r3, r1
 80030e4:	4a22      	ldr	r2, [pc, #136]	@ (8003170 <USB_SetTurnaroundTime+0xb4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d92c      	bls.n	8003144 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80030ea:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 80030ee:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 80030f2:	4a20      	ldr	r2, [pc, #128]	@ (8003174 <USB_SetTurnaroundTime+0xb8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d927      	bls.n	8003148 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80030f8:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 80030fc:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 8003100:	4a1d      	ldr	r2, [pc, #116]	@ (8003178 <USB_SetTurnaroundTime+0xbc>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d322      	bcc.n	800314c <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003106:	4b1d      	ldr	r3, [pc, #116]	@ (800317c <USB_SetTurnaroundTime+0xc0>)
 8003108:	440b      	add	r3, r1
 800310a:	4a1d      	ldr	r2, [pc, #116]	@ (8003180 <USB_SetTurnaroundTime+0xc4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d91f      	bls.n	8003150 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003110:	4b1c      	ldr	r3, [pc, #112]	@ (8003184 <USB_SetTurnaroundTime+0xc8>)
 8003112:	440b      	add	r3, r1
 8003114:	4a1c      	ldr	r2, [pc, #112]	@ (8003188 <USB_SetTurnaroundTime+0xcc>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d31c      	bcc.n	8003154 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800311a:	4b1c      	ldr	r3, [pc, #112]	@ (800318c <USB_SetTurnaroundTime+0xd0>)
 800311c:	440b      	add	r3, r1
 800311e:	4a1c      	ldr	r2, [pc, #112]	@ (8003190 <USB_SetTurnaroundTime+0xd4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d319      	bcc.n	8003158 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003124:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 8003128:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 800312c:	4a19      	ldr	r2, [pc, #100]	@ (8003194 <USB_SetTurnaroundTime+0xd8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d314      	bcc.n	800315c <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003132:	4b19      	ldr	r3, [pc, #100]	@ (8003198 <USB_SetTurnaroundTime+0xdc>)
 8003134:	440b      	add	r3, r1
 8003136:	4a19      	ldr	r2, [pc, #100]	@ (800319c <USB_SetTurnaroundTime+0xe0>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d211      	bcs.n	8003160 <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 800313c:	2207      	movs	r2, #7
 800313e:	e7c0      	b.n	80030c2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 8003140:	220f      	movs	r2, #15
 8003142:	e7be      	b.n	80030c2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8003144:	220e      	movs	r2, #14
 8003146:	e7bc      	b.n	80030c2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8003148:	220d      	movs	r2, #13
 800314a:	e7ba      	b.n	80030c2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 800314c:	220c      	movs	r2, #12
 800314e:	e7b8      	b.n	80030c2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8003150:	220b      	movs	r2, #11
 8003152:	e7b6      	b.n	80030c2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8003154:	220a      	movs	r2, #10
 8003156:	e7b4      	b.n	80030c2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8003158:	2209      	movs	r2, #9
 800315a:	e7b2      	b.n	80030c2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 800315c:	2208      	movs	r2, #8
 800315e:	e7b0      	b.n	80030c2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 8003160:	2206      	movs	r2, #6
 8003162:	e7ae      	b.n	80030c2 <USB_SetTurnaroundTime+0x6>
 8003164:	ff275340 	.word	0xff275340
 8003168:	000c34ff 	.word	0x000c34ff
 800316c:	ff1b1e40 	.word	0xff1b1e40
 8003170:	000f423f 	.word	0x000f423f
 8003174:	00124f7f 	.word	0x00124f7f
 8003178:	0013d620 	.word	0x0013d620
 800317c:	fee5b660 	.word	0xfee5b660
 8003180:	0016e35f 	.word	0x0016e35f
 8003184:	feced300 	.word	0xfeced300
 8003188:	001b7740 	.word	0x001b7740
 800318c:	feb35bc0 	.word	0xfeb35bc0
 8003190:	002191c0 	.word	0x002191c0
 8003194:	00387520 	.word	0x00387520
 8003198:	fe5954e0 	.word	0xfe5954e0
 800319c:	00419ce0 	.word	0x00419ce0

080031a0 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80031a0:	6883      	ldr	r3, [r0, #8]
 80031a2:	f043 0301 	orr.w	r3, r3, #1
 80031a6:	6083      	str	r3, [r0, #8]
}
 80031a8:	2000      	movs	r0, #0
 80031aa:	4770      	bx	lr

080031ac <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80031ac:	6883      	ldr	r3, [r0, #8]
 80031ae:	f023 0301 	bic.w	r3, r3, #1
 80031b2:	6083      	str	r3, [r0, #8]
}
 80031b4:	2000      	movs	r0, #0
 80031b6:	4770      	bx	lr

080031b8 <USB_FlushTxFifo>:
{
 80031b8:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	9301      	str	r3, [sp, #4]
    count++;
 80031be:	9b01      	ldr	r3, [sp, #4]
 80031c0:	3301      	adds	r3, #1
 80031c2:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80031c4:	9b01      	ldr	r3, [sp, #4]
 80031c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80031ca:	d815      	bhi.n	80031f8 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80031cc:	6903      	ldr	r3, [r0, #16]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	daf5      	bge.n	80031be <USB_FlushTxFifo+0x6>
  count = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80031d6:	0189      	lsls	r1, r1, #6
 80031d8:	f041 0120 	orr.w	r1, r1, #32
 80031dc:	6101      	str	r1, [r0, #16]
    count++;
 80031de:	9b01      	ldr	r3, [sp, #4]
 80031e0:	3301      	adds	r3, #1
 80031e2:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80031e4:	9b01      	ldr	r3, [sp, #4]
 80031e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80031ea:	d808      	bhi.n	80031fe <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80031ec:	6903      	ldr	r3, [r0, #16]
 80031ee:	f013 0f20 	tst.w	r3, #32
 80031f2:	d1f4      	bne.n	80031de <USB_FlushTxFifo+0x26>
  return HAL_OK;
 80031f4:	2000      	movs	r0, #0
 80031f6:	e000      	b.n	80031fa <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 80031f8:	2003      	movs	r0, #3
}
 80031fa:	b002      	add	sp, #8
 80031fc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80031fe:	2003      	movs	r0, #3
 8003200:	e7fb      	b.n	80031fa <USB_FlushTxFifo+0x42>

08003202 <USB_FlushRxFifo>:
{
 8003202:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	9301      	str	r3, [sp, #4]
    count++;
 8003208:	9b01      	ldr	r3, [sp, #4]
 800320a:	3301      	adds	r3, #1
 800320c:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800320e:	9b01      	ldr	r3, [sp, #4]
 8003210:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003214:	d813      	bhi.n	800323e <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003216:	6903      	ldr	r3, [r0, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	daf5      	bge.n	8003208 <USB_FlushRxFifo+0x6>
  count = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003220:	2310      	movs	r3, #16
 8003222:	6103      	str	r3, [r0, #16]
    count++;
 8003224:	9b01      	ldr	r3, [sp, #4]
 8003226:	3301      	adds	r3, #1
 8003228:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800322a:	9b01      	ldr	r3, [sp, #4]
 800322c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003230:	d808      	bhi.n	8003244 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003232:	6903      	ldr	r3, [r0, #16]
 8003234:	f013 0f10 	tst.w	r3, #16
 8003238:	d1f4      	bne.n	8003224 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 800323a:	2000      	movs	r0, #0
 800323c:	e000      	b.n	8003240 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 800323e:	2003      	movs	r0, #3
}
 8003240:	b002      	add	sp, #8
 8003242:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003244:	2003      	movs	r0, #3
 8003246:	e7fb      	b.n	8003240 <USB_FlushRxFifo+0x3e>

08003248 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8003248:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 800324c:	4319      	orrs	r1, r3
 800324e:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8003252:	2000      	movs	r0, #0
 8003254:	4770      	bx	lr
	...

08003258 <USB_DevInit>:
{
 8003258:	b084      	sub	sp, #16
 800325a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325c:	4604      	mov	r4, r0
 800325e:	a807      	add	r0, sp, #28
 8003260:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8003264:	2300      	movs	r3, #0
 8003266:	e006      	b.n	8003276 <USB_DevInit+0x1e>
    USBx->DIEPTXF[i] = 0U;
 8003268:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800326c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003270:	2100      	movs	r1, #0
 8003272:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8003274:	3301      	adds	r3, #1
 8003276:	2b0e      	cmp	r3, #14
 8003278:	d9f6      	bls.n	8003268 <USB_DevInit+0x10>
  if (cfg.vbus_sensing_enable == 0U)
 800327a:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
 800327e:	bb06      	cbnz	r6, 80032c2 <USB_DevInit+0x6a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003280:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 8003284:	f043 0302 	orr.w	r3, r3, #2
 8003288:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800328c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800328e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003292:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003294:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003296:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800329a:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800329c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800329e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032a2:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80032aa:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d115      	bne.n	80032de <USB_DevInit+0x86>
    if (cfg.speed == USBD_HS_SPEED)
 80032b2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80032b6:	b96b      	cbnz	r3, 80032d4 <USB_DevInit+0x7c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80032b8:	2100      	movs	r1, #0
 80032ba:	4620      	mov	r0, r4
 80032bc:	f7ff ffc4 	bl	8003248 <USB_SetDevSpeed>
 80032c0:	e011      	b.n	80032e6 <USB_DevInit+0x8e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80032c2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80032c4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80032c8:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80032ca:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80032cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80032d0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80032d2:	e7e7      	b.n	80032a4 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80032d4:	2101      	movs	r1, #1
 80032d6:	4620      	mov	r0, r4
 80032d8:	f7ff ffb6 	bl	8003248 <USB_SetDevSpeed>
 80032dc:	e003      	b.n	80032e6 <USB_DevInit+0x8e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80032de:	2103      	movs	r1, #3
 80032e0:	4620      	mov	r0, r4
 80032e2:	f7ff ffb1 	bl	8003248 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80032e6:	2110      	movs	r1, #16
 80032e8:	4620      	mov	r0, r4
 80032ea:	f7ff ff65 	bl	80031b8 <USB_FlushTxFifo>
 80032ee:	4605      	mov	r5, r0
 80032f0:	b100      	cbz	r0, 80032f4 <USB_DevInit+0x9c>
    ret = HAL_ERROR;
 80032f2:	2501      	movs	r5, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80032f4:	4620      	mov	r0, r4
 80032f6:	f7ff ff84 	bl	8003202 <USB_FlushRxFifo>
 80032fa:	b100      	cbz	r0, 80032fe <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 80032fc:	2501      	movs	r5, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80032fe:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 8003302:	2300      	movs	r3, #0
 8003304:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003308:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800330c:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003310:	e00a      	b.n	8003328 <USB_DevInit+0xd0>
      if (i == 0U)
 8003312:	b9cb      	cbnz	r3, 8003348 <USB_DevInit+0xf0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003314:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8003318:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800331c:	2200      	movs	r2, #0
 800331e:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003320:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8003324:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003326:	3301      	adds	r3, #1
 8003328:	f89d 101c 	ldrb.w	r1, [sp, #28]
 800332c:	4299      	cmp	r1, r3
 800332e:	d910      	bls.n	8003352 <USB_DevInit+0xfa>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003330:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8003334:	f502 6110 	add.w	r1, r2, #2304	@ 0x900
 8003338:	f8d2 0900 	ldr.w	r0, [r2, #2304]	@ 0x900
 800333c:	2800      	cmp	r0, #0
 800333e:	dbe8      	blt.n	8003312 <USB_DevInit+0xba>
      USBx_INEP(i)->DIEPCTL = 0U;
 8003340:	2000      	movs	r0, #0
 8003342:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8003346:	e7e9      	b.n	800331c <USB_DevInit+0xc4>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003348:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800334c:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8003350:	e7e4      	b.n	800331c <USB_DevInit+0xc4>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003352:	2300      	movs	r3, #0
 8003354:	e00a      	b.n	800336c <USB_DevInit+0x114>
      if (i == 0U)
 8003356:	b1bb      	cbz	r3, 8003388 <USB_DevInit+0x130>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003358:	f04f 4790 	mov.w	r7, #1207959552	@ 0x48000000
 800335c:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003360:	2200      	movs	r2, #0
 8003362:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003364:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8003368:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800336a:	3301      	adds	r3, #1
 800336c:	4299      	cmp	r1, r3
 800336e:	d910      	bls.n	8003392 <USB_DevInit+0x13a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003370:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8003374:	f502 6030 	add.w	r0, r2, #2816	@ 0xb00
 8003378:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	@ 0xb00
 800337c:	2f00      	cmp	r7, #0
 800337e:	dbea      	blt.n	8003356 <USB_DevInit+0xfe>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003380:	2700      	movs	r7, #0
 8003382:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8003386:	e7eb      	b.n	8003360 <USB_DevInit+0x108>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003388:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
 800338c:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8003390:	e7e6      	b.n	8003360 <USB_DevInit+0x108>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003392:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8003396:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800339a:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80033a2:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 80033a6:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80033a8:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80033ac:	b91b      	cbnz	r3, 80033b6 <USB_DevInit+0x15e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80033ae:	69a3      	ldr	r3, [r4, #24]
 80033b0:	f043 0310 	orr.w	r3, r3, #16
 80033b4:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80033b6:	69a2      	ldr	r2, [r4, #24]
 80033b8:	4b0b      	ldr	r3, [pc, #44]	@ (80033e8 <USB_DevInit+0x190>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80033be:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 80033c2:	b11b      	cbz	r3, 80033cc <USB_DevInit+0x174>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80033c4:	69a3      	ldr	r3, [r4, #24]
 80033c6:	f043 0308 	orr.w	r3, r3, #8
 80033ca:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80033cc:	2e01      	cmp	r6, #1
 80033ce:	d004      	beq.n	80033da <USB_DevInit+0x182>
}
 80033d0:	4628      	mov	r0, r5
 80033d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80033d6:	b004      	add	sp, #16
 80033d8:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80033da:	69a3      	ldr	r3, [r4, #24]
 80033dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80033e0:	f043 0304 	orr.w	r3, r3, #4
 80033e4:	61a3      	str	r3, [r4, #24]
 80033e6:	e7f3      	b.n	80033d0 <USB_DevInit+0x178>
 80033e8:	803c3800 	.word	0x803c3800

080033ec <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80033ec:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80033f0:	f013 0306 	ands.w	r3, r3, #6
 80033f4:	d007      	beq.n	8003406 <USB_GetDevSpeed+0x1a>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d007      	beq.n	800340a <USB_GetDevSpeed+0x1e>
 80033fa:	2b06      	cmp	r3, #6
 80033fc:	d001      	beq.n	8003402 <USB_GetDevSpeed+0x16>
    speed = 0xFU;
 80033fe:	200f      	movs	r0, #15
}
 8003400:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 8003402:	2002      	movs	r0, #2
 8003404:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 8003406:	2000      	movs	r0, #0
 8003408:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 800340a:	2002      	movs	r0, #2
 800340c:	4770      	bx	lr

0800340e <USB_ActivateEndpoint>:
{
 800340e:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8003410:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 8003414:	784b      	ldrb	r3, [r1, #1]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d023      	beq.n	8003462 <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800341a:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
 800341e:	f8d0 381c 	ldr.w	r3, [r0, #2076]	@ 0x81c
 8003422:	f00c 040f 	and.w	r4, ip, #15
 8003426:	2201      	movs	r2, #1
 8003428:	40a2      	lsls	r2, r4
 800342a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800342e:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003432:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8003436:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800343a:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800343e:	d10e      	bne.n	800345e <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003440:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003444:	688a      	ldr	r2, [r1, #8]
 8003446:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800344a:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800344c:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8003450:	4313      	orrs	r3, r2
 8003452:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003456:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800345a:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800345e:	2000      	movs	r0, #0
 8003460:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003462:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8003466:	f00c 0e0f 	and.w	lr, ip, #15
 800346a:	fa03 f30e 	lsl.w	r3, r3, lr
 800346e:	b29b      	uxth	r3, r3
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003476:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 800347a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800347e:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8003482:	d1ec      	bne.n	800345e <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003484:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003488:	688a      	ldr	r2, [r1, #8]
 800348a:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800348e:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003490:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003494:	ea42 528c 	orr.w	r2, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003498:	4313      	orrs	r3, r2
 800349a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800349e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034a2:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 80034a6:	e7da      	b.n	800345e <USB_ActivateEndpoint+0x50>

080034a8 <USB_DeactivateEndpoint>:
{
 80034a8:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 80034aa:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80034ac:	784a      	ldrb	r2, [r1, #1]
 80034ae:	2a01      	cmp	r2, #1
 80034b0:	d026      	beq.n	8003500 <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80034b2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80034b6:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80034ba:	2a00      	cmp	r2, #0
 80034bc:	db52      	blt.n	8003564 <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80034be:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 80034c2:	780a      	ldrb	r2, [r1, #0]
 80034c4:	f002 020f 	and.w	r2, r2, #15
 80034c8:	f04f 0c01 	mov.w	ip, #1
 80034cc:	fa0c f202 	lsl.w	r2, ip, r2
 80034d0:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 80034d4:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80034d8:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 80034dc:	7809      	ldrb	r1, [r1, #0]
 80034de:	f001 010f 	and.w	r1, r1, #15
 80034e2:	fa0c fc01 	lsl.w	ip, ip, r1
 80034e6:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 80034ea:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80034ee:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 80034f2:	4a23      	ldr	r2, [pc, #140]	@ (8003580 <USB_DeactivateEndpoint+0xd8>)
 80034f4:	400a      	ands	r2, r1
 80034f6:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 80034fa:	2000      	movs	r0, #0
 80034fc:	bc30      	pop	{r4, r5}
 80034fe:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003500:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003504:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8003508:	2a00      	cmp	r2, #0
 800350a:	db1e      	blt.n	800354a <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800350c:	f8d0 583c 	ldr.w	r5, [r0, #2108]	@ 0x83c
 8003510:	780a      	ldrb	r2, [r1, #0]
 8003512:	f002 020f 	and.w	r2, r2, #15
 8003516:	2401      	movs	r4, #1
 8003518:	fa04 f202 	lsl.w	r2, r4, r2
 800351c:	b292      	uxth	r2, r2
 800351e:	ea25 0202 	bic.w	r2, r5, r2
 8003522:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003526:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 800352a:	7809      	ldrb	r1, [r1, #0]
 800352c:	f001 010f 	and.w	r1, r1, #15
 8003530:	408c      	lsls	r4, r1
 8003532:	b2a4      	uxth	r4, r4
 8003534:	ea22 0204 	bic.w	r2, r2, r4
 8003538:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800353c:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 8003540:	4a10      	ldr	r2, [pc, #64]	@ (8003584 <USB_DeactivateEndpoint+0xdc>)
 8003542:	400a      	ands	r2, r1
 8003544:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8003548:	e7d7      	b.n	80034fa <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800354a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 800354e:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8003552:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003556:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 800355a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800355e:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8003562:	e7d3      	b.n	800350c <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003564:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8003568:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800356c:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003570:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8003574:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003578:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 800357c:	e79f      	b.n	80034be <USB_DeactivateEndpoint+0x16>
 800357e:	bf00      	nop
 8003580:	eff37800 	.word	0xeff37800
 8003584:	ec337800 	.word	0xec337800

08003588 <USB_EPStopXfer>:
{
 8003588:	b410      	push	{r4}
 800358a:	b083      	sub	sp, #12
 800358c:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 8003592:	7848      	ldrb	r0, [r1, #1]
 8003594:	2801      	cmp	r0, #1
 8003596:	d00b      	beq.n	80035b0 <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003598:	780b      	ldrb	r3, [r1, #0]
 800359a:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800359e:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 80035a2:	2800      	cmp	r0, #0
 80035a4:	db2d      	blt.n	8003602 <USB_EPStopXfer+0x7a>
  HAL_StatusTypeDef ret = HAL_OK;
 80035a6:	2000      	movs	r0, #0
}
 80035a8:	b003      	add	sp, #12
 80035aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035ae:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80035b0:	780b      	ldrb	r3, [r1, #0]
 80035b2:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80035b6:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 80035ba:	2c00      	cmp	r4, #0
 80035bc:	db01      	blt.n	80035c2 <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 80035be:	2000      	movs	r0, #0
 80035c0:	e7f2      	b.n	80035a8 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80035c2:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 80035c6:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 80035ca:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80035ce:	780b      	ldrb	r3, [r1, #0]
 80035d0:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80035d4:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 80035d8:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 80035dc:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
        count++;
 80035e0:	9b01      	ldr	r3, [sp, #4]
 80035e2:	3301      	adds	r3, #1
 80035e4:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 80035e6:	9c01      	ldr	r4, [sp, #4]
 80035e8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80035ec:	429c      	cmp	r4, r3
 80035ee:	d8db      	bhi.n	80035a8 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80035f0:	780b      	ldrb	r3, [r1, #0]
 80035f2:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80035f6:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	dbf0      	blt.n	80035e0 <USB_EPStopXfer+0x58>
  HAL_StatusTypeDef ret = HAL_OK;
 80035fe:	2000      	movs	r0, #0
 8003600:	e7d2      	b.n	80035a8 <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003602:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8003606:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 800360a:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800360e:	780b      	ldrb	r3, [r1, #0]
 8003610:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8003614:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8003618:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 800361c:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
        count++;
 8003620:	9b01      	ldr	r3, [sp, #4]
 8003622:	3301      	adds	r3, #1
 8003624:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8003626:	9801      	ldr	r0, [sp, #4]
 8003628:	f242 7310 	movw	r3, #10000	@ 0x2710
 800362c:	4298      	cmp	r0, r3
 800362e:	d808      	bhi.n	8003642 <USB_EPStopXfer+0xba>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003630:	780b      	ldrb	r3, [r1, #0]
 8003632:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8003636:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800363a:	2b00      	cmp	r3, #0
 800363c:	dbf0      	blt.n	8003620 <USB_EPStopXfer+0x98>
  HAL_StatusTypeDef ret = HAL_OK;
 800363e:	2000      	movs	r0, #0
 8003640:	e7b2      	b.n	80035a8 <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 8003642:	2001      	movs	r0, #1
 8003644:	e7b0      	b.n	80035a8 <USB_EPStopXfer+0x20>

08003646 <USB_WritePacket>:
{
 8003646:	b510      	push	{r4, lr}
 8003648:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 800364c:	b984      	cbnz	r4, 8003670 <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 800364e:	3303      	adds	r3, #3
 8003650:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8003654:	f04f 0c00 	mov.w	ip, #0
 8003658:	e008      	b.n	800366c <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800365a:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 800365e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003662:	f851 4b04 	ldr.w	r4, [r1], #4
 8003666:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8003668:	f10c 0c01 	add.w	ip, ip, #1
 800366c:	45f4      	cmp	ip, lr
 800366e:	d3f4      	bcc.n	800365a <USB_WritePacket+0x14>
}
 8003670:	2000      	movs	r0, #0
 8003672:	bd10      	pop	{r4, pc}

08003674 <USB_EPStartXfer>:
{
 8003674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003676:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8003678:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 800367a:	784b      	ldrb	r3, [r1, #1]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d02f      	beq.n	80036e0 <USB_EPStartXfer+0x6c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003680:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 8003684:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 8003688:	691d      	ldr	r5, [r3, #16]
 800368a:	0ced      	lsrs	r5, r5, #19
 800368c:	04ed      	lsls	r5, r5, #19
 800368e:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003690:	691d      	ldr	r5, [r3, #16]
 8003692:	f025 55ff 	bic.w	r5, r5, #534773760	@ 0x1fe00000
 8003696:	f425 15c0 	bic.w	r5, r5, #1572864	@ 0x180000
 800369a:	611d      	str	r5, [r3, #16]
    if (epnum == 0U)
 800369c:	2c00      	cmp	r4, #0
 800369e:	f040 80d2 	bne.w	8003846 <USB_EPStartXfer+0x1d2>
      if (ep->xfer_len > 0U)
 80036a2:	690c      	ldr	r4, [r1, #16]
 80036a4:	b10c      	cbz	r4, 80036aa <USB_EPStartXfer+0x36>
        ep->xfer_len = ep->maxpacket;
 80036a6:	688c      	ldr	r4, [r1, #8]
 80036a8:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 80036aa:	688c      	ldr	r4, [r1, #8]
 80036ac:	620c      	str	r4, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80036ae:	691d      	ldr	r5, [r3, #16]
 80036b0:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80036b4:	432c      	orrs	r4, r5
 80036b6:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80036b8:	691c      	ldr	r4, [r3, #16]
 80036ba:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 80036be:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 80036c0:	2a01      	cmp	r2, #1
 80036c2:	f000 80e3 	beq.w	800388c <USB_EPStartXfer+0x218>
    if (ep->type == EP_TYPE_ISOC)
 80036c6:	790b      	ldrb	r3, [r1, #4]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	f000 80e5 	beq.w	8003898 <USB_EPStartXfer+0x224>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80036ce:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 80036d2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80036d6:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 80036da:	2000      	movs	r0, #0
 80036dc:	b003      	add	sp, #12
 80036de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 80036e0:	690b      	ldr	r3, [r1, #16]
 80036e2:	bb83      	cbnz	r3, 8003746 <USB_EPStartXfer+0xd2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80036e4:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 80036e8:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 80036ec:	f025 55ff 	bic.w	r5, r5, #534773760	@ 0x1fe00000
 80036f0:	f425 15c0 	bic.w	r5, r5, #1572864	@ 0x180000
 80036f4:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80036f8:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 80036fc:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8003700:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003704:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8003708:	0ced      	lsrs	r5, r5, #19
 800370a:	04ed      	lsls	r5, r5, #19
 800370c:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
    if (dma == 1U)
 8003710:	2a01      	cmp	r2, #1
 8003712:	d056      	beq.n	80037c2 <USB_EPStartXfer+0x14e>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003714:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8003718:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 800371c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003720:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8003724:	790b      	ldrb	r3, [r1, #4]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d074      	beq.n	8003814 <USB_EPStartXfer+0x1a0>
        if (ep->xfer_len > 0U)
 800372a:	690b      	ldr	r3, [r1, #16]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0d4      	beq.n	80036da <USB_EPStartXfer+0x66>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003730:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
 8003734:	7809      	ldrb	r1, [r1, #0]
 8003736:	f001 010f 	and.w	r1, r1, #15
 800373a:	2201      	movs	r2, #1
 800373c:	408a      	lsls	r2, r1
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 8003744:	e7c9      	b.n	80036da <USB_EPStartXfer+0x66>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003746:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 800374a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800374e:	691d      	ldr	r5, [r3, #16]
 8003750:	0ced      	lsrs	r5, r5, #19
 8003752:	04ed      	lsls	r5, r5, #19
 8003754:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003756:	691d      	ldr	r5, [r3, #16]
 8003758:	f025 55ff 	bic.w	r5, r5, #534773760	@ 0x1fe00000
 800375c:	f425 15c0 	bic.w	r5, r5, #1572864	@ 0x180000
 8003760:	611d      	str	r5, [r3, #16]
      if (epnum == 0U)
 8003762:	b984      	cbnz	r4, 8003786 <USB_EPStartXfer+0x112>
        if (ep->xfer_len > ep->maxpacket)
 8003764:	690e      	ldr	r6, [r1, #16]
 8003766:	688d      	ldr	r5, [r1, #8]
 8003768:	42ae      	cmp	r6, r5
 800376a:	d900      	bls.n	800376e <USB_EPStartXfer+0xfa>
          ep->xfer_len = ep->maxpacket;
 800376c:	610d      	str	r5, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800376e:	691d      	ldr	r5, [r3, #16]
 8003770:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8003774:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003776:	691d      	ldr	r5, [r3, #16]
 8003778:	690e      	ldr	r6, [r1, #16]
 800377a:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 800377e:	ea45 050c 	orr.w	r5, r5, ip
 8003782:	611d      	str	r5, [r3, #16]
 8003784:	e7c4      	b.n	8003710 <USB_EPStartXfer+0x9c>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003786:	690d      	ldr	r5, [r1, #16]
 8003788:	688e      	ldr	r6, [r1, #8]
 800378a:	4435      	add	r5, r6
 800378c:	3d01      	subs	r5, #1
 800378e:	fbb5 f5f6 	udiv	r5, r5, r6
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8003792:	691e      	ldr	r6, [r3, #16]
 8003794:	fa1f fc85 	uxth.w	ip, r5
 8003798:	4f49      	ldr	r7, [pc, #292]	@ (80038c0 <USB_EPStartXfer+0x24c>)
 800379a:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 800379e:	4335      	orrs	r5, r6
 80037a0:	611d      	str	r5, [r3, #16]
        if (ep->type == EP_TYPE_ISOC)
 80037a2:	790d      	ldrb	r5, [r1, #4]
 80037a4:	2d01      	cmp	r5, #1
 80037a6:	d1e6      	bne.n	8003776 <USB_EPStartXfer+0x102>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80037a8:	691d      	ldr	r5, [r3, #16]
 80037aa:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 80037ae:	611d      	str	r5, [r3, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80037b0:	691d      	ldr	r5, [r3, #16]
 80037b2:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 80037b6:	f00c 4cc0 	and.w	ip, ip, #1610612736	@ 0x60000000
 80037ba:	ea45 050c 	orr.w	r5, r5, ip
 80037be:	611d      	str	r5, [r3, #16]
 80037c0:	e7d9      	b.n	8003776 <USB_EPStartXfer+0x102>
      if ((uint32_t)ep->dma_addr != 0U)
 80037c2:	69cb      	ldr	r3, [r1, #28]
 80037c4:	b11b      	cbz	r3, 80037ce <USB_EPStartXfer+0x15a>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80037c6:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 80037ca:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
      if (ep->type == EP_TYPE_ISOC)
 80037ce:	790b      	ldrb	r3, [r1, #4]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d008      	beq.n	80037e6 <USB_EPStartXfer+0x172>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80037d4:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 80037d8:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 80037dc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80037e0:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 80037e4:	e779      	b.n	80036da <USB_EPStartXfer+0x66>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80037e6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 80037ea:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80037ee:	d108      	bne.n	8003802 <USB_EPStartXfer+0x18e>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80037f0:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 80037f4:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 80037f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80037fc:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8003800:	e7e8      	b.n	80037d4 <USB_EPStartXfer+0x160>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003802:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8003806:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 800380a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800380e:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8003812:	e7df      	b.n	80037d4 <USB_EPStartXfer+0x160>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003814:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8003818:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800381c:	d10c      	bne.n	8003838 <USB_EPStartXfer+0x1c4>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800381e:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8003822:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003826:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800382a:	9200      	str	r2, [sp, #0]
 800382c:	8a0b      	ldrh	r3, [r1, #16]
 800382e:	780a      	ldrb	r2, [r1, #0]
 8003830:	68c9      	ldr	r1, [r1, #12]
 8003832:	f7ff ff08 	bl	8003646 <USB_WritePacket>
 8003836:	e750      	b.n	80036da <USB_EPStartXfer+0x66>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003838:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 800383c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003840:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8003844:	e7f1      	b.n	800382a <USB_EPStartXfer+0x1b6>
      if (ep->xfer_len == 0U)
 8003846:	690c      	ldr	r4, [r1, #16]
 8003848:	b954      	cbnz	r4, 8003860 <USB_EPStartXfer+0x1ec>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800384a:	691c      	ldr	r4, [r3, #16]
 800384c:	688d      	ldr	r5, [r1, #8]
 800384e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8003852:	432c      	orrs	r4, r5
 8003854:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003856:	691c      	ldr	r4, [r3, #16]
 8003858:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800385c:	611c      	str	r4, [r3, #16]
 800385e:	e72f      	b.n	80036c0 <USB_EPStartXfer+0x4c>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003860:	688d      	ldr	r5, [r1, #8]
 8003862:	442c      	add	r4, r5
 8003864:	3c01      	subs	r4, #1
 8003866:	fbb4 f4f5 	udiv	r4, r4, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 800386a:	b2a4      	uxth	r4, r4
 800386c:	fb04 f505 	mul.w	r5, r4, r5
 8003870:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003872:	691d      	ldr	r5, [r3, #16]
 8003874:	4e12      	ldr	r6, [pc, #72]	@ (80038c0 <USB_EPStartXfer+0x24c>)
 8003876:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 800387a:	432c      	orrs	r4, r5
 800387c:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800387e:	691c      	ldr	r4, [r3, #16]
 8003880:	6a0d      	ldr	r5, [r1, #32]
 8003882:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8003886:	432c      	orrs	r4, r5
 8003888:	611c      	str	r4, [r3, #16]
 800388a:	e719      	b.n	80036c0 <USB_EPStartXfer+0x4c>
      if ((uint32_t)ep->xfer_buff != 0U)
 800388c:	68ca      	ldr	r2, [r1, #12]
 800388e:	2a00      	cmp	r2, #0
 8003890:	f43f af19 	beq.w	80036c6 <USB_EPStartXfer+0x52>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003894:	615a      	str	r2, [r3, #20]
 8003896:	e716      	b.n	80036c6 <USB_EPStartXfer+0x52>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003898:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 800389c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80038a0:	d106      	bne.n	80038b0 <USB_EPStartXfer+0x23c>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80038a2:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 80038a6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80038aa:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 80038ae:	e70e      	b.n	80036ce <USB_EPStartXfer+0x5a>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80038b0:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 80038b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038b8:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 80038bc:	e707      	b.n	80036ce <USB_EPStartXfer+0x5a>
 80038be:	bf00      	nop
 80038c0:	1ff80000 	.word	0x1ff80000

080038c4 <USB_ReadPacket>:
{
 80038c4:	b510      	push	{r4, lr}
 80038c6:	4684      	mov	ip, r0
 80038c8:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 80038ca:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 80038ce:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 80038d2:	2300      	movs	r3, #0
 80038d4:	e005      	b.n	80038e2 <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80038d6:	f50c 5180 	add.w	r1, ip, #4096	@ 0x1000
 80038da:	6809      	ldr	r1, [r1, #0]
 80038dc:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 80038e0:	3301      	adds	r3, #1
 80038e2:	4573      	cmp	r3, lr
 80038e4:	d3f7      	bcc.n	80038d6 <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 80038e6:	b17a      	cbz	r2, 8003908 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80038e8:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 80038ec:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 80038f0:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80038f2:	b2cb      	uxtb	r3, r1
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	fa24 f303 	lsr.w	r3, r4, r3
 80038fa:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 80038fe:	3101      	adds	r1, #1
      remaining_bytes--;
 8003900:	3a01      	subs	r2, #1
 8003902:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8003904:	2a00      	cmp	r2, #0
 8003906:	d1f4      	bne.n	80038f2 <USB_ReadPacket+0x2e>
}
 8003908:	bd10      	pop	{r4, pc}

0800390a <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800390a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800390c:	784a      	ldrb	r2, [r1, #1]
 800390e:	2a01      	cmp	r2, #1
 8003910:	d014      	beq.n	800393c <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003912:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003916:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 800391a:	2a00      	cmp	r2, #0
 800391c:	db06      	blt.n	800392c <USB_EPSetStall+0x22>
 800391e:	b12b      	cbz	r3, 800392c <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003920:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003924:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003928:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800392c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003930:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003934:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8003938:	2000      	movs	r0, #0
 800393a:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800393c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003940:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 8003944:	2a00      	cmp	r2, #0
 8003946:	db06      	blt.n	8003956 <USB_EPSetStall+0x4c>
 8003948:	b12b      	cbz	r3, 8003956 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800394a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800394e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003952:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003956:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800395a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800395e:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8003962:	e7e9      	b.n	8003938 <USB_EPSetStall+0x2e>

08003964 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8003964:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8003966:	784a      	ldrb	r2, [r1, #1]
 8003968:	2a01      	cmp	r2, #1
 800396a:	d00e      	beq.n	800398a <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800396c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003970:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003974:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003978:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800397c:	790b      	ldrb	r3, [r1, #4]
 800397e:	3b02      	subs	r3, #2
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b01      	cmp	r3, #1
 8003984:	d915      	bls.n	80039b2 <USB_EPClearStall+0x4e>
}
 8003986:	2000      	movs	r0, #0
 8003988:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800398a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800398e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003992:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003996:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800399a:	790b      	ldrb	r3, [r1, #4]
 800399c:	3b02      	subs	r3, #2
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d8f0      	bhi.n	8003986 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80039a4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80039a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ac:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 80039b0:	e7e9      	b.n	8003986 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80039b2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80039b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ba:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 80039be:	e7e2      	b.n	8003986 <USB_EPClearStall+0x22>

080039c0 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80039c0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 80039c4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80039c8:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80039cc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 80039d0:	0109      	lsls	r1, r1, #4
 80039d2:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 80039d6:	430b      	orrs	r3, r1
 80039d8:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
}
 80039dc:	2000      	movs	r0, #0
 80039de:	4770      	bx	lr

080039e0 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80039e0:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 80039e4:	f023 0303 	bic.w	r3, r3, #3
 80039e8:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80039ec:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 80039f0:	f023 0302 	bic.w	r3, r3, #2
 80039f4:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 80039f8:	2000      	movs	r0, #0
 80039fa:	4770      	bx	lr

080039fc <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80039fc:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8003a00:	f023 0303 	bic.w	r3, r3, #3
 8003a04:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a08:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8003a0c:	f043 0302 	orr.w	r3, r3, #2
 8003a10:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8003a14:	2000      	movs	r0, #0
 8003a16:	4770      	bx	lr

08003a18 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8003a18:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8003a1a:	6980      	ldr	r0, [r0, #24]
}
 8003a1c:	4010      	ands	r0, r2
 8003a1e:	4770      	bx	lr

08003a20 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003a20:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8003a24:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003a28:	69c0      	ldr	r0, [r0, #28]
 8003a2a:	4018      	ands	r0, r3
}
 8003a2c:	0c00      	lsrs	r0, r0, #16
 8003a2e:	4770      	bx	lr

08003a30 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003a30:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8003a34:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003a38:	69c0      	ldr	r0, [r0, #28]
 8003a3a:	4018      	ands	r0, r3
}
 8003a3c:	b280      	uxth	r0, r0
 8003a3e:	4770      	bx	lr

08003a40 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003a40:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8003a44:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003a48:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 8003a4c:	6940      	ldr	r0, [r0, #20]
}
 8003a4e:	4010      	ands	r0, r2
 8003a50:	4770      	bx	lr

08003a52 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8003a52:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003a56:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003a5a:	f001 0c0f 	and.w	ip, r1, #15
 8003a5e:	fa23 f30c 	lsr.w	r3, r3, ip
 8003a62:	01db      	lsls	r3, r3, #7
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003a68:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8003a6c:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8003a70:	6880      	ldr	r0, [r0, #8]
}
 8003a72:	4018      	ands	r0, r3
 8003a74:	4770      	bx	lr

08003a76 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8003a76:	6940      	ldr	r0, [r0, #20]
}
 8003a78:	f000 0001 	and.w	r0, r0, #1
 8003a7c:	4770      	bx	lr

08003a7e <USB_SetCurrentMode>:
{
 8003a7e:	b538      	push	{r3, r4, r5, lr}
 8003a80:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a82:	68c3      	ldr	r3, [r0, #12]
 8003a84:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003a88:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003a8a:	2901      	cmp	r1, #1
 8003a8c:	d013      	beq.n	8003ab6 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8003a8e:	bb19      	cbnz	r1, 8003ad8 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a90:	68c3      	ldr	r3, [r0, #12]
 8003a92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a96:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8003a98:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8003a9a:	200a      	movs	r0, #10
 8003a9c:	f7fd f8ac 	bl	8000bf8 <HAL_Delay>
      ms += 10U;
 8003aa0:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003aa2:	4628      	mov	r0, r5
 8003aa4:	f7ff ffe7 	bl	8003a76 <USB_GetMode>
 8003aa8:	b108      	cbz	r0, 8003aae <USB_SetCurrentMode+0x30>
 8003aaa:	2cc7      	cmp	r4, #199	@ 0xc7
 8003aac:	d9f5      	bls.n	8003a9a <USB_SetCurrentMode+0x1c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003aae:	2cc8      	cmp	r4, #200	@ 0xc8
 8003ab0:	d014      	beq.n	8003adc <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8003ab2:	2000      	movs	r0, #0
}
 8003ab4:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ab6:	68c3      	ldr	r3, [r0, #12]
 8003ab8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003abc:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8003abe:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8003ac0:	200a      	movs	r0, #10
 8003ac2:	f7fd f899 	bl	8000bf8 <HAL_Delay>
      ms += 10U;
 8003ac6:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003ac8:	4628      	mov	r0, r5
 8003aca:	f7ff ffd4 	bl	8003a76 <USB_GetMode>
 8003ace:	2801      	cmp	r0, #1
 8003ad0:	d0ed      	beq.n	8003aae <USB_SetCurrentMode+0x30>
 8003ad2:	2cc7      	cmp	r4, #199	@ 0xc7
 8003ad4:	d9f4      	bls.n	8003ac0 <USB_SetCurrentMode+0x42>
 8003ad6:	e7ea      	b.n	8003aae <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8003ad8:	2001      	movs	r0, #1
 8003ada:	e7eb      	b.n	8003ab4 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 8003adc:	2001      	movs	r0, #1
 8003ade:	e7e9      	b.n	8003ab4 <USB_SetCurrentMode+0x36>

08003ae0 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003ae0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003ae4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003ae8:	f023 0307 	bic.w	r3, r3, #7
 8003aec:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003af0:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8003af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003af8:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8003afc:	2000      	movs	r0, #0
 8003afe:	4770      	bx	lr

08003b00 <USB_EP0_OutStart>:
{
 8003b00:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b02:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003b04:	4b15      	ldr	r3, [pc, #84]	@ (8003b5c <USB_EP0_OutStart+0x5c>)
 8003b06:	429c      	cmp	r4, r3
 8003b08:	d903      	bls.n	8003b12 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b0a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	db16      	blt.n	8003b40 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003b12:	2400      	movs	r4, #0
 8003b14:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003b18:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8003b1c:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8003b20:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003b24:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8003b28:	f044 0418 	orr.w	r4, r4, #24
 8003b2c:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003b30:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8003b34:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 8003b38:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  if (dma == 1U)
 8003b3c:	2901      	cmp	r1, #1
 8003b3e:	d003      	beq.n	8003b48 <USB_EP0_OutStart+0x48>
}
 8003b40:	2000      	movs	r0, #0
 8003b42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b46:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003b48:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003b4c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003b50:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8003b54:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8003b58:	e7f2      	b.n	8003b40 <USB_EP0_OutStart+0x40>
 8003b5a:	bf00      	nop
 8003b5c:	4f54300a 	.word	0x4f54300a

08003b60 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003b60:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003b62:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003b66:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003b6a:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]

  if (hcdc == NULL)
 8003b6e:	b18c      	cbz	r4, 8003b94 <USBD_CDC_EP0_RxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003b70:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003b74:	6843      	ldr	r3, [r0, #4]
 8003b76:	b17b      	cbz	r3, 8003b98 <USBD_CDC_EP0_RxReady+0x38>
 8003b78:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8003b7c:	28ff      	cmp	r0, #255	@ 0xff
 8003b7e:	d00d      	beq.n	8003b9c <USBD_CDC_EP0_RxReady+0x3c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 8003b86:	4621      	mov	r1, r4
 8003b88:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8003b8a:	23ff      	movs	r3, #255	@ 0xff
 8003b8c:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8003b90:	2000      	movs	r0, #0
}
 8003b92:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8003b94:	2003      	movs	r0, #3
 8003b96:	e7fc      	b.n	8003b92 <USBD_CDC_EP0_RxReady+0x32>
  return (uint8_t)USBD_OK;
 8003b98:	2000      	movs	r0, #0
 8003b9a:	e7fa      	b.n	8003b92 <USBD_CDC_EP0_RxReady+0x32>
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	e7f8      	b.n	8003b92 <USBD_CDC_EP0_RxReady+0x32>

08003ba0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8003ba0:	230a      	movs	r3, #10
 8003ba2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8003ba4:	4800      	ldr	r0, [pc, #0]	@ (8003ba8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003ba6:	4770      	bx	lr
 8003ba8:	20000088 	.word	0x20000088

08003bac <USBD_CDC_GetOtherSpeedCfgDesc>:
{
 8003bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bae:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8003bb0:	4f0f      	ldr	r7, [pc, #60]	@ (8003bf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8003bb2:	2182      	movs	r1, #130	@ 0x82
 8003bb4:	4638      	mov	r0, r7
 8003bb6:	f000 fc24 	bl	8004402 <USBD_GetEpDesc>
 8003bba:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	4638      	mov	r0, r7
 8003bc0:	f000 fc1f 	bl	8004402 <USBD_GetEpDesc>
 8003bc4:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8003bc6:	2181      	movs	r1, #129	@ 0x81
 8003bc8:	4638      	mov	r0, r7
 8003bca:	f000 fc1a 	bl	8004402 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8003bce:	b10d      	cbz	r5, 8003bd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8003bd0:	2210      	movs	r2, #16
 8003bd2:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8003bd4:	b11c      	cbz	r4, 8003bde <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8003bd6:	2240      	movs	r2, #64	@ 0x40
 8003bd8:	7122      	strb	r2, [r4, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8003bde:	b118      	cbz	r0, 8003be8 <USBD_CDC_GetOtherSpeedCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8003be0:	2240      	movs	r2, #64	@ 0x40
 8003be2:	7102      	strb	r2, [r0, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8003be8:	2343      	movs	r3, #67	@ 0x43
 8003bea:	8033      	strh	r3, [r6, #0]
}
 8003bec:	4800      	ldr	r0, [pc, #0]	@ (8003bf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8003bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bf0:	2000000c 	.word	0x2000000c

08003bf4 <USBD_CDC_GetFSCfgDesc>:
{
 8003bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf6:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8003bf8:	4f0f      	ldr	r7, [pc, #60]	@ (8003c38 <USBD_CDC_GetFSCfgDesc+0x44>)
 8003bfa:	2182      	movs	r1, #130	@ 0x82
 8003bfc:	4638      	mov	r0, r7
 8003bfe:	f000 fc00 	bl	8004402 <USBD_GetEpDesc>
 8003c02:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8003c04:	2101      	movs	r1, #1
 8003c06:	4638      	mov	r0, r7
 8003c08:	f000 fbfb 	bl	8004402 <USBD_GetEpDesc>
 8003c0c:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8003c0e:	2181      	movs	r1, #129	@ 0x81
 8003c10:	4638      	mov	r0, r7
 8003c12:	f000 fbf6 	bl	8004402 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8003c16:	b10d      	cbz	r5, 8003c1c <USBD_CDC_GetFSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8003c18:	2210      	movs	r2, #16
 8003c1a:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8003c1c:	b11c      	cbz	r4, 8003c26 <USBD_CDC_GetFSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8003c1e:	2240      	movs	r2, #64	@ 0x40
 8003c20:	7122      	strb	r2, [r4, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8003c26:	b118      	cbz	r0, 8003c30 <USBD_CDC_GetFSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8003c28:	2240      	movs	r2, #64	@ 0x40
 8003c2a:	7102      	strb	r2, [r0, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8003c30:	2343      	movs	r3, #67	@ 0x43
 8003c32:	8033      	strh	r3, [r6, #0]
}
 8003c34:	4800      	ldr	r0, [pc, #0]	@ (8003c38 <USBD_CDC_GetFSCfgDesc+0x44>)
 8003c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c38:	2000000c 	.word	0x2000000c

08003c3c <USBD_CDC_GetHSCfgDesc>:
{
 8003c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3e:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8003c40:	4f0f      	ldr	r7, [pc, #60]	@ (8003c80 <USBD_CDC_GetHSCfgDesc+0x44>)
 8003c42:	2182      	movs	r1, #130	@ 0x82
 8003c44:	4638      	mov	r0, r7
 8003c46:	f000 fbdc 	bl	8004402 <USBD_GetEpDesc>
 8003c4a:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	4638      	mov	r0, r7
 8003c50:	f000 fbd7 	bl	8004402 <USBD_GetEpDesc>
 8003c54:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8003c56:	2181      	movs	r1, #129	@ 0x81
 8003c58:	4638      	mov	r0, r7
 8003c5a:	f000 fbd2 	bl	8004402 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8003c5e:	b10d      	cbz	r5, 8003c64 <USBD_CDC_GetHSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8003c60:	2210      	movs	r2, #16
 8003c62:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8003c64:	b11c      	cbz	r4, 8003c6e <USBD_CDC_GetHSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8003c66:	2200      	movs	r2, #0
 8003c68:	7122      	strb	r2, [r4, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8003c6e:	b118      	cbz	r0, 8003c78 <USBD_CDC_GetHSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8003c70:	2200      	movs	r2, #0
 8003c72:	7102      	strb	r2, [r0, #4]
 8003c74:	2202      	movs	r2, #2
 8003c76:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8003c78:	2343      	movs	r3, #67	@ 0x43
 8003c7a:	8033      	strh	r3, [r6, #0]
}
 8003c7c:	4800      	ldr	r0, [pc, #0]	@ (8003c80 <USBD_CDC_GetHSCfgDesc+0x44>)
 8003c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c80:	2000000c 	.word	0x2000000c

08003c84 <USBD_CDC_DataOut>:
{
 8003c84:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003c86:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003c8a:	33b0      	adds	r3, #176	@ 0xb0
 8003c8c:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8003c90:	b195      	cbz	r5, 8003cb8 <USBD_CDC_DataOut+0x34>
 8003c92:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003c94:	f001 f994 	bl	8004fc0 <USBD_LL_GetRxDataSize>
 8003c98:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003c9c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8003ca0:	33b0      	adds	r3, #176	@ 0xb0
 8003ca2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8003ca6:	6863      	ldr	r3, [r4, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 8003cae:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 8003cb2:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8003cb4:	2000      	movs	r0, #0
}
 8003cb6:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8003cb8:	2003      	movs	r0, #3
 8003cba:	e7fc      	b.n	8003cb6 <USBD_CDC_DataOut+0x32>

08003cbc <USBD_CDC_DataIn>:
{
 8003cbc:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8003cbe:	f8d0 52c8 	ldr.w	r5, [r0, #712]	@ 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8003cc2:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003cc6:	33b0      	adds	r3, #176	@ 0xb0
 8003cc8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8003ccc:	b384      	cbz	r4, 8003d30 <USBD_CDC_DataIn+0x74>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8003cce:	f001 030f 	and.w	r3, r1, #15
 8003cd2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003cd6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003cda:	6992      	ldr	r2, [r2, #24]
 8003cdc:	b14a      	cbz	r2, 8003cf2 <USBD_CDC_DataIn+0x36>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8003cde:	eb03 0cc3 	add.w	ip, r3, r3, lsl #3
 8003ce2:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 8003ce6:	69ed      	ldr	r5, [r5, #28]
 8003ce8:	fbb2 fcf5 	udiv	ip, r2, r5
 8003cec:	fb05 221c 	mls	r2, r5, ip, r2
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8003cf0:	b192      	cbz	r2, 8003d18 <USBD_CDC_DataIn+0x5c>
    hcdc->TxState = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8003cf8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003cfc:	33b0      	adds	r3, #176	@ 0xb0
 8003cfe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003d02:	6843      	ldr	r3, [r0, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	b1ab      	cbz	r3, 8003d34 <USBD_CDC_DataIn+0x78>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8003d08:	460a      	mov	r2, r1
 8003d0a:	f504 7104 	add.w	r1, r4, #528	@ 0x210
 8003d0e:	f8d4 0208 	ldr.w	r0, [r4, #520]	@ 0x208
 8003d12:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8003d14:	2000      	movs	r0, #0
}
 8003d16:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8003d18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003d1c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003d20:	2400      	movs	r4, #0
 8003d22:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003d24:	4623      	mov	r3, r4
 8003d26:	4622      	mov	r2, r4
 8003d28:	f001 f992 	bl	8005050 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8003d2c:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003d2e:	e7f2      	b.n	8003d16 <USBD_CDC_DataIn+0x5a>
    return (uint8_t)USBD_FAIL;
 8003d30:	2003      	movs	r0, #3
 8003d32:	e7f0      	b.n	8003d16 <USBD_CDC_DataIn+0x5a>
  return (uint8_t)USBD_OK;
 8003d34:	2000      	movs	r0, #0
 8003d36:	e7ee      	b.n	8003d16 <USBD_CDC_DataIn+0x5a>

08003d38 <USBD_CDC_Setup>:
{
 8003d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d3a:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003d3c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003d40:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003d44:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
  uint8_t ifalt = 0U;
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f88d 2007 	strb.w	r2, [sp, #7]
  uint16_t status_info = 0U;
 8003d4e:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (hcdc == NULL)
 8003d52:	2f00      	cmp	r7, #0
 8003d54:	d07b      	beq.n	8003e4e <USBD_CDC_Setup+0x116>
 8003d56:	4604      	mov	r4, r0
 8003d58:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003d5a:	7809      	ldrb	r1, [r1, #0]
 8003d5c:	f011 0660 	ands.w	r6, r1, #96	@ 0x60
 8003d60:	d034      	beq.n	8003dcc <USBD_CDC_Setup+0x94>
 8003d62:	2e20      	cmp	r6, #32
 8003d64:	d16c      	bne.n	8003e40 <USBD_CDC_Setup+0x108>
      if (req->wLength != 0U)
 8003d66:	88ea      	ldrh	r2, [r5, #6]
 8003d68:	b32a      	cbz	r2, 8003db6 <USBD_CDC_Setup+0x7e>
        if ((req->bmRequest & 0x80U) != 0U)
 8003d6a:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003d6e:	d107      	bne.n	8003d80 <USBD_CDC_Setup+0x48>
          hcdc->CmdOpCode = req->bRequest;
 8003d70:	786b      	ldrb	r3, [r5, #1]
 8003d72:	f887 3200 	strb.w	r3, [r7, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8003d76:	88ea      	ldrh	r2, [r5, #6]
 8003d78:	2a3f      	cmp	r2, #63	@ 0x3f
 8003d7a:	d813      	bhi.n	8003da4 <USBD_CDC_Setup+0x6c>
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	e012      	b.n	8003da6 <USBD_CDC_Setup+0x6e>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8003d80:	33b0      	adds	r3, #176	@ 0xb0
 8003d82:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	4639      	mov	r1, r7
 8003d8c:	7868      	ldrb	r0, [r5, #1]
 8003d8e:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8003d90:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8003d92:	2a07      	cmp	r2, #7
 8003d94:	bf28      	it	cs
 8003d96:	2207      	movcs	r2, #7
 8003d98:	4639      	mov	r1, r7
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	f000 fee8 	bl	8004b70 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8003da0:	2600      	movs	r6, #0
 8003da2:	e051      	b.n	8003e48 <USBD_CDC_Setup+0x110>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8003da4:	2240      	movs	r2, #64	@ 0x40
 8003da6:	f887 2201 	strb.w	r2, [r7, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8003daa:	4639      	mov	r1, r7
 8003dac:	4620      	mov	r0, r4
 8003dae:	f000 fef4 	bl	8004b9a <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8003db2:	2600      	movs	r6, #0
 8003db4:	e048      	b.n	8003e48 <USBD_CDC_Setup+0x110>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8003db6:	33b0      	adds	r3, #176	@ 0xb0
 8003db8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	4629      	mov	r1, r5
 8003dc4:	7868      	ldrb	r0, [r5, #1]
 8003dc6:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8003dc8:	2600      	movs	r6, #0
 8003dca:	e03d      	b.n	8003e48 <USBD_CDC_Setup+0x110>
      switch (req->bRequest)
 8003dcc:	786f      	ldrb	r7, [r5, #1]
 8003dce:	2f0b      	cmp	r7, #11
 8003dd0:	d831      	bhi.n	8003e36 <USBD_CDC_Setup+0xfe>
 8003dd2:	e8df f007 	tbb	[pc, r7]
 8003dd6:	3906      	.short	0x3906
 8003dd8:	30303030 	.word	0x30303030
 8003ddc:	30303030 	.word	0x30303030
 8003de0:	2616      	.short	0x2616
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003de2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d004      	beq.n	8003df6 <USBD_CDC_Setup+0xbe>
            USBD_CtlError(pdev, req);
 8003dec:	4629      	mov	r1, r5
 8003dee:	f000 fb45 	bl	800447c <USBD_CtlError>
            ret = USBD_FAIL;
 8003df2:	2603      	movs	r6, #3
 8003df4:	e028      	b.n	8003e48 <USBD_CDC_Setup+0x110>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8003df6:	2202      	movs	r2, #2
 8003df8:	a901      	add	r1, sp, #4
 8003dfa:	f000 feb9 	bl	8004b70 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8003dfe:	463e      	mov	r6, r7
 8003e00:	e022      	b.n	8003e48 <USBD_CDC_Setup+0x110>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e02:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	d004      	beq.n	8003e16 <USBD_CDC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8003e0c:	4629      	mov	r1, r5
 8003e0e:	f000 fb35 	bl	800447c <USBD_CtlError>
            ret = USBD_FAIL;
 8003e12:	2603      	movs	r6, #3
 8003e14:	e018      	b.n	8003e48 <USBD_CDC_Setup+0x110>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8003e16:	2201      	movs	r2, #1
 8003e18:	f10d 0107 	add.w	r1, sp, #7
 8003e1c:	f000 fea8 	bl	8004b70 <USBD_CtlSendData>
 8003e20:	e012      	b.n	8003e48 <USBD_CDC_Setup+0x110>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003e22:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b03      	cmp	r3, #3
 8003e2a:	d00d      	beq.n	8003e48 <USBD_CDC_Setup+0x110>
            USBD_CtlError(pdev, req);
 8003e2c:	4629      	mov	r1, r5
 8003e2e:	f000 fb25 	bl	800447c <USBD_CtlError>
            ret = USBD_FAIL;
 8003e32:	2603      	movs	r6, #3
 8003e34:	e008      	b.n	8003e48 <USBD_CDC_Setup+0x110>
          USBD_CtlError(pdev, req);
 8003e36:	4629      	mov	r1, r5
 8003e38:	f000 fb20 	bl	800447c <USBD_CtlError>
          ret = USBD_FAIL;
 8003e3c:	2603      	movs	r6, #3
          break;
 8003e3e:	e003      	b.n	8003e48 <USBD_CDC_Setup+0x110>
      USBD_CtlError(pdev, req);
 8003e40:	4629      	mov	r1, r5
 8003e42:	f000 fb1b 	bl	800447c <USBD_CtlError>
      ret = USBD_FAIL;
 8003e46:	2603      	movs	r6, #3
}
 8003e48:	4630      	mov	r0, r6
 8003e4a:	b003      	add	sp, #12
 8003e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8003e4e:	2603      	movs	r6, #3
 8003e50:	e7fa      	b.n	8003e48 <USBD_CDC_Setup+0x110>

08003e52 <USBD_CDC_DeInit>:
{
 8003e52:	b538      	push	{r3, r4, r5, lr}
 8003e54:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8003e56:	2181      	movs	r1, #129	@ 0x81
 8003e58:	f001 f8da 	bl	8005010 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8003e5c:	2500      	movs	r5, #0
 8003e5e:	8725      	strh	r5, [r4, #56]	@ 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8003e60:	2101      	movs	r1, #1
 8003e62:	4620      	mov	r0, r4
 8003e64:	f001 f8d4 	bl	8005010 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8003e68:	f8a4 5178 	strh.w	r5, [r4, #376]	@ 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8003e6c:	2182      	movs	r1, #130	@ 0x82
 8003e6e:	4620      	mov	r0, r4
 8003e70:	f001 f8ce 	bl	8005010 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8003e74:	f8a4 504c 	strh.w	r5, [r4, #76]	@ 0x4c
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8003e78:	f8a4 504e 	strh.w	r5, [r4, #78]	@ 0x4e
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8003e7c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8003e80:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003e84:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003e88:	b19a      	cbz	r2, 8003eb2 <USBD_CDC_DeInit+0x60>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8003e8a:	33b0      	adds	r3, #176	@ 0xb0
 8003e8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8003e96:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8003e9a:	33b0      	adds	r3, #176	@ 0xb0
 8003e9c:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8003ea0:	f001 f898 	bl	8004fd4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8003ea4:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8003ea8:	33b0      	adds	r3, #176	@ 0xb0
 8003eaa:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 8003eae:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	bd38      	pop	{r3, r4, r5, pc}

08003eb6 <USBD_CDC_Init>:
{
 8003eb6:	b570      	push	{r4, r5, r6, lr}
 8003eb8:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003eba:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8003ebe:	f001 f885 	bl	8004fcc <USBD_static_malloc>
  if (hcdc == NULL)
 8003ec2:	2800      	cmp	r0, #0
 8003ec4:	d049      	beq.n	8003f5a <USBD_CDC_Init+0xa4>
 8003ec6:	4605      	mov	r5, r0
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8003ec8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8003ecc:	2100      	movs	r1, #0
 8003ece:	f001 fb7f 	bl	80055d0 <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8003ed2:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8003ed6:	33b0      	adds	r3, #176	@ 0xb0
 8003ed8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8003edc:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003ee0:	7c23      	ldrb	r3, [r4, #16]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d141      	bne.n	8003f6a <USBD_CDC_Init+0xb4>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8003ee6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003eea:	2202      	movs	r2, #2
 8003eec:	2181      	movs	r1, #129	@ 0x81
 8003eee:	4620      	mov	r0, r4
 8003ef0:	f001 f883 	bl	8004ffa <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8003ef4:	2601      	movs	r6, #1
 8003ef6:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8003ef8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003efc:	2202      	movs	r2, #2
 8003efe:	4631      	mov	r1, r6
 8003f00:	4620      	mov	r0, r4
 8003f02:	f001 f87a 	bl	8004ffa <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8003f06:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8003f0a:	2310      	movs	r3, #16
 8003f0c:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003f10:	2308      	movs	r3, #8
 8003f12:	2203      	movs	r2, #3
 8003f14:	2182      	movs	r1, #130	@ 0x82
 8003f16:	4620      	mov	r0, r4
 8003f18:	f001 f86f 	bl	8004ffa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
  hcdc->RxBuffer = NULL;
 8003f22:	2600      	movs	r6, #0
 8003f24:	f8c5 6204 	str.w	r6, [r5, #516]	@ 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8003f28:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8003f2c:	33b0      	adds	r3, #176	@ 0xb0
 8003f2e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4798      	blx	r3
  hcdc->TxState = 0U;
 8003f38:	f8c5 6214 	str.w	r6, [r5, #532]	@ 0x214
  hcdc->RxState = 0U;
 8003f3c:	f8c5 6218 	str.w	r6, [r5, #536]	@ 0x218
  if (hcdc->RxBuffer == NULL)
 8003f40:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8003f44:	b362      	cbz	r2, 8003fa0 <USBD_CDC_Init+0xea>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003f46:	7c25      	ldrb	r5, [r4, #16]
 8003f48:	bb1d      	cbnz	r5, 8003f92 <USBD_CDC_Init+0xdc>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8003f4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f4e:	2101      	movs	r1, #1
 8003f50:	4620      	mov	r0, r4
 8003f52:	f001 f885 	bl	8005060 <USBD_LL_PrepareReceive>
}
 8003f56:	4628      	mov	r0, r5
 8003f58:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8003f5a:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8003f5e:	33b0      	adds	r3, #176	@ 0xb0
 8003f60:	2200      	movs	r2, #0
 8003f62:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 8003f66:	2502      	movs	r5, #2
 8003f68:	e7f5      	b.n	8003f56 <USBD_CDC_Init+0xa0>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8003f6a:	2340      	movs	r3, #64	@ 0x40
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	2181      	movs	r1, #129	@ 0x81
 8003f70:	4620      	mov	r0, r4
 8003f72:	f001 f842 	bl	8004ffa <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8003f76:	2601      	movs	r6, #1
 8003f78:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8003f7a:	2340      	movs	r3, #64	@ 0x40
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	4631      	mov	r1, r6
 8003f80:	4620      	mov	r0, r4
 8003f82:	f001 f83a 	bl	8004ffa <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8003f86:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8003f8a:	2310      	movs	r3, #16
 8003f8c:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
 8003f90:	e7be      	b.n	8003f10 <USBD_CDC_Init+0x5a>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8003f92:	2340      	movs	r3, #64	@ 0x40
 8003f94:	2101      	movs	r1, #1
 8003f96:	4620      	mov	r0, r4
 8003f98:	f001 f862 	bl	8005060 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8003f9c:	2500      	movs	r5, #0
 8003f9e:	e7da      	b.n	8003f56 <USBD_CDC_Init+0xa0>
    return (uint8_t)USBD_EMEM;
 8003fa0:	2502      	movs	r5, #2
 8003fa2:	e7d8      	b.n	8003f56 <USBD_CDC_Init+0xa0>

08003fa4 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8003fa4:	b139      	cbz	r1, 8003fb6 <USBD_CDC_RegisterInterface+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 8003fa6:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003faa:	33b0      	adds	r3, #176	@ 0xb0
 8003fac:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003fb0:	6041      	str	r1, [r0, #4]

  return (uint8_t)USBD_OK;
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8003fb6:	2003      	movs	r0, #3
}
 8003fb8:	4770      	bx	lr

08003fba <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003fba:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003fbe:	33b0      	adds	r3, #176	@ 0xb0
 8003fc0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8003fc4:	b12b      	cbz	r3, 8003fd2 <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8003fc6:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8003fca:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8003fce:	2000      	movs	r0, #0
 8003fd0:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8003fd2:	2003      	movs	r0, #3
}
 8003fd4:	4770      	bx	lr

08003fd6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003fd6:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003fda:	33b0      	adds	r3, #176	@ 0xb0
 8003fdc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 8003fe0:	b11b      	cbz	r3, 8003fea <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8003fe2:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8003fea:	2003      	movs	r0, #3
}
 8003fec:	4770      	bx	lr

08003fee <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8003fee:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003ff0:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003ff4:	33b0      	adds	r3, #176	@ 0xb0
 8003ff6:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8003ffa:	b192      	cbz	r2, 8004022 <USBD_CDC_ReceivePacket+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003ffc:	7c04      	ldrb	r4, [r0, #16]
 8003ffe:	b944      	cbnz	r4, 8004012 <USBD_CDC_ReceivePacket+0x24>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004000:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004004:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8004008:	2101      	movs	r1, #1
 800400a:	f001 f829 	bl	8005060 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 800400e:	4620      	mov	r0, r4
 8004010:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004012:	2340      	movs	r3, #64	@ 0x40
 8004014:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8004018:	2101      	movs	r1, #1
 800401a:	f001 f821 	bl	8005060 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800401e:	2400      	movs	r4, #0
 8004020:	e7f5      	b.n	800400e <USBD_CDC_ReceivePacket+0x20>
    return (uint8_t)USBD_FAIL;
 8004022:	2403      	movs	r4, #3
 8004024:	e7f3      	b.n	800400e <USBD_CDC_ReceivePacket+0x20>

08004026 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004026:	b198      	cbz	r0, 8004050 <USBD_Init+0x2a>
{
 8004028:	b508      	push	{r3, lr}
 800402a:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800402c:	2000      	movs	r0, #0
 800402e:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8004032:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004036:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800403a:	b109      	cbz	r1, 8004040 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 800403c:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004040:	2101      	movs	r1, #1
 8004042:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004046:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004048:	4618      	mov	r0, r3
 800404a:	f000 ff6f 	bl	8004f2c <USBD_LL_Init>

  return ret;
}
 800404e:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8004050:	2003      	movs	r0, #3
}
 8004052:	4770      	bx	lr

08004054 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004054:	b510      	push	{r4, lr}
 8004056:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800405e:	b189      	cbz	r1, 8004084 <USBD_RegisterClass+0x30>
 8004060:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004062:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004066:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8004068:	b123      	cbz	r3, 8004074 <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800406a:	f10d 0006 	add.w	r0, sp, #6
 800406e:	4798      	blx	r3
 8004070:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8004074:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 8004078:	3301      	adds	r3, #1
 800407a:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 800407e:	2000      	movs	r0, #0
}
 8004080:	b002      	add	sp, #8
 8004082:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8004084:	2003      	movs	r0, #3
 8004086:	e7fb      	b.n	8004080 <USBD_RegisterClass+0x2c>

08004088 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004088:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800408a:	f000 ffae 	bl	8004fea <USBD_LL_Start>
}
 800408e:	bd08      	pop	{r3, pc}

08004090 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004090:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004092:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004096:	b113      	cbz	r3, 800409e <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800409c:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 800409e:	2000      	movs	r0, #0
 80040a0:	e7fc      	b.n	800409c <USBD_SetClassConfig+0xc>

080040a2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80040a2:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80040a4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	4798      	blx	r3
 80040ac:	b900      	cbnz	r0, 80040b0 <USBD_ClrClassConfig+0xe>
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 80040ae:	bd08      	pop	{r3, pc}
    ret = USBD_FAIL;
 80040b0:	2003      	movs	r0, #3
 80040b2:	e7fc      	b.n	80040ae <USBD_ClrClassConfig+0xc>

080040b4 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80040b4:	b538      	push	{r3, r4, r5, lr}
 80040b6:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80040b8:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 80040bc:	4628      	mov	r0, r5
 80040be:	f000 f9c9 	bl	8004454 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80040c2:	2301      	movs	r3, #1
 80040c4:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80040c8:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 80040cc:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80040d0:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 80040d4:	f001 031f 	and.w	r3, r1, #31
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d00d      	beq.n	80040f8 <USBD_LL_SetupStage+0x44>
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d010      	beq.n	8004102 <USBD_LL_SetupStage+0x4e>
 80040e0:	b12b      	cbz	r3, 80040ee <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80040e2:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80040e6:	4620      	mov	r0, r4
 80040e8:	f000 ff9a 	bl	8005020 <USBD_LL_StallEP>
      break;
 80040ec:	e003      	b.n	80040f6 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80040ee:	4629      	mov	r1, r5
 80040f0:	4620      	mov	r0, r4
 80040f2:	f000 fb85 	bl	8004800 <USBD_StdDevReq>
  }

  return ret;
}
 80040f6:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80040f8:	4629      	mov	r1, r5
 80040fa:	4620      	mov	r0, r4
 80040fc:	f000 fbbb 	bl	8004876 <USBD_StdItfReq>
      break;
 8004100:	e7f9      	b.n	80040f6 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004102:	4629      	mov	r1, r5
 8004104:	4620      	mov	r0, r4
 8004106:	f000 fbf8 	bl	80048fa <USBD_StdEPReq>
      break;
 800410a:	e7f4      	b.n	80040f6 <USBD_LL_SetupStage+0x42>

0800410c <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800410c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410e:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004110:	2301      	movs	r3, #1
 8004112:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004116:	2300      	movs	r3, #0
 8004118:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 800411c:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800411e:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8004122:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004126:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800412a:	b1db      	cbz	r3, 8004164 <USBD_LL_Reset+0x58>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	b1db      	cbz	r3, 8004168 <USBD_LL_Reset+0x5c>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004130:	2100      	movs	r1, #0
 8004132:	4798      	blx	r3
 8004134:	4607      	mov	r7, r0
 8004136:	b9c8      	cbnz	r0, 800416c <USBD_LL_Reset+0x60>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004138:	2340      	movs	r3, #64	@ 0x40
 800413a:	2200      	movs	r2, #0
 800413c:	4611      	mov	r1, r2
 800413e:	4620      	mov	r0, r4
 8004140:	f000 ff5b 	bl	8004ffa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004144:	2601      	movs	r6, #1
 8004146:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800414a:	2540      	movs	r5, #64	@ 0x40
 800414c:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004150:	462b      	mov	r3, r5
 8004152:	2200      	movs	r2, #0
 8004154:	2180      	movs	r1, #128	@ 0x80
 8004156:	4620      	mov	r0, r4
 8004158:	f000 ff4f 	bl	8004ffa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800415c:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800415e:	6225      	str	r5, [r4, #32]

  return ret;
}
 8004160:	4638      	mov	r0, r7
 8004162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8004164:	2700      	movs	r7, #0
 8004166:	e7e7      	b.n	8004138 <USBD_LL_Reset+0x2c>
 8004168:	2700      	movs	r7, #0
 800416a:	e7e5      	b.n	8004138 <USBD_LL_Reset+0x2c>
        ret = USBD_FAIL;
 800416c:	2703      	movs	r7, #3
 800416e:	e7e3      	b.n	8004138 <USBD_LL_Reset+0x2c>

08004170 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004170:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8004172:	2000      	movs	r0, #0
 8004174:	4770      	bx	lr

08004176 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8004176:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b04      	cmp	r3, #4
 800417e:	d004      	beq.n	800418a <USBD_LL_Suspend+0x14>
  {
    pdev->dev_old_state = pdev->dev_state;
 8004180:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004184:	b2db      	uxtb	r3, r3
 8004186:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800418a:	2304      	movs	r3, #4
 800418c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8004190:	2000      	movs	r0, #0
 8004192:	4770      	bx	lr

08004194 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004194:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b04      	cmp	r3, #4
 800419c:	d001      	beq.n	80041a2 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800419e:	2000      	movs	r0, #0
 80041a0:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 80041a2:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 80041ac:	e7f7      	b.n	800419e <USBD_LL_Resume+0xa>

080041ae <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80041ae:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80041b0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b03      	cmp	r3, #3
 80041b8:	d001      	beq.n	80041be <USBD_LL_SOF+0x10>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 80041ba:	2000      	movs	r0, #0
 80041bc:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 80041be:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0f9      	beq.n	80041ba <USBD_LL_SOF+0xc>
      if (pdev->pClass[0]->SOF != NULL)
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0f6      	beq.n	80041ba <USBD_LL_SOF+0xc>
        (void)pdev->pClass[0]->SOF(pdev);
 80041cc:	4798      	blx	r3
 80041ce:	e7f4      	b.n	80041ba <USBD_LL_SOF+0xc>

080041d0 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80041d0:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 80041d2:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80041d6:	33ae      	adds	r3, #174	@ 0xae
 80041d8:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80041dc:	b15a      	cbz	r2, 80041f6 <USBD_LL_IsoINIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80041de:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b03      	cmp	r3, #3
 80041e6:	d001      	beq.n	80041ec <USBD_LL_IsoINIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 80041e8:	2000      	movs	r0, #0
}
 80041ea:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80041ec:	6a13      	ldr	r3, [r2, #32]
 80041ee:	b123      	cbz	r3, 80041fa <USBD_LL_IsoINIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80041f0:	4798      	blx	r3
  return USBD_OK;
 80041f2:	2000      	movs	r0, #0
 80041f4:	e7f9      	b.n	80041ea <USBD_LL_IsoINIncomplete+0x1a>
    return USBD_FAIL;
 80041f6:	2003      	movs	r0, #3
 80041f8:	e7f7      	b.n	80041ea <USBD_LL_IsoINIncomplete+0x1a>
  return USBD_OK;
 80041fa:	2000      	movs	r0, #0
 80041fc:	e7f5      	b.n	80041ea <USBD_LL_IsoINIncomplete+0x1a>

080041fe <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80041fe:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8004200:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004204:	33ae      	adds	r3, #174	@ 0xae
 8004206:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800420a:	b15a      	cbz	r2, 8004224 <USBD_LL_IsoOUTIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800420c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b03      	cmp	r3, #3
 8004214:	d001      	beq.n	800421a <USBD_LL_IsoOUTIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8004216:	2000      	movs	r0, #0
}
 8004218:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800421a:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800421c:	b123      	cbz	r3, 8004228 <USBD_LL_IsoOUTIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800421e:	4798      	blx	r3
  return USBD_OK;
 8004220:	2000      	movs	r0, #0
 8004222:	e7f9      	b.n	8004218 <USBD_LL_IsoOUTIncomplete+0x1a>
    return USBD_FAIL;
 8004224:	2003      	movs	r0, #3
 8004226:	e7f7      	b.n	8004218 <USBD_LL_IsoOUTIncomplete+0x1a>
  return USBD_OK;
 8004228:	2000      	movs	r0, #0
 800422a:	e7f5      	b.n	8004218 <USBD_LL_IsoOUTIncomplete+0x1a>

0800422c <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800422c:	2000      	movs	r0, #0
 800422e:	4770      	bx	lr

08004230 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004230:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004232:	2301      	movs	r3, #1
 8004234:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004238:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800423c:	b123      	cbz	r3, 8004248 <USBD_LL_DevDisconnected+0x18>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	7901      	ldrb	r1, [r0, #4]
 8004242:	4798      	blx	r3
 8004244:	b910      	cbnz	r0, 800424c <USBD_LL_DevDisconnected+0x1c>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8004246:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 8004248:	2000      	movs	r0, #0
 800424a:	e7fc      	b.n	8004246 <USBD_LL_DevDisconnected+0x16>
      ret = USBD_FAIL;
 800424c:	2003      	movs	r0, #3
 800424e:	e7fa      	b.n	8004246 <USBD_LL_DevDisconnected+0x16>

08004250 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8004250:	2000      	movs	r0, #0
 8004252:	4770      	bx	lr

08004254 <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8004254:	2000      	movs	r0, #0
 8004256:	4770      	bx	lr

08004258 <USBD_LL_DataOutStage>:
{
 8004258:	b538      	push	{r3, r4, r5, lr}
 800425a:	4604      	mov	r4, r0
  if (epnum == 0U)
 800425c:	460d      	mov	r5, r1
 800425e:	2900      	cmp	r1, #0
 8004260:	d143      	bne.n	80042ea <USBD_LL_DataOutStage+0x92>
 8004262:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004264:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8004268:	2a03      	cmp	r2, #3
 800426a:	d001      	beq.n	8004270 <USBD_LL_DataOutStage+0x18>
  return USBD_OK;
 800426c:	4608      	mov	r0, r1
}
 800426e:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8004270:	f8d0 115c 	ldr.w	r1, [r0, #348]	@ 0x15c
 8004274:	f8d0 2160 	ldr.w	r2, [r0, #352]	@ 0x160
 8004278:	4291      	cmp	r1, r2
 800427a:	d812      	bhi.n	80042a2 <USBD_LL_DataOutStage+0x4a>
        switch (pdev->request.bmRequest & 0x1FU)
 800427c:	f890 32aa 	ldrb.w	r3, [r0, #682]	@ 0x2aa
 8004280:	f003 031f 	and.w	r3, r3, #31
 8004284:	2b01      	cmp	r3, #1
 8004286:	d017      	beq.n	80042b8 <USBD_LL_DataOutStage+0x60>
 8004288:	2b02      	cmp	r3, #2
 800428a:	d01c      	beq.n	80042c6 <USBD_LL_DataOutStage+0x6e>
 800428c:	4628      	mov	r0, r5
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800428e:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b03      	cmp	r3, #3
 8004296:	d01b      	beq.n	80042d0 <USBD_LL_DataOutStage+0x78>
        (void)USBD_CtlSendStatus(pdev);
 8004298:	4620      	mov	r0, r4
 800429a:	f000 fc95 	bl	8004bc8 <USBD_CtlSendStatus>
  return USBD_OK;
 800429e:	4628      	mov	r0, r5
 80042a0:	e7e5      	b.n	800426e <USBD_LL_DataOutStage+0x16>
        pep->rem_length -= pep->maxpacket;
 80042a2:	1a89      	subs	r1, r1, r2
 80042a4:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80042a8:	428a      	cmp	r2, r1
 80042aa:	bf28      	it	cs
 80042ac:	460a      	movcs	r2, r1
 80042ae:	4619      	mov	r1, r3
 80042b0:	f000 fc82 	bl	8004bb8 <USBD_CtlContinueRx>
  return USBD_OK;
 80042b4:	4628      	mov	r0, r5
 80042b6:	e7da      	b.n	800426e <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80042b8:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 80042bc:	f7ff ffc8 	bl	8004250 <USBD_CoreFindIF>
        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80042c0:	2800      	cmp	r0, #0
 80042c2:	d1e9      	bne.n	8004298 <USBD_LL_DataOutStage+0x40>
 80042c4:	e7e3      	b.n	800428e <USBD_LL_DataOutStage+0x36>
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80042c6:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 80042ca:	f7ff ffc3 	bl	8004254 <USBD_CoreFindEP>
            break;
 80042ce:	e7f7      	b.n	80042c0 <USBD_LL_DataOutStage+0x68>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80042d0:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 80042d4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80042d8:	691a      	ldr	r2, [r3, #16]
 80042da:	2a00      	cmp	r2, #0
 80042dc:	d0dc      	beq.n	8004298 <USBD_LL_DataOutStage+0x40>
              pdev->classId = idx;
 80042de:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	4620      	mov	r0, r4
 80042e6:	4798      	blx	r3
 80042e8:	e7d6      	b.n	8004298 <USBD_LL_DataOutStage+0x40>
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80042ea:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80042ee:	f7ff ffb1 	bl	8004254 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80042f2:	b990      	cbnz	r0, 800431a <USBD_LL_DataOutStage+0xc2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042f4:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	d1b7      	bne.n	800426e <USBD_LL_DataOutStage+0x16>
        if (pdev->pClass[idx]->DataOut != NULL)
 80042fe:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8004302:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8004306:	699a      	ldr	r2, [r3, #24]
 8004308:	2a00      	cmp	r2, #0
 800430a:	d0b0      	beq.n	800426e <USBD_LL_DataOutStage+0x16>
          pdev->classId = idx;
 800430c:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	4629      	mov	r1, r5
 8004314:	4620      	mov	r0, r4
 8004316:	4798      	blx	r3
      if (ret != USBD_OK)
 8004318:	e7a9      	b.n	800426e <USBD_LL_DataOutStage+0x16>
  return USBD_OK;
 800431a:	2000      	movs	r0, #0
 800431c:	e7a7      	b.n	800426e <USBD_LL_DataOutStage+0x16>

0800431e <USBD_LL_DataInStage>:
{
 800431e:	b538      	push	{r3, r4, r5, lr}
 8004320:	4604      	mov	r4, r0
  if (epnum == 0U)
 8004322:	460d      	mov	r5, r1
 8004324:	2900      	cmp	r1, #0
 8004326:	d14b      	bne.n	80043c0 <USBD_LL_DataInStage+0xa2>
 8004328:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800432a:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800432e:	2a02      	cmp	r2, #2
 8004330:	d007      	beq.n	8004342 <USBD_LL_DataInStage+0x24>
    if (pdev->dev_test_mode != 0U)
 8004332:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 8004336:	b118      	cbz	r0, 8004340 <USBD_LL_DataInStage+0x22>
      pdev->dev_test_mode = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 800433e:	4628      	mov	r0, r5
}
 8004340:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8004342:	69c2      	ldr	r2, [r0, #28]
 8004344:	6a01      	ldr	r1, [r0, #32]
 8004346:	428a      	cmp	r2, r1
 8004348:	d80e      	bhi.n	8004368 <USBD_LL_DataInStage+0x4a>
        if ((pep->maxpacket == pep->rem_length) &&
 800434a:	428a      	cmp	r2, r1
 800434c:	d018      	beq.n	8004380 <USBD_LL_DataInStage+0x62>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800434e:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b03      	cmp	r3, #3
 8004356:	d027      	beq.n	80043a8 <USBD_LL_DataInStage+0x8a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004358:	2180      	movs	r1, #128	@ 0x80
 800435a:	4620      	mov	r0, r4
 800435c:	f000 fe60 	bl	8005020 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004360:	4620      	mov	r0, r4
 8004362:	f000 fc3c 	bl	8004bde <USBD_CtlReceiveStatus>
 8004366:	e7e4      	b.n	8004332 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8004368:	1a52      	subs	r2, r2, r1
 800436a:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800436c:	4619      	mov	r1, r3
 800436e:	f000 fc0c 	bl	8004b8a <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004372:	2300      	movs	r3, #0
 8004374:	461a      	mov	r2, r3
 8004376:	4619      	mov	r1, r3
 8004378:	4620      	mov	r0, r4
 800437a:	f000 fe71 	bl	8005060 <USBD_LL_PrepareReceive>
 800437e:	e7d8      	b.n	8004332 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8004380:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8004382:	4299      	cmp	r1, r3
 8004384:	d8e3      	bhi.n	800434e <USBD_LL_DataInStage+0x30>
            (pep->total_length < pdev->ep0_data_len))
 8004386:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800438a:	4293      	cmp	r3, r2
 800438c:	d2df      	bcs.n	800434e <USBD_LL_DataInStage+0x30>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800438e:	2200      	movs	r2, #0
 8004390:	4611      	mov	r1, r2
 8004392:	f000 fbfa 	bl	8004b8a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004396:	2100      	movs	r1, #0
 8004398:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800439c:	460b      	mov	r3, r1
 800439e:	460a      	mov	r2, r1
 80043a0:	4620      	mov	r0, r4
 80043a2:	f000 fe5d 	bl	8005060 <USBD_LL_PrepareReceive>
 80043a6:	e7c4      	b.n	8004332 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80043a8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	2a00      	cmp	r2, #0
 80043b0:	d0d2      	beq.n	8004358 <USBD_LL_DataInStage+0x3a>
              pdev->classId = 0U;
 80043b2:	2200      	movs	r2, #0
 80043b4:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	4620      	mov	r0, r4
 80043bc:	4798      	blx	r3
 80043be:	e7cb      	b.n	8004358 <USBD_LL_DataInStage+0x3a>
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80043c0:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80043c4:	f7ff ff46 	bl	8004254 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80043c8:	b990      	cbnz	r0, 80043f0 <USBD_LL_DataInStage+0xd2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80043ca:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b03      	cmp	r3, #3
 80043d2:	d1b5      	bne.n	8004340 <USBD_LL_DataInStage+0x22>
        if (pdev->pClass[idx]->DataIn != NULL)
 80043d4:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 80043d8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80043dc:	695a      	ldr	r2, [r3, #20]
 80043de:	2a00      	cmp	r2, #0
 80043e0:	d0ae      	beq.n	8004340 <USBD_LL_DataInStage+0x22>
          pdev->classId = idx;
 80043e2:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	4629      	mov	r1, r5
 80043ea:	4620      	mov	r0, r4
 80043ec:	4798      	blx	r3
          if (ret != USBD_OK)
 80043ee:	e7a7      	b.n	8004340 <USBD_LL_DataInStage+0x22>
  return USBD_OK;
 80043f0:	2000      	movs	r0, #0
 80043f2:	e7a5      	b.n	8004340 <USBD_LL_DataInStage+0x22>

080043f4 <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 80043f4:	880b      	ldrh	r3, [r1, #0]
 80043f6:	7802      	ldrb	r2, [r0, #0]
 80043f8:	4413      	add	r3, r2
 80043fa:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80043fc:	7803      	ldrb	r3, [r0, #0]

  return (pnext);
}
 80043fe:	4418      	add	r0, r3
 8004400:	4770      	bx	lr

08004402 <USBD_GetEpDesc>:
  if (desc->wTotalLength > desc->bLength)
 8004402:	8842      	ldrh	r2, [r0, #2]
 8004404:	7803      	ldrb	r3, [r0, #0]
 8004406:	429a      	cmp	r2, r3
 8004408:	d918      	bls.n	800443c <USBD_GetEpDesc+0x3a>
{
 800440a:	b530      	push	{r4, r5, lr}
 800440c:	b083      	sub	sp, #12
 800440e:	4604      	mov	r4, r0
 8004410:	460d      	mov	r5, r1
    ptr = desc->bLength;
 8004412:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (ptr < desc->wTotalLength)
 8004416:	8863      	ldrh	r3, [r4, #2]
 8004418:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800441c:	429a      	cmp	r2, r3
 800441e:	d20a      	bcs.n	8004436 <USBD_GetEpDesc+0x34>
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8004420:	f10d 0106 	add.w	r1, sp, #6
 8004424:	f7ff ffe6 	bl	80043f4 <USBD_GetNextDesc>
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8004428:	7843      	ldrb	r3, [r0, #1]
 800442a:	2b05      	cmp	r3, #5
 800442c:	d1f3      	bne.n	8004416 <USBD_GetEpDesc+0x14>
        if (pEpDesc->bEndpointAddress == EpAddr)
 800442e:	7883      	ldrb	r3, [r0, #2]
 8004430:	42ab      	cmp	r3, r5
 8004432:	d1f0      	bne.n	8004416 <USBD_GetEpDesc+0x14>
 8004434:	e000      	b.n	8004438 <USBD_GetEpDesc+0x36>
 8004436:	2000      	movs	r0, #0
}
 8004438:	b003      	add	sp, #12
 800443a:	bd30      	pop	{r4, r5, pc}
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800443c:	2000      	movs	r0, #0
}
 800443e:	4770      	bx	lr

08004440 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8004440:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8004442:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8004444:	e002      	b.n	800444c <USBD_GetLen+0xc>
  {
    len++;
 8004446:	3001      	adds	r0, #1
 8004448:	b2c0      	uxtb	r0, r0
    pbuff++;
 800444a:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 800444c:	781a      	ldrb	r2, [r3, #0]
 800444e:	2a00      	cmp	r2, #0
 8004450:	d1f9      	bne.n	8004446 <USBD_GetLen+0x6>
  }

  return len;
}
 8004452:	4770      	bx	lr

08004454 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8004454:	780b      	ldrb	r3, [r1, #0]
 8004456:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8004458:	784b      	ldrb	r3, [r1, #1]
 800445a:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 800445c:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800445e:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004460:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8004464:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8004466:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8004468:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800446a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800446e:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8004470:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8004472:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004474:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8004478:	80c3      	strh	r3, [r0, #6]
}
 800447a:	4770      	bx	lr

0800447c <USBD_CtlError>:
{
 800447c:	b510      	push	{r4, lr}
 800447e:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004480:	2180      	movs	r1, #128	@ 0x80
 8004482:	f000 fdcd 	bl	8005020 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004486:	2100      	movs	r1, #0
 8004488:	4620      	mov	r0, r4
 800448a:	f000 fdc9 	bl	8005020 <USBD_LL_StallEP>
}
 800448e:	bd10      	pop	{r4, pc}

08004490 <USBD_GetDescriptor>:
{
 8004490:	b530      	push	{r4, r5, lr}
 8004492:	b083      	sub	sp, #12
 8004494:	4604      	mov	r4, r0
 8004496:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800449e:	884a      	ldrh	r2, [r1, #2]
 80044a0:	0a13      	lsrs	r3, r2, #8
 80044a2:	3b01      	subs	r3, #1
 80044a4:	2b06      	cmp	r3, #6
 80044a6:	f200 80ab 	bhi.w	8004600 <USBD_GetDescriptor+0x170>
 80044aa:	e8df f003 	tbb	[pc, r3]
 80044ae:	1f04      	.short	0x1f04
 80044b0:	8da9a933 	.word	0x8da9a933
 80044b4:	9a          	.byte	0x9a
 80044b5:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80044b6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f10d 0106 	add.w	r1, sp, #6
 80044c0:	7c00      	ldrb	r0, [r0, #16]
 80044c2:	4798      	blx	r3
  if (req->wLength != 0U)
 80044c4:	88ea      	ldrh	r2, [r5, #6]
 80044c6:	2a00      	cmp	r2, #0
 80044c8:	f000 80a3 	beq.w	8004612 <USBD_GetDescriptor+0x182>
    if (len != 0U)
 80044cc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 8099 	beq.w	8004608 <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 80044d6:	429a      	cmp	r2, r3
 80044d8:	bf28      	it	cs
 80044da:	461a      	movcs	r2, r3
 80044dc:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80044e0:	4601      	mov	r1, r0
 80044e2:	4620      	mov	r0, r4
 80044e4:	f000 fb44 	bl	8004b70 <USBD_CtlSendData>
}
 80044e8:	b003      	add	sp, #12
 80044ea:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044ec:	7c03      	ldrb	r3, [r0, #16]
 80044ee:	b943      	cbnz	r3, 8004502 <USBD_GetDescriptor+0x72>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80044f0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80044f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f6:	f10d 0006 	add.w	r0, sp, #6
 80044fa:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80044fc:	2302      	movs	r3, #2
 80044fe:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004500:	e7e0      	b.n	80044c4 <USBD_GetDescriptor+0x34>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8004502:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004508:	f10d 0006 	add.w	r0, sp, #6
 800450c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800450e:	2302      	movs	r3, #2
 8004510:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004512:	e7d7      	b.n	80044c4 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8004514:	b2d2      	uxtb	r2, r2
 8004516:	2a05      	cmp	r2, #5
 8004518:	d852      	bhi.n	80045c0 <USBD_GetDescriptor+0x130>
 800451a:	e8df f002 	tbb	[pc, r2]
 800451e:	1003      	.short	0x1003
 8004520:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004524:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	b123      	cbz	r3, 8004536 <USBD_GetDescriptor+0xa6>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800452c:	f10d 0106 	add.w	r1, sp, #6
 8004530:	7c00      	ldrb	r0, [r0, #16]
 8004532:	4798      	blx	r3
  if (err != 0U)
 8004534:	e7c6      	b.n	80044c4 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004536:	4629      	mov	r1, r5
 8004538:	f7ff ffa0 	bl	800447c <USBD_CtlError>
  if (err != 0U)
 800453c:	e7d4      	b.n	80044e8 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800453e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	b123      	cbz	r3, 8004550 <USBD_GetDescriptor+0xc0>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004546:	f10d 0106 	add.w	r1, sp, #6
 800454a:	7c00      	ldrb	r0, [r0, #16]
 800454c:	4798      	blx	r3
  if (err != 0U)
 800454e:	e7b9      	b.n	80044c4 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004550:	4629      	mov	r1, r5
 8004552:	f7ff ff93 	bl	800447c <USBD_CtlError>
  if (err != 0U)
 8004556:	e7c7      	b.n	80044e8 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004558:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	b123      	cbz	r3, 800456a <USBD_GetDescriptor+0xda>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004560:	f10d 0106 	add.w	r1, sp, #6
 8004564:	7c00      	ldrb	r0, [r0, #16]
 8004566:	4798      	blx	r3
  if (err != 0U)
 8004568:	e7ac      	b.n	80044c4 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800456a:	4629      	mov	r1, r5
 800456c:	f7ff ff86 	bl	800447c <USBD_CtlError>
  if (err != 0U)
 8004570:	e7ba      	b.n	80044e8 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004572:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	b123      	cbz	r3, 8004584 <USBD_GetDescriptor+0xf4>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800457a:	f10d 0106 	add.w	r1, sp, #6
 800457e:	7c00      	ldrb	r0, [r0, #16]
 8004580:	4798      	blx	r3
  if (err != 0U)
 8004582:	e79f      	b.n	80044c4 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004584:	4629      	mov	r1, r5
 8004586:	f7ff ff79 	bl	800447c <USBD_CtlError>
  if (err != 0U)
 800458a:	e7ad      	b.n	80044e8 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800458c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	b123      	cbz	r3, 800459e <USBD_GetDescriptor+0x10e>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004594:	f10d 0106 	add.w	r1, sp, #6
 8004598:	7c00      	ldrb	r0, [r0, #16]
 800459a:	4798      	blx	r3
  if (err != 0U)
 800459c:	e792      	b.n	80044c4 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800459e:	4629      	mov	r1, r5
 80045a0:	f7ff ff6c 	bl	800447c <USBD_CtlError>
  if (err != 0U)
 80045a4:	e7a0      	b.n	80044e8 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80045a6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	b123      	cbz	r3, 80045b8 <USBD_GetDescriptor+0x128>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80045ae:	f10d 0106 	add.w	r1, sp, #6
 80045b2:	7c00      	ldrb	r0, [r0, #16]
 80045b4:	4798      	blx	r3
  if (err != 0U)
 80045b6:	e785      	b.n	80044c4 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80045b8:	4629      	mov	r1, r5
 80045ba:	f7ff ff5f 	bl	800447c <USBD_CtlError>
  if (err != 0U)
 80045be:	e793      	b.n	80044e8 <USBD_GetDescriptor+0x58>
          USBD_CtlError(pdev, req);
 80045c0:	4629      	mov	r1, r5
 80045c2:	f7ff ff5b 	bl	800447c <USBD_CtlError>
  if (err != 0U)
 80045c6:	e78f      	b.n	80044e8 <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045c8:	7c03      	ldrb	r3, [r0, #16]
 80045ca:	b933      	cbnz	r3, 80045da <USBD_GetDescriptor+0x14a>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80045cc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80045d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d2:	f10d 0006 	add.w	r0, sp, #6
 80045d6:	4798      	blx	r3
  if (err != 0U)
 80045d8:	e774      	b.n	80044c4 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80045da:	4629      	mov	r1, r5
 80045dc:	f7ff ff4e 	bl	800447c <USBD_CtlError>
  if (err != 0U)
 80045e0:	e782      	b.n	80044e8 <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045e2:	7c03      	ldrb	r3, [r0, #16]
 80045e4:	b943      	cbnz	r3, 80045f8 <USBD_GetDescriptor+0x168>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80045e6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80045ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ec:	f10d 0006 	add.w	r0, sp, #6
 80045f0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80045f2:	2307      	movs	r3, #7
 80045f4:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80045f6:	e765      	b.n	80044c4 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80045f8:	4629      	mov	r1, r5
 80045fa:	f7ff ff3f 	bl	800447c <USBD_CtlError>
  if (err != 0U)
 80045fe:	e773      	b.n	80044e8 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 8004600:	4629      	mov	r1, r5
 8004602:	f7ff ff3b 	bl	800447c <USBD_CtlError>
    return;
 8004606:	e76f      	b.n	80044e8 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 8004608:	4629      	mov	r1, r5
 800460a:	4620      	mov	r0, r4
 800460c:	f7ff ff36 	bl	800447c <USBD_CtlError>
 8004610:	e76a      	b.n	80044e8 <USBD_GetDescriptor+0x58>
    (void)USBD_CtlSendStatus(pdev);
 8004612:	4620      	mov	r0, r4
 8004614:	f000 fad8 	bl	8004bc8 <USBD_CtlSendStatus>
 8004618:	e766      	b.n	80044e8 <USBD_GetDescriptor+0x58>

0800461a <USBD_SetAddress>:
{
 800461a:	b538      	push	{r3, r4, r5, lr}
 800461c:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800461e:	888b      	ldrh	r3, [r1, #4]
 8004620:	b9fb      	cbnz	r3, 8004662 <USBD_SetAddress+0x48>
 8004622:	88cb      	ldrh	r3, [r1, #6]
 8004624:	b9eb      	cbnz	r3, 8004662 <USBD_SetAddress+0x48>
 8004626:	884b      	ldrh	r3, [r1, #2]
 8004628:	2b7f      	cmp	r3, #127	@ 0x7f
 800462a:	d81a      	bhi.n	8004662 <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800462c:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004630:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b03      	cmp	r3, #3
 8004638:	d00c      	beq.n	8004654 <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 800463a:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800463e:	4629      	mov	r1, r5
 8004640:	f000 fcfe 	bl	8005040 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8004644:	4620      	mov	r0, r4
 8004646:	f000 fabf 	bl	8004bc8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800464a:	b135      	cbz	r5, 800465a <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800464c:	2302      	movs	r3, #2
 800464e:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8004652:	e009      	b.n	8004668 <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 8004654:	f7ff ff12 	bl	800447c <USBD_CtlError>
 8004658:	e006      	b.n	8004668 <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800465a:	2301      	movs	r3, #1
 800465c:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8004660:	e002      	b.n	8004668 <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 8004662:	4620      	mov	r0, r4
 8004664:	f7ff ff0a 	bl	800447c <USBD_CtlError>
}
 8004668:	bd38      	pop	{r3, r4, r5, pc}
	...

0800466c <USBD_SetConfig>:
{
 800466c:	b570      	push	{r4, r5, r6, lr}
 800466e:	4604      	mov	r4, r0
 8004670:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 8004672:	788d      	ldrb	r5, [r1, #2]
 8004674:	4b2f      	ldr	r3, [pc, #188]	@ (8004734 <USBD_SetConfig+0xc8>)
 8004676:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004678:	2d01      	cmp	r5, #1
 800467a:	d810      	bhi.n	800469e <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 800467c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d00f      	beq.n	80046a6 <USBD_SetConfig+0x3a>
 8004686:	2b03      	cmp	r3, #3
 8004688:	d026      	beq.n	80046d8 <USBD_SetConfig+0x6c>
      USBD_CtlError(pdev, req);
 800468a:	f7ff fef7 	bl	800447c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800468e:	4b29      	ldr	r3, [pc, #164]	@ (8004734 <USBD_SetConfig+0xc8>)
 8004690:	7819      	ldrb	r1, [r3, #0]
 8004692:	4620      	mov	r0, r4
 8004694:	f7ff fd05 	bl	80040a2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8004698:	2503      	movs	r5, #3
}
 800469a:	4628      	mov	r0, r5
 800469c:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 800469e:	f7ff feed 	bl	800447c <USBD_CtlError>
    return USBD_FAIL;
 80046a2:	2503      	movs	r5, #3
 80046a4:	e7f9      	b.n	800469a <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 80046a6:	b1a5      	cbz	r5, 80046d2 <USBD_SetConfig+0x66>
        pdev->dev_config = cfgidx;
 80046a8:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80046aa:	4629      	mov	r1, r5
 80046ac:	f7ff fcf0 	bl	8004090 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80046b0:	4605      	mov	r5, r0
 80046b2:	b138      	cbz	r0, 80046c4 <USBD_SetConfig+0x58>
          USBD_CtlError(pdev, req);
 80046b4:	4631      	mov	r1, r6
 80046b6:	4620      	mov	r0, r4
 80046b8:	f7ff fee0 	bl	800447c <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80046bc:	2302      	movs	r3, #2
 80046be:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80046c2:	e7ea      	b.n	800469a <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 80046c4:	4620      	mov	r0, r4
 80046c6:	f000 fa7f 	bl	8004bc8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80046ca:	2303      	movs	r3, #3
 80046cc:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80046d0:	e7e3      	b.n	800469a <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 80046d2:	f000 fa79 	bl	8004bc8 <USBD_CtlSendStatus>
 80046d6:	e7e0      	b.n	800469a <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 80046d8:	b1cd      	cbz	r5, 800470e <USBD_SetConfig+0xa2>
      else if (cfgidx != pdev->dev_config)
 80046da:	6841      	ldr	r1, [r0, #4]
 80046dc:	428d      	cmp	r5, r1
 80046de:	d025      	beq.n	800472c <USBD_SetConfig+0xc0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80046e0:	b2c9      	uxtb	r1, r1
 80046e2:	f7ff fcde 	bl	80040a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80046e6:	4b13      	ldr	r3, [pc, #76]	@ (8004734 <USBD_SetConfig+0xc8>)
 80046e8:	7819      	ldrb	r1, [r3, #0]
 80046ea:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80046ec:	4620      	mov	r0, r4
 80046ee:	f7ff fccf 	bl	8004090 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80046f2:	4605      	mov	r5, r0
 80046f4:	b1b0      	cbz	r0, 8004724 <USBD_SetConfig+0xb8>
          USBD_CtlError(pdev, req);
 80046f6:	4631      	mov	r1, r6
 80046f8:	4620      	mov	r0, r4
 80046fa:	f7ff febf 	bl	800447c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80046fe:	7921      	ldrb	r1, [r4, #4]
 8004700:	4620      	mov	r0, r4
 8004702:	f7ff fcce 	bl	80040a2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004706:	2302      	movs	r3, #2
 8004708:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800470c:	e7c5      	b.n	800469a <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800470e:	2302      	movs	r3, #2
 8004710:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8004714:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004716:	4629      	mov	r1, r5
 8004718:	f7ff fcc3 	bl	80040a2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800471c:	4620      	mov	r0, r4
 800471e:	f000 fa53 	bl	8004bc8 <USBD_CtlSendStatus>
 8004722:	e7ba      	b.n	800469a <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8004724:	4620      	mov	r0, r4
 8004726:	f000 fa4f 	bl	8004bc8 <USBD_CtlSendStatus>
 800472a:	e7b6      	b.n	800469a <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800472c:	f000 fa4c 	bl	8004bc8 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8004730:	2500      	movs	r5, #0
 8004732:	e7b2      	b.n	800469a <USBD_SetConfig+0x2e>
 8004734:	200002b0 	.word	0x200002b0

08004738 <USBD_GetConfig>:
{
 8004738:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800473a:	88cb      	ldrh	r3, [r1, #6]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d10b      	bne.n	8004758 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8004740:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d909      	bls.n	800475e <USBD_GetConfig+0x26>
 800474a:	2b03      	cmp	r3, #3
 800474c:	d109      	bne.n	8004762 <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800474e:	2201      	movs	r2, #1
 8004750:	1d01      	adds	r1, r0, #4
 8004752:	f000 fa0d 	bl	8004b70 <USBD_CtlSendData>
        break;
 8004756:	e001      	b.n	800475c <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8004758:	f7ff fe90 	bl	800447c <USBD_CtlError>
}
 800475c:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800475e:	b25b      	sxtb	r3, r3
 8004760:	b913      	cbnz	r3, 8004768 <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 8004762:	f7ff fe8b 	bl	800447c <USBD_CtlError>
}
 8004766:	e7f9      	b.n	800475c <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 8004768:	4601      	mov	r1, r0
 800476a:	2300      	movs	r3, #0
 800476c:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8004770:	2201      	movs	r2, #1
 8004772:	f000 f9fd 	bl	8004b70 <USBD_CtlSendData>
        break;
 8004776:	e7f1      	b.n	800475c <USBD_GetConfig+0x24>

08004778 <USBD_GetStatus>:
{
 8004778:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800477a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800477e:	3b01      	subs	r3, #1
 8004780:	2b02      	cmp	r3, #2
 8004782:	d812      	bhi.n	80047aa <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8004784:	88cb      	ldrh	r3, [r1, #6]
 8004786:	2b02      	cmp	r3, #2
 8004788:	d10c      	bne.n	80047a4 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800478e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8004792:	b10b      	cbz	r3, 8004798 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004794:	2302      	movs	r3, #2
 8004796:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8004798:	2202      	movs	r2, #2
 800479a:	f100 010c 	add.w	r1, r0, #12
 800479e:	f000 f9e7 	bl	8004b70 <USBD_CtlSendData>
}
 80047a2:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 80047a4:	f7ff fe6a 	bl	800447c <USBD_CtlError>
        break;
 80047a8:	e7fb      	b.n	80047a2 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 80047aa:	f7ff fe67 	bl	800447c <USBD_CtlError>
}
 80047ae:	e7f8      	b.n	80047a2 <USBD_GetStatus+0x2a>

080047b0 <USBD_SetFeature>:
{
 80047b0:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80047b2:	884b      	ldrh	r3, [r1, #2]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d004      	beq.n	80047c2 <USBD_SetFeature+0x12>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d007      	beq.n	80047cc <USBD_SetFeature+0x1c>
    USBD_CtlError(pdev, req);
 80047bc:	f7ff fe5e 	bl	800447c <USBD_CtlError>
}
 80047c0:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 80047c2:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80047c6:	f000 f9ff 	bl	8004bc8 <USBD_CtlSendStatus>
 80047ca:	e7f9      	b.n	80047c0 <USBD_SetFeature+0x10>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80047cc:	888b      	ldrh	r3, [r1, #4]
 80047ce:	0a1b      	lsrs	r3, r3, #8
 80047d0:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80047d4:	f000 f9f8 	bl	8004bc8 <USBD_CtlSendStatus>
 80047d8:	e7f2      	b.n	80047c0 <USBD_SetFeature+0x10>

080047da <USBD_ClrFeature>:
{
 80047da:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80047dc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80047e0:	3b01      	subs	r3, #1
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d809      	bhi.n	80047fa <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80047e6:	884b      	ldrh	r3, [r1, #2]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d000      	beq.n	80047ee <USBD_ClrFeature+0x14>
}
 80047ec:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80047f4:	f000 f9e8 	bl	8004bc8 <USBD_CtlSendStatus>
 80047f8:	e7f8      	b.n	80047ec <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 80047fa:	f7ff fe3f 	bl	800447c <USBD_CtlError>
}
 80047fe:	e7f5      	b.n	80047ec <USBD_ClrFeature+0x12>

08004800 <USBD_StdDevReq>:
{
 8004800:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004802:	780c      	ldrb	r4, [r1, #0]
 8004804:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8004808:	2c20      	cmp	r4, #32
 800480a:	d006      	beq.n	800481a <USBD_StdDevReq+0x1a>
 800480c:	2c40      	cmp	r4, #64	@ 0x40
 800480e:	d004      	beq.n	800481a <USBD_StdDevReq+0x1a>
 8004810:	b16c      	cbz	r4, 800482e <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 8004812:	f7ff fe33 	bl	800447c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004816:	2400      	movs	r4, #0
      break;
 8004818:	e007      	b.n	800482a <USBD_StdDevReq+0x2a>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800481a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800481e:	33ae      	adds	r3, #174	@ 0xae
 8004820:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	4798      	blx	r3
 8004828:	4604      	mov	r4, r0
}
 800482a:	4620      	mov	r0, r4
 800482c:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800482e:	784d      	ldrb	r5, [r1, #1]
 8004830:	2d09      	cmp	r5, #9
 8004832:	d81d      	bhi.n	8004870 <USBD_StdDevReq+0x70>
 8004834:	e8df f005 	tbb	[pc, r5]
 8004838:	161c1912 	.word	0x161c1912
 800483c:	1c05081c 	.word	0x1c05081c
 8004840:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 8004842:	f7ff fe25 	bl	8004490 <USBD_GetDescriptor>
          break;
 8004846:	e7f0      	b.n	800482a <USBD_StdDevReq+0x2a>
          USBD_SetAddress(pdev, req);
 8004848:	f7ff fee7 	bl	800461a <USBD_SetAddress>
          break;
 800484c:	e7ed      	b.n	800482a <USBD_StdDevReq+0x2a>
          ret = USBD_SetConfig(pdev, req);
 800484e:	f7ff ff0d 	bl	800466c <USBD_SetConfig>
 8004852:	4604      	mov	r4, r0
          break;
 8004854:	e7e9      	b.n	800482a <USBD_StdDevReq+0x2a>
          USBD_GetConfig(pdev, req);
 8004856:	f7ff ff6f 	bl	8004738 <USBD_GetConfig>
          break;
 800485a:	e7e6      	b.n	800482a <USBD_StdDevReq+0x2a>
          USBD_GetStatus(pdev, req);
 800485c:	f7ff ff8c 	bl	8004778 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8004860:	462c      	mov	r4, r5
          break;
 8004862:	e7e2      	b.n	800482a <USBD_StdDevReq+0x2a>
          USBD_SetFeature(pdev, req);
 8004864:	f7ff ffa4 	bl	80047b0 <USBD_SetFeature>
          break;
 8004868:	e7df      	b.n	800482a <USBD_StdDevReq+0x2a>
          USBD_ClrFeature(pdev, req);
 800486a:	f7ff ffb6 	bl	80047da <USBD_ClrFeature>
          break;
 800486e:	e7dc      	b.n	800482a <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 8004870:	f7ff fe04 	bl	800447c <USBD_CtlError>
          break;
 8004874:	e7d9      	b.n	800482a <USBD_StdDevReq+0x2a>

08004876 <USBD_StdItfReq>:
{
 8004876:	b570      	push	{r4, r5, r6, lr}
 8004878:	4605      	mov	r5, r0
 800487a:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800487c:	780b      	ldrb	r3, [r1, #0]
 800487e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004882:	2b20      	cmp	r3, #32
 8004884:	d007      	beq.n	8004896 <USBD_StdItfReq+0x20>
 8004886:	2b40      	cmp	r3, #64	@ 0x40
 8004888:	d005      	beq.n	8004896 <USBD_StdItfReq+0x20>
 800488a:	b123      	cbz	r3, 8004896 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800488c:	f7ff fdf6 	bl	800447c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004890:	2600      	movs	r6, #0
}
 8004892:	4630      	mov	r0, r6
 8004894:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8004896:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 800489a:	3b01      	subs	r3, #1
 800489c:	2b02      	cmp	r3, #2
 800489e:	d826      	bhi.n	80048ee <USBD_StdItfReq+0x78>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80048a0:	7921      	ldrb	r1, [r4, #4]
 80048a2:	2901      	cmp	r1, #1
 80048a4:	d905      	bls.n	80048b2 <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 80048a6:	4621      	mov	r1, r4
 80048a8:	4628      	mov	r0, r5
 80048aa:	f7ff fde7 	bl	800447c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80048ae:	2600      	movs	r6, #0
 80048b0:	e7ef      	b.n	8004892 <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80048b2:	4628      	mov	r0, r5
 80048b4:	f7ff fccc 	bl	8004250 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80048b8:	b968      	cbnz	r0, 80048d6 <USBD_StdItfReq+0x60>
              if (pdev->pClass[idx]->Setup != NULL)
 80048ba:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 80048be:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80048c2:	6891      	ldr	r1, [r2, #8]
 80048c4:	b189      	cbz	r1, 80048ea <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 80048c6:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80048ca:	6893      	ldr	r3, [r2, #8]
 80048cc:	4621      	mov	r1, r4
 80048ce:	4628      	mov	r0, r5
 80048d0:	4798      	blx	r3
 80048d2:	4606      	mov	r6, r0
 80048d4:	e000      	b.n	80048d8 <USBD_StdItfReq+0x62>
              ret = USBD_FAIL;
 80048d6:	2603      	movs	r6, #3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80048d8:	88e3      	ldrh	r3, [r4, #6]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1d9      	bne.n	8004892 <USBD_StdItfReq+0x1c>
 80048de:	2e00      	cmp	r6, #0
 80048e0:	d1d7      	bne.n	8004892 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 80048e2:	4628      	mov	r0, r5
 80048e4:	f000 f970 	bl	8004bc8 <USBD_CtlSendStatus>
 80048e8:	e7d3      	b.n	8004892 <USBD_StdItfReq+0x1c>
                ret = USBD_FAIL;
 80048ea:	2603      	movs	r6, #3
 80048ec:	e7f4      	b.n	80048d8 <USBD_StdItfReq+0x62>
          USBD_CtlError(pdev, req);
 80048ee:	4621      	mov	r1, r4
 80048f0:	4628      	mov	r0, r5
 80048f2:	f7ff fdc3 	bl	800447c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80048f6:	2600      	movs	r6, #0
          break;
 80048f8:	e7cb      	b.n	8004892 <USBD_StdItfReq+0x1c>

080048fa <USBD_StdEPReq>:
{
 80048fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048fe:	4606      	mov	r6, r0
 8004900:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 8004902:	888b      	ldrh	r3, [r1, #4]
 8004904:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004906:	780c      	ldrb	r4, [r1, #0]
 8004908:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 800490c:	2c20      	cmp	r4, #32
 800490e:	d008      	beq.n	8004922 <USBD_StdEPReq+0x28>
 8004910:	2c40      	cmp	r4, #64	@ 0x40
 8004912:	d006      	beq.n	8004922 <USBD_StdEPReq+0x28>
 8004914:	b1dc      	cbz	r4, 800494e <USBD_StdEPReq+0x54>
      USBD_CtlError(pdev, req);
 8004916:	f7ff fdb1 	bl	800447c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800491a:	2400      	movs	r4, #0
}
 800491c:	4620      	mov	r0, r4
 800491e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8004922:	4639      	mov	r1, r7
 8004924:	4630      	mov	r0, r6
 8004926:	f7ff fc95 	bl	8004254 <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800492a:	4604      	mov	r4, r0
 800492c:	2800      	cmp	r0, #0
 800492e:	f040 80f8 	bne.w	8004b22 <USBD_StdEPReq+0x228>
        pdev->classId = idx;
 8004932:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 8004936:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800493a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0eb      	beq.n	800491c <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8004944:	4629      	mov	r1, r5
 8004946:	4630      	mov	r0, r6
 8004948:	4798      	blx	r3
 800494a:	4604      	mov	r4, r0
 800494c:	e7e6      	b.n	800491c <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 800494e:	f891 8001 	ldrb.w	r8, [r1, #1]
 8004952:	f1b8 0f01 	cmp.w	r8, #1
 8004956:	d031      	beq.n	80049bc <USBD_StdEPReq+0xc2>
 8004958:	f1b8 0f03 	cmp.w	r8, #3
 800495c:	d005      	beq.n	800496a <USBD_StdEPReq+0x70>
 800495e:	f1b8 0f00 	cmp.w	r8, #0
 8004962:	d067      	beq.n	8004a34 <USBD_StdEPReq+0x13a>
          USBD_CtlError(pdev, req);
 8004964:	f7ff fd8a 	bl	800447c <USBD_CtlError>
          break;
 8004968:	e7d8      	b.n	800491c <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 800496a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d004      	beq.n	800497e <USBD_StdEPReq+0x84>
 8004974:	2b03      	cmp	r3, #3
 8004976:	d012      	beq.n	800499e <USBD_StdEPReq+0xa4>
              USBD_CtlError(pdev, req);
 8004978:	f7ff fd80 	bl	800447c <USBD_CtlError>
              break;
 800497c:	e7ce      	b.n	800491c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800497e:	b10f      	cbz	r7, 8004984 <USBD_StdEPReq+0x8a>
 8004980:	2f80      	cmp	r7, #128	@ 0x80
 8004982:	d104      	bne.n	800498e <USBD_StdEPReq+0x94>
                USBD_CtlError(pdev, req);
 8004984:	4629      	mov	r1, r5
 8004986:	4630      	mov	r0, r6
 8004988:	f7ff fd78 	bl	800447c <USBD_CtlError>
 800498c:	e7c6      	b.n	800491c <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800498e:	4639      	mov	r1, r7
 8004990:	f000 fb46 	bl	8005020 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004994:	2180      	movs	r1, #128	@ 0x80
 8004996:	4630      	mov	r0, r6
 8004998:	f000 fb42 	bl	8005020 <USBD_LL_StallEP>
 800499c:	e7be      	b.n	800491c <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800499e:	884b      	ldrh	r3, [r1, #2]
 80049a0:	b923      	cbnz	r3, 80049ac <USBD_StdEPReq+0xb2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80049a2:	b11f      	cbz	r7, 80049ac <USBD_StdEPReq+0xb2>
 80049a4:	2f80      	cmp	r7, #128	@ 0x80
 80049a6:	d001      	beq.n	80049ac <USBD_StdEPReq+0xb2>
 80049a8:	88cb      	ldrh	r3, [r1, #6]
 80049aa:	b11b      	cbz	r3, 80049b4 <USBD_StdEPReq+0xba>
              (void)USBD_CtlSendStatus(pdev);
 80049ac:	4630      	mov	r0, r6
 80049ae:	f000 f90b 	bl	8004bc8 <USBD_CtlSendStatus>
              break;
 80049b2:	e7b3      	b.n	800491c <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80049b4:	4639      	mov	r1, r7
 80049b6:	f000 fb33 	bl	8005020 <USBD_LL_StallEP>
 80049ba:	e7f7      	b.n	80049ac <USBD_StdEPReq+0xb2>
          switch (pdev->dev_state)
 80049bc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d004      	beq.n	80049d0 <USBD_StdEPReq+0xd6>
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	d012      	beq.n	80049f0 <USBD_StdEPReq+0xf6>
              USBD_CtlError(pdev, req);
 80049ca:	f7ff fd57 	bl	800447c <USBD_CtlError>
              break;
 80049ce:	e7a5      	b.n	800491c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80049d0:	b10f      	cbz	r7, 80049d6 <USBD_StdEPReq+0xdc>
 80049d2:	2f80      	cmp	r7, #128	@ 0x80
 80049d4:	d104      	bne.n	80049e0 <USBD_StdEPReq+0xe6>
                USBD_CtlError(pdev, req);
 80049d6:	4629      	mov	r1, r5
 80049d8:	4630      	mov	r0, r6
 80049da:	f7ff fd4f 	bl	800447c <USBD_CtlError>
 80049de:	e79d      	b.n	800491c <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80049e0:	4639      	mov	r1, r7
 80049e2:	f000 fb1d 	bl	8005020 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80049e6:	2180      	movs	r1, #128	@ 0x80
 80049e8:	4630      	mov	r0, r6
 80049ea:	f000 fb19 	bl	8005020 <USBD_LL_StallEP>
 80049ee:	e795      	b.n	800491c <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80049f0:	884b      	ldrh	r3, [r1, #2]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d192      	bne.n	800491c <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 80049f6:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 80049fa:	d117      	bne.n	8004a2c <USBD_StdEPReq+0x132>
                (void)USBD_CtlSendStatus(pdev);
 80049fc:	4630      	mov	r0, r6
 80049fe:	f000 f8e3 	bl	8004bc8 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8004a02:	4639      	mov	r1, r7
 8004a04:	4630      	mov	r0, r6
 8004a06:	f7ff fc25 	bl	8004254 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004a0a:	2800      	cmp	r0, #0
 8004a0c:	d186      	bne.n	800491c <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 8004a0e:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 8004a12:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 8004a16:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8004a1a:	6892      	ldr	r2, [r2, #8]
 8004a1c:	2a00      	cmp	r2, #0
 8004a1e:	f000 8082 	beq.w	8004b26 <USBD_StdEPReq+0x22c>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8004a22:	4629      	mov	r1, r5
 8004a24:	4630      	mov	r0, r6
 8004a26:	4790      	blx	r2
 8004a28:	4604      	mov	r4, r0
 8004a2a:	e777      	b.n	800491c <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004a2c:	4639      	mov	r1, r7
 8004a2e:	f000 faff 	bl	8005030 <USBD_LL_ClearStallEP>
 8004a32:	e7e3      	b.n	80049fc <USBD_StdEPReq+0x102>
          switch (pdev->dev_state)
 8004a34:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8004a38:	b2d2      	uxtb	r2, r2
 8004a3a:	2a02      	cmp	r2, #2
 8004a3c:	d005      	beq.n	8004a4a <USBD_StdEPReq+0x150>
 8004a3e:	2a03      	cmp	r2, #3
 8004a40:	d027      	beq.n	8004a92 <USBD_StdEPReq+0x198>
              USBD_CtlError(pdev, req);
 8004a42:	f7ff fd1b 	bl	800447c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004a46:	4644      	mov	r4, r8
              break;
 8004a48:	e768      	b.n	800491c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004a4a:	b10f      	cbz	r7, 8004a50 <USBD_StdEPReq+0x156>
 8004a4c:	2f80      	cmp	r7, #128	@ 0x80
 8004a4e:	d113      	bne.n	8004a78 <USBD_StdEPReq+0x17e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004a50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004a54:	d114      	bne.n	8004a80 <USBD_StdEPReq+0x186>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004a56:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004a5a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8004a5e:	00b9      	lsls	r1, r7, #2
 8004a60:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8004a64:	4431      	add	r1, r6
 8004a66:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	4630      	mov	r0, r6
 8004a70:	f000 f87e 	bl	8004b70 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004a74:	4644      	mov	r4, r8
              break;
 8004a76:	e751      	b.n	800491c <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 8004a78:	f7ff fd00 	bl	800447c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004a7c:	4644      	mov	r4, r8
                break;
 8004a7e:	e74d      	b.n	800491c <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004a80:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 8004a84:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8004a88:	00b9      	lsls	r1, r7, #2
 8004a8a:	3110      	adds	r1, #16
 8004a8c:	4431      	add	r1, r6
 8004a8e:	3104      	adds	r1, #4
 8004a90:	e7ea      	b.n	8004a68 <USBD_StdEPReq+0x16e>
              if ((ep_addr & 0x80U) == 0x80U)
 8004a92:	b25b      	sxtb	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	db1f      	blt.n	8004ad8 <USBD_StdEPReq+0x1de>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004a98:	f007 020f 	and.w	r2, r7, #15
 8004a9c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004aa0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004aa4:	f8b2 2164 	ldrh.w	r2, [r2, #356]	@ 0x164
 8004aa8:	b31a      	cbz	r2, 8004af2 <USBD_StdEPReq+0x1f8>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	db25      	blt.n	8004afa <USBD_StdEPReq+0x200>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004aae:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004ab2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004ab6:	009c      	lsls	r4, r3, #2
 8004ab8:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 8004abc:	4434      	add	r4, r6
 8004abe:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004ac0:	b10f      	cbz	r7, 8004ac6 <USBD_StdEPReq+0x1cc>
 8004ac2:	2f80      	cmp	r7, #128	@ 0x80
 8004ac4:	d122      	bne.n	8004b0c <USBD_StdEPReq+0x212>
                pep->status = 0x0000U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004aca:	2202      	movs	r2, #2
 8004acc:	4621      	mov	r1, r4
 8004ace:	4630      	mov	r0, r6
 8004ad0:	f000 f84e 	bl	8004b70 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004ad4:	4644      	mov	r4, r8
              break;
 8004ad6:	e721      	b.n	800491c <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004ad8:	f007 020f 	and.w	r2, r7, #15
 8004adc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004ae0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004ae4:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8004ae6:	2a00      	cmp	r2, #0
 8004ae8:	d1df      	bne.n	8004aaa <USBD_StdEPReq+0x1b0>
                  USBD_CtlError(pdev, req);
 8004aea:	f7ff fcc7 	bl	800447c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004aee:	4644      	mov	r4, r8
                  break;
 8004af0:	e714      	b.n	800491c <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 8004af2:	f7ff fcc3 	bl	800447c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004af6:	4644      	mov	r4, r8
                  break;
 8004af8:	e710      	b.n	800491c <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004afa:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
 8004afe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004b02:	009c      	lsls	r4, r3, #2
 8004b04:	3410      	adds	r4, #16
 8004b06:	4434      	add	r4, r6
 8004b08:	3404      	adds	r4, #4
 8004b0a:	e7d9      	b.n	8004ac0 <USBD_StdEPReq+0x1c6>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004b0c:	4639      	mov	r1, r7
 8004b0e:	4630      	mov	r0, r6
 8004b10:	f000 fa40 	bl	8004f94 <USBD_LL_IsStallEP>
 8004b14:	b110      	cbz	r0, 8004b1c <USBD_StdEPReq+0x222>
                pep->status = 0x0001U;
 8004b16:	2301      	movs	r3, #1
 8004b18:	6023      	str	r3, [r4, #0]
 8004b1a:	e7d6      	b.n	8004aca <USBD_StdEPReq+0x1d0>
                pep->status = 0x0000U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	6023      	str	r3, [r4, #0]
 8004b20:	e7d3      	b.n	8004aca <USBD_StdEPReq+0x1d0>
  USBD_StatusTypeDef ret = USBD_OK;
 8004b22:	2400      	movs	r4, #0
 8004b24:	e6fa      	b.n	800491c <USBD_StdEPReq+0x22>
 8004b26:	4604      	mov	r4, r0
 8004b28:	e6f8      	b.n	800491c <USBD_StdEPReq+0x22>

08004b2a <USBD_GetString>:
  if (desc == NULL)
 8004b2a:	b300      	cbz	r0, 8004b6e <USBD_GetString+0x44>
{
 8004b2c:	b570      	push	{r4, r5, r6, lr}
 8004b2e:	460d      	mov	r5, r1
 8004b30:	4616      	mov	r6, r2
 8004b32:	4604      	mov	r4, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8004b34:	f7ff fc84 	bl	8004440 <USBD_GetLen>
 8004b38:	3001      	adds	r0, #1
 8004b3a:	0043      	lsls	r3, r0, #1
 8004b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b40:	d806      	bhi.n	8004b50 <USBD_GetString+0x26>
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8004b46:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	706b      	strb	r3, [r5, #1]
  idx++;
 8004b4c:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8004b4e:	e00a      	b.n	8004b66 <USBD_GetString+0x3c>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8004b50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b54:	e7f6      	b.n	8004b44 <USBD_GetString+0x1a>
    unicode[idx] = *pdesc;
 8004b56:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8004b58:	3401      	adds	r4, #1
    idx++;
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8004b5e:	2100      	movs	r1, #0
 8004b60:	54a9      	strb	r1, [r5, r2]
    idx++;
 8004b62:	3302      	adds	r3, #2
 8004b64:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8004b66:	7822      	ldrb	r2, [r4, #0]
 8004b68:	2a00      	cmp	r2, #0
 8004b6a:	d1f4      	bne.n	8004b56 <USBD_GetString+0x2c>
}
 8004b6c:	bd70      	pop	{r4, r5, r6, pc}
 8004b6e:	4770      	bx	lr

08004b70 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8004b70:	b508      	push	{r3, lr}
 8004b72:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004b74:	2202      	movs	r2, #2
 8004b76:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8004b7a:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8004b7c:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004b7e:	460a      	mov	r2, r1
 8004b80:	2100      	movs	r1, #0
 8004b82:	f000 fa65 	bl	8005050 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004b86:	2000      	movs	r0, #0
 8004b88:	bd08      	pop	{r3, pc}

08004b8a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8004b8a:	b508      	push	{r3, lr}
 8004b8c:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004b8e:	460a      	mov	r2, r1
 8004b90:	2100      	movs	r1, #0
 8004b92:	f000 fa5d 	bl	8005050 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004b96:	2000      	movs	r0, #0
 8004b98:	bd08      	pop	{r3, pc}

08004b9a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8004b9a:	b508      	push	{r3, lr}
 8004b9c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004b9e:	2203      	movs	r2, #3
 8004ba0:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8004ba4:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8004ba8:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004bac:	460a      	mov	r2, r1
 8004bae:	2100      	movs	r1, #0
 8004bb0:	f000 fa56 	bl	8005060 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	bd08      	pop	{r3, pc}

08004bb8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8004bb8:	b508      	push	{r3, lr}
 8004bba:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004bbc:	460a      	mov	r2, r1
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	f000 fa4e 	bl	8005060 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004bc4:	2000      	movs	r0, #0
 8004bc6:	bd08      	pop	{r3, pc}

08004bc8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004bc8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004bca:	2204      	movs	r2, #4
 8004bcc:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	f000 fa3b 	bl	8005050 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004bda:	2000      	movs	r0, #0
 8004bdc:	bd08      	pop	{r3, pc}

08004bde <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004bde:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004be0:	2205      	movs	r2, #5
 8004be2:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004be6:	2300      	movs	r3, #0
 8004be8:	461a      	mov	r2, r3
 8004bea:	4619      	mov	r1, r3
 8004bec:	f000 fa38 	bl	8005060 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	bd08      	pop	{r3, pc}

08004bf4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004bf4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	490f      	ldr	r1, [pc, #60]	@ (8004c38 <MX_USB_DEVICE_Init+0x44>)
 8004bfa:	4810      	ldr	r0, [pc, #64]	@ (8004c3c <MX_USB_DEVICE_Init+0x48>)
 8004bfc:	f7ff fa13 	bl	8004026 <USBD_Init>
 8004c00:	b970      	cbnz	r0, 8004c20 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8004c02:	490f      	ldr	r1, [pc, #60]	@ (8004c40 <MX_USB_DEVICE_Init+0x4c>)
 8004c04:	480d      	ldr	r0, [pc, #52]	@ (8004c3c <MX_USB_DEVICE_Init+0x48>)
 8004c06:	f7ff fa25 	bl	8004054 <USBD_RegisterClass>
 8004c0a:	b960      	cbnz	r0, 8004c26 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8004c0c:	490d      	ldr	r1, [pc, #52]	@ (8004c44 <MX_USB_DEVICE_Init+0x50>)
 8004c0e:	480b      	ldr	r0, [pc, #44]	@ (8004c3c <MX_USB_DEVICE_Init+0x48>)
 8004c10:	f7ff f9c8 	bl	8003fa4 <USBD_CDC_RegisterInterface>
 8004c14:	b950      	cbnz	r0, 8004c2c <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004c16:	4809      	ldr	r0, [pc, #36]	@ (8004c3c <MX_USB_DEVICE_Init+0x48>)
 8004c18:	f7ff fa36 	bl	8004088 <USBD_Start>
 8004c1c:	b948      	cbnz	r0, 8004c32 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004c1e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004c20:	f7fb fd64 	bl	80006ec <Error_Handler>
 8004c24:	e7ed      	b.n	8004c02 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8004c26:	f7fb fd61 	bl	80006ec <Error_Handler>
 8004c2a:	e7ef      	b.n	8004c0c <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8004c2c:	f7fb fd5e 	bl	80006ec <Error_Handler>
 8004c30:	e7f1      	b.n	8004c16 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8004c32:	f7fb fd5b 	bl	80006ec <Error_Handler>
}
 8004c36:	e7f2      	b.n	8004c1e <MX_USB_DEVICE_Init+0x2a>
 8004c38:	200000dc 	.word	0x200000dc
 8004c3c:	200002b4 	.word	0x200002b4
 8004c40:	20000050 	.word	0x20000050
 8004c44:	20000094 	.word	0x20000094

08004c48 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8004c48:	2000      	movs	r0, #0
 8004c4a:	4770      	bx	lr

08004c4c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	4770      	bx	lr

08004c50 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8004c50:	2000      	movs	r0, #0
 8004c52:	4770      	bx	lr

08004c54 <CDC_Receive_FS>:
{
 8004c54:	b510      	push	{r4, lr}
 8004c56:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004c58:	4c04      	ldr	r4, [pc, #16]	@ (8004c6c <CDC_Receive_FS+0x18>)
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	f7ff f9bb 	bl	8003fd6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004c60:	4620      	mov	r0, r4
 8004c62:	f7ff f9c4 	bl	8003fee <USBD_CDC_ReceivePacket>
}
 8004c66:	2000      	movs	r0, #0
 8004c68:	bd10      	pop	{r4, pc}
 8004c6a:	bf00      	nop
 8004c6c:	200002b4 	.word	0x200002b4

08004c70 <CDC_Init_FS>:
{
 8004c70:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004c72:	4c06      	ldr	r4, [pc, #24]	@ (8004c8c <CDC_Init_FS+0x1c>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	4906      	ldr	r1, [pc, #24]	@ (8004c90 <CDC_Init_FS+0x20>)
 8004c78:	4620      	mov	r0, r4
 8004c7a:	f7ff f99e 	bl	8003fba <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8004c7e:	4905      	ldr	r1, [pc, #20]	@ (8004c94 <CDC_Init_FS+0x24>)
 8004c80:	4620      	mov	r0, r4
 8004c82:	f7ff f9a8 	bl	8003fd6 <USBD_CDC_SetRxBuffer>
}
 8004c86:	2000      	movs	r0, #0
 8004c88:	bd10      	pop	{r4, pc}
 8004c8a:	bf00      	nop
 8004c8c:	200002b4 	.word	0x200002b4
 8004c90:	20000590 	.word	0x20000590
 8004c94:	20000d90 	.word	0x20000d90

08004c98 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004c98:	2312      	movs	r3, #18
 8004c9a:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8004c9c:	4800      	ldr	r0, [pc, #0]	@ (8004ca0 <USBD_FS_DeviceDescriptor+0x8>)
 8004c9e:	4770      	bx	lr
 8004ca0:	200000c8 	.word	0x200000c8

08004ca4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004ca4:	2304      	movs	r3, #4
 8004ca6:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8004ca8:	4800      	ldr	r0, [pc, #0]	@ (8004cac <USBD_FS_LangIDStrDescriptor+0x8>)
 8004caa:	4770      	bx	lr
 8004cac:	200000c4 	.word	0x200000c4

08004cb0 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d21e      	bcs.n	8004cf4 <IntToUnicode+0x44>
{
 8004cb6:	b500      	push	{lr}
 8004cb8:	e010      	b.n	8004cdc <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004cba:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 8004cbe:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 8004cc2:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8004cc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004cc8:	f10c 0c01 	add.w	ip, ip, #1
 8004ccc:	f04f 0e00 	mov.w	lr, #0
 8004cd0:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d209      	bcs.n	8004cf0 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 8004cdc:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 8004ce0:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 8004ce4:	d2e9      	bcs.n	8004cba <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8004ce6:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 8004cea:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 8004cee:	e7e8      	b.n	8004cc2 <IntToUnicode+0x12>
  }
}
 8004cf0:	f85d fb04 	ldr.w	pc, [sp], #4
 8004cf4:	4770      	bx	lr
	...

08004cf8 <Get_SerialNum>:
{
 8004cf8:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8004d28 <Get_SerialNum+0x30>)
 8004cfc:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	@ 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004d00:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	@ 0xa14
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004d04:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	@ 0xa18
  if (deviceserial0 != 0)
 8004d08:	18c0      	adds	r0, r0, r3
 8004d0a:	d100      	bne.n	8004d0e <Get_SerialNum+0x16>
}
 8004d0c:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004d0e:	4d07      	ldr	r5, [pc, #28]	@ (8004d2c <Get_SerialNum+0x34>)
 8004d10:	2208      	movs	r2, #8
 8004d12:	4629      	mov	r1, r5
 8004d14:	f7ff ffcc 	bl	8004cb0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004d18:	2204      	movs	r2, #4
 8004d1a:	f105 0110 	add.w	r1, r5, #16
 8004d1e:	4620      	mov	r0, r4
 8004d20:	f7ff ffc6 	bl	8004cb0 <IntToUnicode>
}
 8004d24:	e7f2      	b.n	8004d0c <Get_SerialNum+0x14>
 8004d26:	bf00      	nop
 8004d28:	1fff7000 	.word	0x1fff7000
 8004d2c:	200000aa 	.word	0x200000aa

08004d30 <USBD_FS_SerialStrDescriptor>:
{
 8004d30:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004d32:	231a      	movs	r3, #26
 8004d34:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8004d36:	f7ff ffdf 	bl	8004cf8 <Get_SerialNum>
}
 8004d3a:	4801      	ldr	r0, [pc, #4]	@ (8004d40 <USBD_FS_SerialStrDescriptor+0x10>)
 8004d3c:	bd08      	pop	{r3, pc}
 8004d3e:	bf00      	nop
 8004d40:	200000a8 	.word	0x200000a8

08004d44 <USBD_FS_ProductStrDescriptor>:
{
 8004d44:	b508      	push	{r3, lr}
 8004d46:	460a      	mov	r2, r1
  if(speed == 0)
 8004d48:	b928      	cbnz	r0, 8004d56 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004d4a:	4905      	ldr	r1, [pc, #20]	@ (8004d60 <USBD_FS_ProductStrDescriptor+0x1c>)
 8004d4c:	4805      	ldr	r0, [pc, #20]	@ (8004d64 <USBD_FS_ProductStrDescriptor+0x20>)
 8004d4e:	f7ff feec 	bl	8004b2a <USBD_GetString>
}
 8004d52:	4803      	ldr	r0, [pc, #12]	@ (8004d60 <USBD_FS_ProductStrDescriptor+0x1c>)
 8004d54:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004d56:	4902      	ldr	r1, [pc, #8]	@ (8004d60 <USBD_FS_ProductStrDescriptor+0x1c>)
 8004d58:	4802      	ldr	r0, [pc, #8]	@ (8004d64 <USBD_FS_ProductStrDescriptor+0x20>)
 8004d5a:	f7ff fee6 	bl	8004b2a <USBD_GetString>
 8004d5e:	e7f8      	b.n	8004d52 <USBD_FS_ProductStrDescriptor+0xe>
 8004d60:	20001590 	.word	0x20001590
 8004d64:	080061c8 	.word	0x080061c8

08004d68 <USBD_FS_ManufacturerStrDescriptor>:
{
 8004d68:	b510      	push	{r4, lr}
 8004d6a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004d6c:	4c03      	ldr	r4, [pc, #12]	@ (8004d7c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004d6e:	4621      	mov	r1, r4
 8004d70:	4803      	ldr	r0, [pc, #12]	@ (8004d80 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004d72:	f7ff feda 	bl	8004b2a <USBD_GetString>
}
 8004d76:	4620      	mov	r0, r4
 8004d78:	bd10      	pop	{r4, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20001590 	.word	0x20001590
 8004d80:	080061e0 	.word	0x080061e0

08004d84 <USBD_FS_ConfigStrDescriptor>:
{
 8004d84:	b508      	push	{r3, lr}
 8004d86:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8004d88:	b928      	cbnz	r0, 8004d96 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004d8a:	4905      	ldr	r1, [pc, #20]	@ (8004da0 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004d8c:	4805      	ldr	r0, [pc, #20]	@ (8004da4 <USBD_FS_ConfigStrDescriptor+0x20>)
 8004d8e:	f7ff fecc 	bl	8004b2a <USBD_GetString>
}
 8004d92:	4803      	ldr	r0, [pc, #12]	@ (8004da0 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004d94:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004d96:	4902      	ldr	r1, [pc, #8]	@ (8004da0 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004d98:	4802      	ldr	r0, [pc, #8]	@ (8004da4 <USBD_FS_ConfigStrDescriptor+0x20>)
 8004d9a:	f7ff fec6 	bl	8004b2a <USBD_GetString>
 8004d9e:	e7f8      	b.n	8004d92 <USBD_FS_ConfigStrDescriptor+0xe>
 8004da0:	20001590 	.word	0x20001590
 8004da4:	080061ec 	.word	0x080061ec

08004da8 <USBD_FS_InterfaceStrDescriptor>:
{
 8004da8:	b508      	push	{r3, lr}
 8004daa:	460a      	mov	r2, r1
  if(speed == 0)
 8004dac:	b928      	cbnz	r0, 8004dba <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004dae:	4905      	ldr	r1, [pc, #20]	@ (8004dc4 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004db0:	4805      	ldr	r0, [pc, #20]	@ (8004dc8 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8004db2:	f7ff feba 	bl	8004b2a <USBD_GetString>
}
 8004db6:	4803      	ldr	r0, [pc, #12]	@ (8004dc4 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004db8:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004dba:	4902      	ldr	r1, [pc, #8]	@ (8004dc4 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004dbc:	4802      	ldr	r0, [pc, #8]	@ (8004dc8 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8004dbe:	f7ff feb4 	bl	8004b2a <USBD_GetString>
 8004dc2:	e7f8      	b.n	8004db6 <USBD_FS_InterfaceStrDescriptor+0xe>
 8004dc4:	20001590 	.word	0x20001590
 8004dc8:	080061f8 	.word	0x080061f8

08004dcc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004dcc:	b530      	push	{r4, r5, lr}
 8004dce:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	9303      	str	r3, [sp, #12]
 8004dd4:	9304      	str	r3, [sp, #16]
 8004dd6:	9305      	str	r3, [sp, #20]
 8004dd8:	9306      	str	r3, [sp, #24]
 8004dda:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8004ddc:	6803      	ldr	r3, [r0, #0]
 8004dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004de2:	d001      	beq.n	8004de8 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004de4:	b009      	add	sp, #36	@ 0x24
 8004de6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004de8:	2500      	movs	r5, #0
 8004dea:	9501      	str	r5, [sp, #4]
 8004dec:	4c16      	ldr	r4, [pc, #88]	@ (8004e48 <HAL_PCD_MspInit+0x7c>)
 8004dee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004df0:	f043 0301 	orr.w	r3, r3, #1
 8004df4:	6323      	str	r3, [r4, #48]	@ 0x30
 8004df6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	9301      	str	r3, [sp, #4]
 8004dfe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004e00:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004e04:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e06:	2302      	movs	r3, #2
 8004e08:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004e0e:	230a      	movs	r3, #10
 8004e10:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e12:	a903      	add	r1, sp, #12
 8004e14:	480d      	ldr	r0, [pc, #52]	@ (8004e4c <HAL_PCD_MspInit+0x80>)
 8004e16:	f7fc f9e5 	bl	80011e4 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004e1a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004e1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e20:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e22:	9502      	str	r5, [sp, #8]
 8004e24:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004e26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e2a:	6463      	str	r3, [r4, #68]	@ 0x44
 8004e2c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004e2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e32:	9302      	str	r3, [sp, #8]
 8004e34:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8004e36:	462a      	mov	r2, r5
 8004e38:	4629      	mov	r1, r5
 8004e3a:	2043      	movs	r0, #67	@ 0x43
 8004e3c:	f7fb ff44 	bl	8000cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8004e40:	2043      	movs	r0, #67	@ 0x43
 8004e42:	f7fb ff51 	bl	8000ce8 <HAL_NVIC_EnableIRQ>
}
 8004e46:	e7cd      	b.n	8004de4 <HAL_PCD_MspInit+0x18>
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	40020000 	.word	0x40020000

08004e50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004e50:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004e52:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 8004e56:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004e5a:	f7ff f92b 	bl	80040b4 <USBD_LL_SetupStage>
}
 8004e5e:	bd08      	pop	{r3, pc}

08004e60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004e60:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004e62:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8004e66:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004e6a:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 8004e6e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004e72:	f7ff f9f1 	bl	8004258 <USBD_LL_DataOutStage>
}
 8004e76:	bd08      	pop	{r3, pc}

08004e78 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004e78:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004e7a:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8004e7e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004e82:	6a1a      	ldr	r2, [r3, #32]
 8004e84:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004e88:	f7ff fa49 	bl	800431e <USBD_LL_DataInStage>
}
 8004e8c:	bd08      	pop	{r3, pc}

08004e8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004e8e:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004e90:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004e94:	f7ff f98b 	bl	80041ae <USBD_LL_SOF>
}
 8004e98:	bd08      	pop	{r3, pc}

08004e9a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004e9a:	b510      	push	{r4, lr}
 8004e9c:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004e9e:	79c3      	ldrb	r3, [r0, #7]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d109      	bne.n	8004eb8 <HAL_PCD_ResetCallback+0x1e>
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8004eaa:	f7ff f961 	bl	8004170 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004eae:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8004eb2:	f7ff f92b 	bl	800410c <USBD_LL_Reset>
}
 8004eb6:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004eb8:	f7fb fc18 	bl	80006ec <Error_Handler>
 8004ebc:	e7f2      	b.n	8004ea4 <HAL_PCD_ResetCallback+0xa>
	...

08004ec0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004ec0:	b510      	push	{r4, lr}
 8004ec2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004ec4:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004ec8:	f7ff f955 	bl	8004176 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8004ecc:	6822      	ldr	r2, [r4, #0]
 8004ece:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8004ed2:	f043 0301 	orr.w	r3, r3, #1
 8004ed6:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004eda:	7ae3      	ldrb	r3, [r4, #11]
 8004edc:	b123      	cbz	r3, 8004ee8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004ede:	4a03      	ldr	r2, [pc, #12]	@ (8004eec <HAL_PCD_SuspendCallback+0x2c>)
 8004ee0:	6913      	ldr	r3, [r2, #16]
 8004ee2:	f043 0306 	orr.w	r3, r3, #6
 8004ee6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8004ee8:	bd10      	pop	{r4, pc}
 8004eea:	bf00      	nop
 8004eec:	e000ed00 	.word	0xe000ed00

08004ef0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004ef0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004ef2:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004ef6:	f7ff f94d 	bl	8004194 <USBD_LL_Resume>
}
 8004efa:	bd08      	pop	{r3, pc}

08004efc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004efc:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004efe:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004f02:	f7ff f97c 	bl	80041fe <USBD_LL_IsoOUTIncomplete>
}
 8004f06:	bd08      	pop	{r3, pc}

08004f08 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004f08:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004f0a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004f0e:	f7ff f95f 	bl	80041d0 <USBD_LL_IsoINIncomplete>
}
 8004f12:	bd08      	pop	{r3, pc}

08004f14 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004f14:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8004f16:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004f1a:	f7ff f987 	bl	800422c <USBD_LL_DevConnected>
}
 8004f1e:	bd08      	pop	{r3, pc}

08004f20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004f20:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8004f22:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004f26:	f7ff f983 	bl	8004230 <USBD_LL_DevDisconnected>
}
 8004f2a:	bd08      	pop	{r3, pc}

08004f2c <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8004f2c:	7802      	ldrb	r2, [r0, #0]
 8004f2e:	b10a      	cbz	r2, 8004f34 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8004f30:	2000      	movs	r0, #0
 8004f32:	4770      	bx	lr
{
 8004f34:	b510      	push	{r4, lr}
 8004f36:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 8004f38:	4815      	ldr	r0, [pc, #84]	@ (8004f90 <USBD_LL_Init+0x64>)
 8004f3a:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8004f3e:	f8c3 02c8 	str.w	r0, [r3, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004f42:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004f46:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8004f48:	2304      	movs	r3, #4
 8004f4a:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	71c2      	strb	r2, [r0, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004f50:	2300      	movs	r3, #0
 8004f52:	7183      	strb	r3, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004f54:	7242      	strb	r2, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004f56:	7283      	strb	r3, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004f58:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004f5a:	7303      	strb	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8004f5c:	7383      	strb	r3, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004f5e:	73c3      	strb	r3, [r0, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004f60:	f7fc fa9b 	bl	800149a <HAL_PCD_Init>
 8004f64:	b980      	cbnz	r0, 8004f88 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8004f66:	4c0a      	ldr	r4, [pc, #40]	@ (8004f90 <USBD_LL_Init+0x64>)
 8004f68:	2180      	movs	r1, #128	@ 0x80
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	f7fd f861 	bl	8002032 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8004f70:	2240      	movs	r2, #64	@ 0x40
 8004f72:	2100      	movs	r1, #0
 8004f74:	4620      	mov	r0, r4
 8004f76:	f7fd f836 	bl	8001fe6 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8004f7a:	2280      	movs	r2, #128	@ 0x80
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	4620      	mov	r0, r4
 8004f80:	f7fd f831 	bl	8001fe6 <HAL_PCDEx_SetTxFiFo>
}
 8004f84:	2000      	movs	r0, #0
 8004f86:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8004f88:	f7fb fbb0 	bl	80006ec <Error_Handler>
 8004f8c:	e7eb      	b.n	8004f66 <USBD_LL_Init+0x3a>
 8004f8e:	bf00      	nop
 8004f90:	200019b0 	.word	0x200019b0

08004f94 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004f94:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8

  if((ep_addr & 0x80) == 0x80)
 8004f98:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8004f9c:	d108      	bne.n	8004fb0 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004f9e:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8004fa2:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8004fa6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004faa:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
  }
}
 8004fae:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004fb0:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8004fb4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8004fb8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004fbc:	7d98      	ldrb	r0, [r3, #22]
 8004fbe:	4770      	bx	lr

08004fc0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004fc0:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004fc2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8004fc6:	f7fc fc6b 	bl	80018a0 <HAL_PCD_EP_GetRxCount>
}
 8004fca:	bd08      	pop	{r3, pc}

08004fcc <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8004fcc:	4800      	ldr	r0, [pc, #0]	@ (8004fd0 <USBD_static_malloc+0x4>)
 8004fce:	4770      	bx	lr
 8004fd0:	20001790 	.word	0x20001790

08004fd4 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8004fd4:	4770      	bx	lr

08004fd6 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8004fd6:	2803      	cmp	r0, #3
 8004fd8:	d805      	bhi.n	8004fe6 <USBD_Get_USB_Status+0x10>
 8004fda:	e8df f000 	tbb	[pc, r0]
 8004fde:	0405      	.short	0x0405
 8004fe0:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004fe2:	2001      	movs	r0, #1
    break;
 8004fe4:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8004fe6:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8004fe8:	4770      	bx	lr

08004fea <USBD_LL_Start>:
{
 8004fea:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8004fec:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8004ff0:	f7fc fad4 	bl	800159c <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004ff4:	f7ff ffef 	bl	8004fd6 <USBD_Get_USB_Status>
}
 8004ff8:	bd08      	pop	{r3, pc}

08004ffa <USBD_LL_OpenEP>:
{
 8004ffa:	b508      	push	{r3, lr}
 8004ffc:	4694      	mov	ip, r2
 8004ffe:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005000:	4663      	mov	r3, ip
 8005002:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005006:	f7fc fba8 	bl	800175a <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800500a:	f7ff ffe4 	bl	8004fd6 <USBD_Get_USB_Status>
}
 800500e:	bd08      	pop	{r3, pc}

08005010 <USBD_LL_CloseEP>:
{
 8005010:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005012:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005016:	f7fc fbe6 	bl	80017e6 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800501a:	f7ff ffdc 	bl	8004fd6 <USBD_Get_USB_Status>
}
 800501e:	bd08      	pop	{r3, pc}

08005020 <USBD_LL_StallEP>:
{
 8005020:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005022:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005026:	f7fc fc69 	bl	80018fc <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800502a:	f7ff ffd4 	bl	8004fd6 <USBD_Get_USB_Status>
}
 800502e:	bd08      	pop	{r3, pc}

08005030 <USBD_LL_ClearStallEP>:
{
 8005030:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005032:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005036:	f7fc fca4 	bl	8001982 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800503a:	f7ff ffcc 	bl	8004fd6 <USBD_Get_USB_Status>
}
 800503e:	bd08      	pop	{r3, pc}

08005040 <USBD_LL_SetUSBAddress>:
{
 8005040:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005042:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005046:	f7fc fb75 	bl	8001734 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800504a:	f7ff ffc4 	bl	8004fd6 <USBD_Get_USB_Status>
}
 800504e:	bd08      	pop	{r3, pc}

08005050 <USBD_LL_Transmit>:
{
 8005050:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005052:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005056:	f7fc fc2c 	bl	80018b2 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800505a:	f7ff ffbc 	bl	8004fd6 <USBD_Get_USB_Status>
}
 800505e:	bd08      	pop	{r3, pc}

08005060 <USBD_LL_PrepareReceive>:
{
 8005060:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005062:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005066:	f7fc fbf6 	bl	8001856 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800506a:	f7ff ffb4 	bl	8004fd6 <USBD_Get_USB_Status>
}
 800506e:	bd08      	pop	{r3, pc}

08005070 <wait_for_string>:

char last_str[MAX_STR];
char txbuf[MAX_STR];

// Private functions
esp01_result_t wait_for_string(char *str, uint32_t timeout) {
 8005070:	b538      	push	{r3, r4, r5, lr}
 8005072:	4605      	mov	r5, r0
    uint32_t end_time = uwTick + timeout;
 8005074:	4b08      	ldr	r3, [pc, #32]	@ (8005098 <wait_for_string+0x28>)
 8005076:	681c      	ldr	r4, [r3, #0]
 8005078:	440c      	add	r4, r1
    while (uwTick <= end_time) {
 800507a:	4b07      	ldr	r3, [pc, #28]	@ (8005098 <wait_for_string+0x28>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	42a3      	cmp	r3, r4
 8005080:	d807      	bhi.n	8005092 <wait_for_string+0x22>
        if (strcmp(str, last_str) == 0) return ESP01_OK;
 8005082:	4906      	ldr	r1, [pc, #24]	@ (800509c <wait_for_string+0x2c>)
 8005084:	4628      	mov	r0, r5
 8005086:	f7fb f8ab 	bl	80001e0 <strcmp>
 800508a:	2800      	cmp	r0, #0
 800508c:	d1f5      	bne.n	800507a <wait_for_string+0xa>
 800508e:	2000      	movs	r0, #0
 8005090:	e000      	b.n	8005094 <wait_for_string+0x24>
    }
    return ESP01_Error;
 8005092:	2001      	movs	r0, #1
}
 8005094:	bd38      	pop	{r3, r4, r5, pc}
 8005096:	bf00      	nop
 8005098:	200002ac 	.word	0x200002ac
 800509c:	20002014 	.word	0x20002014

080050a0 <esp01_reset>:

// Public functions

esp01_result_t esp01_reset(esp01_handler_t *esp01) {
 80050a0:	b538      	push	{r3, r4, r5, lr}
 80050a2:	4604      	mov	r4, r0
    esp01_result_t res = ESP01_OK;

    sprintf(txbuf, "AT+RST\r\n");
 80050a4:	4d0e      	ldr	r5, [pc, #56]	@ (80050e0 <esp01_reset+0x40>)
 80050a6:	4a0f      	ldr	r2, [pc, #60]	@ (80050e4 <esp01_reset+0x44>)
 80050a8:	462b      	mov	r3, r5
 80050aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80050ac:	c303      	stmia	r3!, {r0, r1}
 80050ae:	701a      	strb	r2, [r3, #0]

    if (HAL_UART_Transmit(esp01->uart, (uint8_t *)&txbuf, strlen(txbuf), 100) != HAL_OK) {
 80050b0:	4628      	mov	r0, r5
 80050b2:	f7fb f89f 	bl	80001f4 <strlen>
 80050b6:	2364      	movs	r3, #100	@ 0x64
 80050b8:	b282      	uxth	r2, r0
 80050ba:	4629      	mov	r1, r5
 80050bc:	6820      	ldr	r0, [r4, #0]
 80050be:	f7fd fc4c 	bl	800295a <HAL_UART_Transmit>
 80050c2:	b930      	cbnz	r0, 80050d2 <esp01_reset+0x32>
        printf("HAL Transmit Error\n");
        return ESP01_Error;
    }

    if (wait_for_string("OK", 5000) != ESP01_OK) return ESP01_Error;
 80050c4:	f241 3188 	movw	r1, #5000	@ 0x1388
 80050c8:	4807      	ldr	r0, [pc, #28]	@ (80050e8 <esp01_reset+0x48>)
 80050ca:	f7ff ffd1 	bl	8005070 <wait_for_string>
 80050ce:	b928      	cbnz	r0, 80050dc <esp01_reset+0x3c>

    return res;
}
 80050d0:	bd38      	pop	{r3, r4, r5, pc}
        printf("HAL Transmit Error\n");
 80050d2:	4806      	ldr	r0, [pc, #24]	@ (80050ec <esp01_reset+0x4c>)
 80050d4:	f000 f99c 	bl	8005410 <puts>
        return ESP01_Error;
 80050d8:	2001      	movs	r0, #1
 80050da:	e7f9      	b.n	80050d0 <esp01_reset+0x30>
    if (wait_for_string("OK", 5000) != ESP01_OK) return ESP01_Error;
 80050dc:	2001      	movs	r0, #1
 80050de:	e7f7      	b.n	80050d0 <esp01_reset+0x30>
 80050e0:	20001f94 	.word	0x20001f94
 80050e4:	08006208 	.word	0x08006208
 80050e8:	08006228 	.word	0x08006228
 80050ec:	08006214 	.word	0x08006214

080050f0 <esp01_init>:

esp01_result_t esp01_init(esp01_handler_t *esp01, UART_HandleTypeDef *uart) {
 80050f0:	b538      	push	{r3, r4, r5, lr}
 80050f2:	4604      	mov	r4, r0
    esp01_result_t res = ESP01_OK;

    esp01->uart = uart;
 80050f4:	6001      	str	r1, [r0, #0]

    sprintf(txbuf, "AT\r\n");
 80050f6:	4d1a      	ldr	r5, [pc, #104]	@ (8005160 <esp01_init+0x70>)
 80050f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005164 <esp01_init+0x74>)
 80050fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80050fe:	6028      	str	r0, [r5, #0]
 8005100:	7129      	strb	r1, [r5, #4]

    if (HAL_UART_Transmit(esp01->uart, (uint8_t *)&txbuf, strlen(txbuf), 100) != HAL_OK) {
 8005102:	4628      	mov	r0, r5
 8005104:	f7fb f876 	bl	80001f4 <strlen>
 8005108:	2364      	movs	r3, #100	@ 0x64
 800510a:	b282      	uxth	r2, r0
 800510c:	4629      	mov	r1, r5
 800510e:	6820      	ldr	r0, [r4, #0]
 8005110:	f7fd fc23 	bl	800295a <HAL_UART_Transmit>
 8005114:	b938      	cbnz	r0, 8005126 <esp01_init+0x36>
        printf("HAL Transmit Error\n");
        return ESP01_Error;
    }

    if (wait_for_string("OK", 1000) != ESP01_OK) return ESP01_Error;
 8005116:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800511a:	4813      	ldr	r0, [pc, #76]	@ (8005168 <esp01_init+0x78>)
 800511c:	f7ff ffa8 	bl	8005070 <wait_for_string>
 8005120:	b130      	cbz	r0, 8005130 <esp01_init+0x40>
 8005122:	2001      	movs	r0, #1
 8005124:	e003      	b.n	800512e <esp01_init+0x3e>
        printf("HAL Transmit Error\n");
 8005126:	4811      	ldr	r0, [pc, #68]	@ (800516c <esp01_init+0x7c>)
 8005128:	f000 f972 	bl	8005410 <puts>
        return ESP01_Error;
 800512c:	2001      	movs	r0, #1
    HAL_UART_Transmit(esp01->uart, (uint8_t *)&txbuf, strlen(txbuf), 100);

    if (wait_for_string("OK", 1000) != ESP01_OK) return ESP01_Error;

    return res;
}
 800512e:	bd38      	pop	{r3, r4, r5, pc}
    sprintf(txbuf, "AT+GMR\r\n");
 8005130:	4d0b      	ldr	r5, [pc, #44]	@ (8005160 <esp01_init+0x70>)
 8005132:	4a0f      	ldr	r2, [pc, #60]	@ (8005170 <esp01_init+0x80>)
 8005134:	462b      	mov	r3, r5
 8005136:	ca07      	ldmia	r2, {r0, r1, r2}
 8005138:	c303      	stmia	r3!, {r0, r1}
 800513a:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(esp01->uart, (uint8_t *)&txbuf, strlen(txbuf), 100);
 800513c:	4628      	mov	r0, r5
 800513e:	f7fb f859 	bl	80001f4 <strlen>
 8005142:	2364      	movs	r3, #100	@ 0x64
 8005144:	b282      	uxth	r2, r0
 8005146:	4629      	mov	r1, r5
 8005148:	6820      	ldr	r0, [r4, #0]
 800514a:	f7fd fc06 	bl	800295a <HAL_UART_Transmit>
    if (wait_for_string("OK", 1000) != ESP01_OK) return ESP01_Error;
 800514e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005152:	4805      	ldr	r0, [pc, #20]	@ (8005168 <esp01_init+0x78>)
 8005154:	f7ff ff8c 	bl	8005070 <wait_for_string>
 8005158:	2800      	cmp	r0, #0
 800515a:	d0e8      	beq.n	800512e <esp01_init+0x3e>
 800515c:	2001      	movs	r0, #1
 800515e:	e7e6      	b.n	800512e <esp01_init+0x3e>
 8005160:	20001f94 	.word	0x20001f94
 8005164:	0800622c 	.word	0x0800622c
 8005168:	08006228 	.word	0x08006228
 800516c:	08006214 	.word	0x08006214
 8005170:	08006234 	.word	0x08006234

08005174 <esp01_receive>:

void esp01_receive(char ch) {
 8005174:	b510      	push	{r4, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	f88d 0007 	strb.w	r0, [sp, #7]

    static char str[256] = "";

    switch (ch) {
 800517c:	b2c3      	uxtb	r3, r0
 800517e:	2b0a      	cmp	r3, #10
 8005180:	d00d      	beq.n	800519e <esp01_receive+0x2a>
 8005182:	2b0d      	cmp	r3, #13
 8005184:	d10d      	bne.n	80051a2 <esp01_receive+0x2e>
    case '\r':
        printf("Got string: %s\n", str);
 8005186:	4c0a      	ldr	r4, [pc, #40]	@ (80051b0 <esp01_receive+0x3c>)
 8005188:	4621      	mov	r1, r4
 800518a:	480a      	ldr	r0, [pc, #40]	@ (80051b4 <esp01_receive+0x40>)
 800518c:	f000 f8d8 	bl	8005340 <iprintf>
        strncpy(last_str, str, MAX_STR - 1);
 8005190:	227f      	movs	r2, #127	@ 0x7f
 8005192:	4621      	mov	r1, r4
 8005194:	4808      	ldr	r0, [pc, #32]	@ (80051b8 <esp01_receive+0x44>)
 8005196:	f000 fa36 	bl	8005606 <strncpy>
        str[0] = 0;
 800519a:	2300      	movs	r3, #0
 800519c:	7023      	strb	r3, [r4, #0]
        break;
    default:
        strncat(str, &ch, 1);
    }

}
 800519e:	b002      	add	sp, #8
 80051a0:	bd10      	pop	{r4, pc}
        strncat(str, &ch, 1);
 80051a2:	2201      	movs	r2, #1
 80051a4:	f10d 0107 	add.w	r1, sp, #7
 80051a8:	4801      	ldr	r0, [pc, #4]	@ (80051b0 <esp01_receive+0x3c>)
 80051aa:	f000 fa19 	bl	80055e0 <strncat>
}
 80051ae:	e7f6      	b.n	800519e <esp01_receive+0x2a>
 80051b0:	20001e94 	.word	0x20001e94
 80051b4:	08006240 	.word	0x08006240
 80051b8:	20002014 	.word	0x20002014

080051bc <std>:
 80051bc:	2300      	movs	r3, #0
 80051be:	b510      	push	{r4, lr}
 80051c0:	4604      	mov	r4, r0
 80051c2:	e9c0 3300 	strd	r3, r3, [r0]
 80051c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051ca:	6083      	str	r3, [r0, #8]
 80051cc:	8181      	strh	r1, [r0, #12]
 80051ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80051d0:	81c2      	strh	r2, [r0, #14]
 80051d2:	6183      	str	r3, [r0, #24]
 80051d4:	4619      	mov	r1, r3
 80051d6:	2208      	movs	r2, #8
 80051d8:	305c      	adds	r0, #92	@ 0x5c
 80051da:	f000 f9f9 	bl	80055d0 <memset>
 80051de:	4b0d      	ldr	r3, [pc, #52]	@ (8005214 <std+0x58>)
 80051e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80051e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005218 <std+0x5c>)
 80051e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80051e6:	4b0d      	ldr	r3, [pc, #52]	@ (800521c <std+0x60>)
 80051e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80051ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005220 <std+0x64>)
 80051ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80051ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005224 <std+0x68>)
 80051f0:	6224      	str	r4, [r4, #32]
 80051f2:	429c      	cmp	r4, r3
 80051f4:	d006      	beq.n	8005204 <std+0x48>
 80051f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80051fa:	4294      	cmp	r4, r2
 80051fc:	d002      	beq.n	8005204 <std+0x48>
 80051fe:	33d0      	adds	r3, #208	@ 0xd0
 8005200:	429c      	cmp	r4, r3
 8005202:	d105      	bne.n	8005210 <std+0x54>
 8005204:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800520c:	f000 ba7e 	b.w	800570c <__retarget_lock_init_recursive>
 8005210:	bd10      	pop	{r4, pc}
 8005212:	bf00      	nop
 8005214:	08005421 	.word	0x08005421
 8005218:	08005443 	.word	0x08005443
 800521c:	0800547b 	.word	0x0800547b
 8005220:	0800549f 	.word	0x0800549f
 8005224:	20002094 	.word	0x20002094

08005228 <stdio_exit_handler>:
 8005228:	4a02      	ldr	r2, [pc, #8]	@ (8005234 <stdio_exit_handler+0xc>)
 800522a:	4903      	ldr	r1, [pc, #12]	@ (8005238 <stdio_exit_handler+0x10>)
 800522c:	4803      	ldr	r0, [pc, #12]	@ (800523c <stdio_exit_handler+0x14>)
 800522e:	f000 b869 	b.w	8005304 <_fwalk_sglue>
 8005232:	bf00      	nop
 8005234:	200000f8 	.word	0x200000f8
 8005238:	08005fad 	.word	0x08005fad
 800523c:	20000108 	.word	0x20000108

08005240 <cleanup_stdio>:
 8005240:	6841      	ldr	r1, [r0, #4]
 8005242:	4b0c      	ldr	r3, [pc, #48]	@ (8005274 <cleanup_stdio+0x34>)
 8005244:	4299      	cmp	r1, r3
 8005246:	b510      	push	{r4, lr}
 8005248:	4604      	mov	r4, r0
 800524a:	d001      	beq.n	8005250 <cleanup_stdio+0x10>
 800524c:	f000 feae 	bl	8005fac <_fflush_r>
 8005250:	68a1      	ldr	r1, [r4, #8]
 8005252:	4b09      	ldr	r3, [pc, #36]	@ (8005278 <cleanup_stdio+0x38>)
 8005254:	4299      	cmp	r1, r3
 8005256:	d002      	beq.n	800525e <cleanup_stdio+0x1e>
 8005258:	4620      	mov	r0, r4
 800525a:	f000 fea7 	bl	8005fac <_fflush_r>
 800525e:	68e1      	ldr	r1, [r4, #12]
 8005260:	4b06      	ldr	r3, [pc, #24]	@ (800527c <cleanup_stdio+0x3c>)
 8005262:	4299      	cmp	r1, r3
 8005264:	d004      	beq.n	8005270 <cleanup_stdio+0x30>
 8005266:	4620      	mov	r0, r4
 8005268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800526c:	f000 be9e 	b.w	8005fac <_fflush_r>
 8005270:	bd10      	pop	{r4, pc}
 8005272:	bf00      	nop
 8005274:	20002094 	.word	0x20002094
 8005278:	200020fc 	.word	0x200020fc
 800527c:	20002164 	.word	0x20002164

08005280 <global_stdio_init.part.0>:
 8005280:	b510      	push	{r4, lr}
 8005282:	4b0b      	ldr	r3, [pc, #44]	@ (80052b0 <global_stdio_init.part.0+0x30>)
 8005284:	4c0b      	ldr	r4, [pc, #44]	@ (80052b4 <global_stdio_init.part.0+0x34>)
 8005286:	4a0c      	ldr	r2, [pc, #48]	@ (80052b8 <global_stdio_init.part.0+0x38>)
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	4620      	mov	r0, r4
 800528c:	2200      	movs	r2, #0
 800528e:	2104      	movs	r1, #4
 8005290:	f7ff ff94 	bl	80051bc <std>
 8005294:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005298:	2201      	movs	r2, #1
 800529a:	2109      	movs	r1, #9
 800529c:	f7ff ff8e 	bl	80051bc <std>
 80052a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80052a4:	2202      	movs	r2, #2
 80052a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052aa:	2112      	movs	r1, #18
 80052ac:	f7ff bf86 	b.w	80051bc <std>
 80052b0:	200021cc 	.word	0x200021cc
 80052b4:	20002094 	.word	0x20002094
 80052b8:	08005229 	.word	0x08005229

080052bc <__sfp_lock_acquire>:
 80052bc:	4801      	ldr	r0, [pc, #4]	@ (80052c4 <__sfp_lock_acquire+0x8>)
 80052be:	f000 ba26 	b.w	800570e <__retarget_lock_acquire_recursive>
 80052c2:	bf00      	nop
 80052c4:	200021d5 	.word	0x200021d5

080052c8 <__sfp_lock_release>:
 80052c8:	4801      	ldr	r0, [pc, #4]	@ (80052d0 <__sfp_lock_release+0x8>)
 80052ca:	f000 ba21 	b.w	8005710 <__retarget_lock_release_recursive>
 80052ce:	bf00      	nop
 80052d0:	200021d5 	.word	0x200021d5

080052d4 <__sinit>:
 80052d4:	b510      	push	{r4, lr}
 80052d6:	4604      	mov	r4, r0
 80052d8:	f7ff fff0 	bl	80052bc <__sfp_lock_acquire>
 80052dc:	6a23      	ldr	r3, [r4, #32]
 80052de:	b11b      	cbz	r3, 80052e8 <__sinit+0x14>
 80052e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052e4:	f7ff bff0 	b.w	80052c8 <__sfp_lock_release>
 80052e8:	4b04      	ldr	r3, [pc, #16]	@ (80052fc <__sinit+0x28>)
 80052ea:	6223      	str	r3, [r4, #32]
 80052ec:	4b04      	ldr	r3, [pc, #16]	@ (8005300 <__sinit+0x2c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1f5      	bne.n	80052e0 <__sinit+0xc>
 80052f4:	f7ff ffc4 	bl	8005280 <global_stdio_init.part.0>
 80052f8:	e7f2      	b.n	80052e0 <__sinit+0xc>
 80052fa:	bf00      	nop
 80052fc:	08005241 	.word	0x08005241
 8005300:	200021cc 	.word	0x200021cc

08005304 <_fwalk_sglue>:
 8005304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005308:	4607      	mov	r7, r0
 800530a:	4688      	mov	r8, r1
 800530c:	4614      	mov	r4, r2
 800530e:	2600      	movs	r6, #0
 8005310:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005314:	f1b9 0901 	subs.w	r9, r9, #1
 8005318:	d505      	bpl.n	8005326 <_fwalk_sglue+0x22>
 800531a:	6824      	ldr	r4, [r4, #0]
 800531c:	2c00      	cmp	r4, #0
 800531e:	d1f7      	bne.n	8005310 <_fwalk_sglue+0xc>
 8005320:	4630      	mov	r0, r6
 8005322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005326:	89ab      	ldrh	r3, [r5, #12]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d907      	bls.n	800533c <_fwalk_sglue+0x38>
 800532c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005330:	3301      	adds	r3, #1
 8005332:	d003      	beq.n	800533c <_fwalk_sglue+0x38>
 8005334:	4629      	mov	r1, r5
 8005336:	4638      	mov	r0, r7
 8005338:	47c0      	blx	r8
 800533a:	4306      	orrs	r6, r0
 800533c:	3568      	adds	r5, #104	@ 0x68
 800533e:	e7e9      	b.n	8005314 <_fwalk_sglue+0x10>

08005340 <iprintf>:
 8005340:	b40f      	push	{r0, r1, r2, r3}
 8005342:	b507      	push	{r0, r1, r2, lr}
 8005344:	4906      	ldr	r1, [pc, #24]	@ (8005360 <iprintf+0x20>)
 8005346:	ab04      	add	r3, sp, #16
 8005348:	6808      	ldr	r0, [r1, #0]
 800534a:	f853 2b04 	ldr.w	r2, [r3], #4
 800534e:	6881      	ldr	r1, [r0, #8]
 8005350:	9301      	str	r3, [sp, #4]
 8005352:	f000 fb01 	bl	8005958 <_vfiprintf_r>
 8005356:	b003      	add	sp, #12
 8005358:	f85d eb04 	ldr.w	lr, [sp], #4
 800535c:	b004      	add	sp, #16
 800535e:	4770      	bx	lr
 8005360:	20000104 	.word	0x20000104

08005364 <_puts_r>:
 8005364:	6a03      	ldr	r3, [r0, #32]
 8005366:	b570      	push	{r4, r5, r6, lr}
 8005368:	6884      	ldr	r4, [r0, #8]
 800536a:	4605      	mov	r5, r0
 800536c:	460e      	mov	r6, r1
 800536e:	b90b      	cbnz	r3, 8005374 <_puts_r+0x10>
 8005370:	f7ff ffb0 	bl	80052d4 <__sinit>
 8005374:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005376:	07db      	lsls	r3, r3, #31
 8005378:	d405      	bmi.n	8005386 <_puts_r+0x22>
 800537a:	89a3      	ldrh	r3, [r4, #12]
 800537c:	0598      	lsls	r0, r3, #22
 800537e:	d402      	bmi.n	8005386 <_puts_r+0x22>
 8005380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005382:	f000 f9c4 	bl	800570e <__retarget_lock_acquire_recursive>
 8005386:	89a3      	ldrh	r3, [r4, #12]
 8005388:	0719      	lsls	r1, r3, #28
 800538a:	d502      	bpl.n	8005392 <_puts_r+0x2e>
 800538c:	6923      	ldr	r3, [r4, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d135      	bne.n	80053fe <_puts_r+0x9a>
 8005392:	4621      	mov	r1, r4
 8005394:	4628      	mov	r0, r5
 8005396:	f000 f8c5 	bl	8005524 <__swsetup_r>
 800539a:	b380      	cbz	r0, 80053fe <_puts_r+0x9a>
 800539c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80053a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80053a2:	07da      	lsls	r2, r3, #31
 80053a4:	d405      	bmi.n	80053b2 <_puts_r+0x4e>
 80053a6:	89a3      	ldrh	r3, [r4, #12]
 80053a8:	059b      	lsls	r3, r3, #22
 80053aa:	d402      	bmi.n	80053b2 <_puts_r+0x4e>
 80053ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053ae:	f000 f9af 	bl	8005710 <__retarget_lock_release_recursive>
 80053b2:	4628      	mov	r0, r5
 80053b4:	bd70      	pop	{r4, r5, r6, pc}
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	da04      	bge.n	80053c4 <_puts_r+0x60>
 80053ba:	69a2      	ldr	r2, [r4, #24]
 80053bc:	429a      	cmp	r2, r3
 80053be:	dc17      	bgt.n	80053f0 <_puts_r+0x8c>
 80053c0:	290a      	cmp	r1, #10
 80053c2:	d015      	beq.n	80053f0 <_puts_r+0x8c>
 80053c4:	6823      	ldr	r3, [r4, #0]
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	6022      	str	r2, [r4, #0]
 80053ca:	7019      	strb	r1, [r3, #0]
 80053cc:	68a3      	ldr	r3, [r4, #8]
 80053ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80053d2:	3b01      	subs	r3, #1
 80053d4:	60a3      	str	r3, [r4, #8]
 80053d6:	2900      	cmp	r1, #0
 80053d8:	d1ed      	bne.n	80053b6 <_puts_r+0x52>
 80053da:	2b00      	cmp	r3, #0
 80053dc:	da11      	bge.n	8005402 <_puts_r+0x9e>
 80053de:	4622      	mov	r2, r4
 80053e0:	210a      	movs	r1, #10
 80053e2:	4628      	mov	r0, r5
 80053e4:	f000 f85f 	bl	80054a6 <__swbuf_r>
 80053e8:	3001      	adds	r0, #1
 80053ea:	d0d7      	beq.n	800539c <_puts_r+0x38>
 80053ec:	250a      	movs	r5, #10
 80053ee:	e7d7      	b.n	80053a0 <_puts_r+0x3c>
 80053f0:	4622      	mov	r2, r4
 80053f2:	4628      	mov	r0, r5
 80053f4:	f000 f857 	bl	80054a6 <__swbuf_r>
 80053f8:	3001      	adds	r0, #1
 80053fa:	d1e7      	bne.n	80053cc <_puts_r+0x68>
 80053fc:	e7ce      	b.n	800539c <_puts_r+0x38>
 80053fe:	3e01      	subs	r6, #1
 8005400:	e7e4      	b.n	80053cc <_puts_r+0x68>
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	6022      	str	r2, [r4, #0]
 8005408:	220a      	movs	r2, #10
 800540a:	701a      	strb	r2, [r3, #0]
 800540c:	e7ee      	b.n	80053ec <_puts_r+0x88>
	...

08005410 <puts>:
 8005410:	4b02      	ldr	r3, [pc, #8]	@ (800541c <puts+0xc>)
 8005412:	4601      	mov	r1, r0
 8005414:	6818      	ldr	r0, [r3, #0]
 8005416:	f7ff bfa5 	b.w	8005364 <_puts_r>
 800541a:	bf00      	nop
 800541c:	20000104 	.word	0x20000104

08005420 <__sread>:
 8005420:	b510      	push	{r4, lr}
 8005422:	460c      	mov	r4, r1
 8005424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005428:	f000 f922 	bl	8005670 <_read_r>
 800542c:	2800      	cmp	r0, #0
 800542e:	bfab      	itete	ge
 8005430:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005432:	89a3      	ldrhlt	r3, [r4, #12]
 8005434:	181b      	addge	r3, r3, r0
 8005436:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800543a:	bfac      	ite	ge
 800543c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800543e:	81a3      	strhlt	r3, [r4, #12]
 8005440:	bd10      	pop	{r4, pc}

08005442 <__swrite>:
 8005442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005446:	461f      	mov	r7, r3
 8005448:	898b      	ldrh	r3, [r1, #12]
 800544a:	05db      	lsls	r3, r3, #23
 800544c:	4605      	mov	r5, r0
 800544e:	460c      	mov	r4, r1
 8005450:	4616      	mov	r6, r2
 8005452:	d505      	bpl.n	8005460 <__swrite+0x1e>
 8005454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005458:	2302      	movs	r3, #2
 800545a:	2200      	movs	r2, #0
 800545c:	f000 f8f6 	bl	800564c <_lseek_r>
 8005460:	89a3      	ldrh	r3, [r4, #12]
 8005462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005466:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800546a:	81a3      	strh	r3, [r4, #12]
 800546c:	4632      	mov	r2, r6
 800546e:	463b      	mov	r3, r7
 8005470:	4628      	mov	r0, r5
 8005472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005476:	f000 b90d 	b.w	8005694 <_write_r>

0800547a <__sseek>:
 800547a:	b510      	push	{r4, lr}
 800547c:	460c      	mov	r4, r1
 800547e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005482:	f000 f8e3 	bl	800564c <_lseek_r>
 8005486:	1c43      	adds	r3, r0, #1
 8005488:	89a3      	ldrh	r3, [r4, #12]
 800548a:	bf15      	itete	ne
 800548c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800548e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005492:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005496:	81a3      	strheq	r3, [r4, #12]
 8005498:	bf18      	it	ne
 800549a:	81a3      	strhne	r3, [r4, #12]
 800549c:	bd10      	pop	{r4, pc}

0800549e <__sclose>:
 800549e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054a2:	f000 b8c3 	b.w	800562c <_close_r>

080054a6 <__swbuf_r>:
 80054a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a8:	460e      	mov	r6, r1
 80054aa:	4614      	mov	r4, r2
 80054ac:	4605      	mov	r5, r0
 80054ae:	b118      	cbz	r0, 80054b8 <__swbuf_r+0x12>
 80054b0:	6a03      	ldr	r3, [r0, #32]
 80054b2:	b90b      	cbnz	r3, 80054b8 <__swbuf_r+0x12>
 80054b4:	f7ff ff0e 	bl	80052d4 <__sinit>
 80054b8:	69a3      	ldr	r3, [r4, #24]
 80054ba:	60a3      	str	r3, [r4, #8]
 80054bc:	89a3      	ldrh	r3, [r4, #12]
 80054be:	071a      	lsls	r2, r3, #28
 80054c0:	d501      	bpl.n	80054c6 <__swbuf_r+0x20>
 80054c2:	6923      	ldr	r3, [r4, #16]
 80054c4:	b943      	cbnz	r3, 80054d8 <__swbuf_r+0x32>
 80054c6:	4621      	mov	r1, r4
 80054c8:	4628      	mov	r0, r5
 80054ca:	f000 f82b 	bl	8005524 <__swsetup_r>
 80054ce:	b118      	cbz	r0, 80054d8 <__swbuf_r+0x32>
 80054d0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80054d4:	4638      	mov	r0, r7
 80054d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	6922      	ldr	r2, [r4, #16]
 80054dc:	1a98      	subs	r0, r3, r2
 80054de:	6963      	ldr	r3, [r4, #20]
 80054e0:	b2f6      	uxtb	r6, r6
 80054e2:	4283      	cmp	r3, r0
 80054e4:	4637      	mov	r7, r6
 80054e6:	dc05      	bgt.n	80054f4 <__swbuf_r+0x4e>
 80054e8:	4621      	mov	r1, r4
 80054ea:	4628      	mov	r0, r5
 80054ec:	f000 fd5e 	bl	8005fac <_fflush_r>
 80054f0:	2800      	cmp	r0, #0
 80054f2:	d1ed      	bne.n	80054d0 <__swbuf_r+0x2a>
 80054f4:	68a3      	ldr	r3, [r4, #8]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	60a3      	str	r3, [r4, #8]
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	6022      	str	r2, [r4, #0]
 8005500:	701e      	strb	r6, [r3, #0]
 8005502:	6962      	ldr	r2, [r4, #20]
 8005504:	1c43      	adds	r3, r0, #1
 8005506:	429a      	cmp	r2, r3
 8005508:	d004      	beq.n	8005514 <__swbuf_r+0x6e>
 800550a:	89a3      	ldrh	r3, [r4, #12]
 800550c:	07db      	lsls	r3, r3, #31
 800550e:	d5e1      	bpl.n	80054d4 <__swbuf_r+0x2e>
 8005510:	2e0a      	cmp	r6, #10
 8005512:	d1df      	bne.n	80054d4 <__swbuf_r+0x2e>
 8005514:	4621      	mov	r1, r4
 8005516:	4628      	mov	r0, r5
 8005518:	f000 fd48 	bl	8005fac <_fflush_r>
 800551c:	2800      	cmp	r0, #0
 800551e:	d0d9      	beq.n	80054d4 <__swbuf_r+0x2e>
 8005520:	e7d6      	b.n	80054d0 <__swbuf_r+0x2a>
	...

08005524 <__swsetup_r>:
 8005524:	b538      	push	{r3, r4, r5, lr}
 8005526:	4b29      	ldr	r3, [pc, #164]	@ (80055cc <__swsetup_r+0xa8>)
 8005528:	4605      	mov	r5, r0
 800552a:	6818      	ldr	r0, [r3, #0]
 800552c:	460c      	mov	r4, r1
 800552e:	b118      	cbz	r0, 8005538 <__swsetup_r+0x14>
 8005530:	6a03      	ldr	r3, [r0, #32]
 8005532:	b90b      	cbnz	r3, 8005538 <__swsetup_r+0x14>
 8005534:	f7ff fece 	bl	80052d4 <__sinit>
 8005538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800553c:	0719      	lsls	r1, r3, #28
 800553e:	d422      	bmi.n	8005586 <__swsetup_r+0x62>
 8005540:	06da      	lsls	r2, r3, #27
 8005542:	d407      	bmi.n	8005554 <__swsetup_r+0x30>
 8005544:	2209      	movs	r2, #9
 8005546:	602a      	str	r2, [r5, #0]
 8005548:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800554c:	81a3      	strh	r3, [r4, #12]
 800554e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005552:	e033      	b.n	80055bc <__swsetup_r+0x98>
 8005554:	0758      	lsls	r0, r3, #29
 8005556:	d512      	bpl.n	800557e <__swsetup_r+0x5a>
 8005558:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800555a:	b141      	cbz	r1, 800556e <__swsetup_r+0x4a>
 800555c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005560:	4299      	cmp	r1, r3
 8005562:	d002      	beq.n	800556a <__swsetup_r+0x46>
 8005564:	4628      	mov	r0, r5
 8005566:	f000 f8d5 	bl	8005714 <_free_r>
 800556a:	2300      	movs	r3, #0
 800556c:	6363      	str	r3, [r4, #52]	@ 0x34
 800556e:	89a3      	ldrh	r3, [r4, #12]
 8005570:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005574:	81a3      	strh	r3, [r4, #12]
 8005576:	2300      	movs	r3, #0
 8005578:	6063      	str	r3, [r4, #4]
 800557a:	6923      	ldr	r3, [r4, #16]
 800557c:	6023      	str	r3, [r4, #0]
 800557e:	89a3      	ldrh	r3, [r4, #12]
 8005580:	f043 0308 	orr.w	r3, r3, #8
 8005584:	81a3      	strh	r3, [r4, #12]
 8005586:	6923      	ldr	r3, [r4, #16]
 8005588:	b94b      	cbnz	r3, 800559e <__swsetup_r+0x7a>
 800558a:	89a3      	ldrh	r3, [r4, #12]
 800558c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005594:	d003      	beq.n	800559e <__swsetup_r+0x7a>
 8005596:	4621      	mov	r1, r4
 8005598:	4628      	mov	r0, r5
 800559a:	f000 fd55 	bl	8006048 <__smakebuf_r>
 800559e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055a2:	f013 0201 	ands.w	r2, r3, #1
 80055a6:	d00a      	beq.n	80055be <__swsetup_r+0x9a>
 80055a8:	2200      	movs	r2, #0
 80055aa:	60a2      	str	r2, [r4, #8]
 80055ac:	6962      	ldr	r2, [r4, #20]
 80055ae:	4252      	negs	r2, r2
 80055b0:	61a2      	str	r2, [r4, #24]
 80055b2:	6922      	ldr	r2, [r4, #16]
 80055b4:	b942      	cbnz	r2, 80055c8 <__swsetup_r+0xa4>
 80055b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80055ba:	d1c5      	bne.n	8005548 <__swsetup_r+0x24>
 80055bc:	bd38      	pop	{r3, r4, r5, pc}
 80055be:	0799      	lsls	r1, r3, #30
 80055c0:	bf58      	it	pl
 80055c2:	6962      	ldrpl	r2, [r4, #20]
 80055c4:	60a2      	str	r2, [r4, #8]
 80055c6:	e7f4      	b.n	80055b2 <__swsetup_r+0x8e>
 80055c8:	2000      	movs	r0, #0
 80055ca:	e7f7      	b.n	80055bc <__swsetup_r+0x98>
 80055cc:	20000104 	.word	0x20000104

080055d0 <memset>:
 80055d0:	4402      	add	r2, r0
 80055d2:	4603      	mov	r3, r0
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d100      	bne.n	80055da <memset+0xa>
 80055d8:	4770      	bx	lr
 80055da:	f803 1b01 	strb.w	r1, [r3], #1
 80055de:	e7f9      	b.n	80055d4 <memset+0x4>

080055e0 <strncat>:
 80055e0:	b530      	push	{r4, r5, lr}
 80055e2:	4604      	mov	r4, r0
 80055e4:	7825      	ldrb	r5, [r4, #0]
 80055e6:	4623      	mov	r3, r4
 80055e8:	3401      	adds	r4, #1
 80055ea:	2d00      	cmp	r5, #0
 80055ec:	d1fa      	bne.n	80055e4 <strncat+0x4>
 80055ee:	3a01      	subs	r2, #1
 80055f0:	d304      	bcc.n	80055fc <strncat+0x1c>
 80055f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055f6:	f803 4b01 	strb.w	r4, [r3], #1
 80055fa:	b904      	cbnz	r4, 80055fe <strncat+0x1e>
 80055fc:	bd30      	pop	{r4, r5, pc}
 80055fe:	2a00      	cmp	r2, #0
 8005600:	d1f5      	bne.n	80055ee <strncat+0xe>
 8005602:	701a      	strb	r2, [r3, #0]
 8005604:	e7f3      	b.n	80055ee <strncat+0xe>

08005606 <strncpy>:
 8005606:	b510      	push	{r4, lr}
 8005608:	3901      	subs	r1, #1
 800560a:	4603      	mov	r3, r0
 800560c:	b132      	cbz	r2, 800561c <strncpy+0x16>
 800560e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005612:	f803 4b01 	strb.w	r4, [r3], #1
 8005616:	3a01      	subs	r2, #1
 8005618:	2c00      	cmp	r4, #0
 800561a:	d1f7      	bne.n	800560c <strncpy+0x6>
 800561c:	441a      	add	r2, r3
 800561e:	2100      	movs	r1, #0
 8005620:	4293      	cmp	r3, r2
 8005622:	d100      	bne.n	8005626 <strncpy+0x20>
 8005624:	bd10      	pop	{r4, pc}
 8005626:	f803 1b01 	strb.w	r1, [r3], #1
 800562a:	e7f9      	b.n	8005620 <strncpy+0x1a>

0800562c <_close_r>:
 800562c:	b538      	push	{r3, r4, r5, lr}
 800562e:	4d06      	ldr	r5, [pc, #24]	@ (8005648 <_close_r+0x1c>)
 8005630:	2300      	movs	r3, #0
 8005632:	4604      	mov	r4, r0
 8005634:	4608      	mov	r0, r1
 8005636:	602b      	str	r3, [r5, #0]
 8005638:	f7fb fa28 	bl	8000a8c <_close>
 800563c:	1c43      	adds	r3, r0, #1
 800563e:	d102      	bne.n	8005646 <_close_r+0x1a>
 8005640:	682b      	ldr	r3, [r5, #0]
 8005642:	b103      	cbz	r3, 8005646 <_close_r+0x1a>
 8005644:	6023      	str	r3, [r4, #0]
 8005646:	bd38      	pop	{r3, r4, r5, pc}
 8005648:	200021d0 	.word	0x200021d0

0800564c <_lseek_r>:
 800564c:	b538      	push	{r3, r4, r5, lr}
 800564e:	4d07      	ldr	r5, [pc, #28]	@ (800566c <_lseek_r+0x20>)
 8005650:	4604      	mov	r4, r0
 8005652:	4608      	mov	r0, r1
 8005654:	4611      	mov	r1, r2
 8005656:	2200      	movs	r2, #0
 8005658:	602a      	str	r2, [r5, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	f7fb fa20 	bl	8000aa0 <_lseek>
 8005660:	1c43      	adds	r3, r0, #1
 8005662:	d102      	bne.n	800566a <_lseek_r+0x1e>
 8005664:	682b      	ldr	r3, [r5, #0]
 8005666:	b103      	cbz	r3, 800566a <_lseek_r+0x1e>
 8005668:	6023      	str	r3, [r4, #0]
 800566a:	bd38      	pop	{r3, r4, r5, pc}
 800566c:	200021d0 	.word	0x200021d0

08005670 <_read_r>:
 8005670:	b538      	push	{r3, r4, r5, lr}
 8005672:	4d07      	ldr	r5, [pc, #28]	@ (8005690 <_read_r+0x20>)
 8005674:	4604      	mov	r4, r0
 8005676:	4608      	mov	r0, r1
 8005678:	4611      	mov	r1, r2
 800567a:	2200      	movs	r2, #0
 800567c:	602a      	str	r2, [r5, #0]
 800567e:	461a      	mov	r2, r3
 8005680:	f7fb f9f4 	bl	8000a6c <_read>
 8005684:	1c43      	adds	r3, r0, #1
 8005686:	d102      	bne.n	800568e <_read_r+0x1e>
 8005688:	682b      	ldr	r3, [r5, #0]
 800568a:	b103      	cbz	r3, 800568e <_read_r+0x1e>
 800568c:	6023      	str	r3, [r4, #0]
 800568e:	bd38      	pop	{r3, r4, r5, pc}
 8005690:	200021d0 	.word	0x200021d0

08005694 <_write_r>:
 8005694:	b538      	push	{r3, r4, r5, lr}
 8005696:	4d07      	ldr	r5, [pc, #28]	@ (80056b4 <_write_r+0x20>)
 8005698:	4604      	mov	r4, r0
 800569a:	4608      	mov	r0, r1
 800569c:	4611      	mov	r1, r2
 800569e:	2200      	movs	r2, #0
 80056a0:	602a      	str	r2, [r5, #0]
 80056a2:	461a      	mov	r2, r3
 80056a4:	f7fa ffe8 	bl	8000678 <_write>
 80056a8:	1c43      	adds	r3, r0, #1
 80056aa:	d102      	bne.n	80056b2 <_write_r+0x1e>
 80056ac:	682b      	ldr	r3, [r5, #0]
 80056ae:	b103      	cbz	r3, 80056b2 <_write_r+0x1e>
 80056b0:	6023      	str	r3, [r4, #0]
 80056b2:	bd38      	pop	{r3, r4, r5, pc}
 80056b4:	200021d0 	.word	0x200021d0

080056b8 <__errno>:
 80056b8:	4b01      	ldr	r3, [pc, #4]	@ (80056c0 <__errno+0x8>)
 80056ba:	6818      	ldr	r0, [r3, #0]
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	20000104 	.word	0x20000104

080056c4 <__libc_init_array>:
 80056c4:	b570      	push	{r4, r5, r6, lr}
 80056c6:	4d0d      	ldr	r5, [pc, #52]	@ (80056fc <__libc_init_array+0x38>)
 80056c8:	4c0d      	ldr	r4, [pc, #52]	@ (8005700 <__libc_init_array+0x3c>)
 80056ca:	1b64      	subs	r4, r4, r5
 80056cc:	10a4      	asrs	r4, r4, #2
 80056ce:	2600      	movs	r6, #0
 80056d0:	42a6      	cmp	r6, r4
 80056d2:	d109      	bne.n	80056e8 <__libc_init_array+0x24>
 80056d4:	4d0b      	ldr	r5, [pc, #44]	@ (8005704 <__libc_init_array+0x40>)
 80056d6:	4c0c      	ldr	r4, [pc, #48]	@ (8005708 <__libc_init_array+0x44>)
 80056d8:	f000 fd24 	bl	8006124 <_init>
 80056dc:	1b64      	subs	r4, r4, r5
 80056de:	10a4      	asrs	r4, r4, #2
 80056e0:	2600      	movs	r6, #0
 80056e2:	42a6      	cmp	r6, r4
 80056e4:	d105      	bne.n	80056f2 <__libc_init_array+0x2e>
 80056e6:	bd70      	pop	{r4, r5, r6, pc}
 80056e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056ec:	4798      	blx	r3
 80056ee:	3601      	adds	r6, #1
 80056f0:	e7ee      	b.n	80056d0 <__libc_init_array+0xc>
 80056f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056f6:	4798      	blx	r3
 80056f8:	3601      	adds	r6, #1
 80056fa:	e7f2      	b.n	80056e2 <__libc_init_array+0x1e>
 80056fc:	0800628c 	.word	0x0800628c
 8005700:	0800628c 	.word	0x0800628c
 8005704:	0800628c 	.word	0x0800628c
 8005708:	08006290 	.word	0x08006290

0800570c <__retarget_lock_init_recursive>:
 800570c:	4770      	bx	lr

0800570e <__retarget_lock_acquire_recursive>:
 800570e:	4770      	bx	lr

08005710 <__retarget_lock_release_recursive>:
 8005710:	4770      	bx	lr
	...

08005714 <_free_r>:
 8005714:	b538      	push	{r3, r4, r5, lr}
 8005716:	4605      	mov	r5, r0
 8005718:	2900      	cmp	r1, #0
 800571a:	d041      	beq.n	80057a0 <_free_r+0x8c>
 800571c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005720:	1f0c      	subs	r4, r1, #4
 8005722:	2b00      	cmp	r3, #0
 8005724:	bfb8      	it	lt
 8005726:	18e4      	addlt	r4, r4, r3
 8005728:	f000 f8e0 	bl	80058ec <__malloc_lock>
 800572c:	4a1d      	ldr	r2, [pc, #116]	@ (80057a4 <_free_r+0x90>)
 800572e:	6813      	ldr	r3, [r2, #0]
 8005730:	b933      	cbnz	r3, 8005740 <_free_r+0x2c>
 8005732:	6063      	str	r3, [r4, #4]
 8005734:	6014      	str	r4, [r2, #0]
 8005736:	4628      	mov	r0, r5
 8005738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800573c:	f000 b8dc 	b.w	80058f8 <__malloc_unlock>
 8005740:	42a3      	cmp	r3, r4
 8005742:	d908      	bls.n	8005756 <_free_r+0x42>
 8005744:	6820      	ldr	r0, [r4, #0]
 8005746:	1821      	adds	r1, r4, r0
 8005748:	428b      	cmp	r3, r1
 800574a:	bf01      	itttt	eq
 800574c:	6819      	ldreq	r1, [r3, #0]
 800574e:	685b      	ldreq	r3, [r3, #4]
 8005750:	1809      	addeq	r1, r1, r0
 8005752:	6021      	streq	r1, [r4, #0]
 8005754:	e7ed      	b.n	8005732 <_free_r+0x1e>
 8005756:	461a      	mov	r2, r3
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	b10b      	cbz	r3, 8005760 <_free_r+0x4c>
 800575c:	42a3      	cmp	r3, r4
 800575e:	d9fa      	bls.n	8005756 <_free_r+0x42>
 8005760:	6811      	ldr	r1, [r2, #0]
 8005762:	1850      	adds	r0, r2, r1
 8005764:	42a0      	cmp	r0, r4
 8005766:	d10b      	bne.n	8005780 <_free_r+0x6c>
 8005768:	6820      	ldr	r0, [r4, #0]
 800576a:	4401      	add	r1, r0
 800576c:	1850      	adds	r0, r2, r1
 800576e:	4283      	cmp	r3, r0
 8005770:	6011      	str	r1, [r2, #0]
 8005772:	d1e0      	bne.n	8005736 <_free_r+0x22>
 8005774:	6818      	ldr	r0, [r3, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	6053      	str	r3, [r2, #4]
 800577a:	4408      	add	r0, r1
 800577c:	6010      	str	r0, [r2, #0]
 800577e:	e7da      	b.n	8005736 <_free_r+0x22>
 8005780:	d902      	bls.n	8005788 <_free_r+0x74>
 8005782:	230c      	movs	r3, #12
 8005784:	602b      	str	r3, [r5, #0]
 8005786:	e7d6      	b.n	8005736 <_free_r+0x22>
 8005788:	6820      	ldr	r0, [r4, #0]
 800578a:	1821      	adds	r1, r4, r0
 800578c:	428b      	cmp	r3, r1
 800578e:	bf04      	itt	eq
 8005790:	6819      	ldreq	r1, [r3, #0]
 8005792:	685b      	ldreq	r3, [r3, #4]
 8005794:	6063      	str	r3, [r4, #4]
 8005796:	bf04      	itt	eq
 8005798:	1809      	addeq	r1, r1, r0
 800579a:	6021      	streq	r1, [r4, #0]
 800579c:	6054      	str	r4, [r2, #4]
 800579e:	e7ca      	b.n	8005736 <_free_r+0x22>
 80057a0:	bd38      	pop	{r3, r4, r5, pc}
 80057a2:	bf00      	nop
 80057a4:	200021dc 	.word	0x200021dc

080057a8 <sbrk_aligned>:
 80057a8:	b570      	push	{r4, r5, r6, lr}
 80057aa:	4e0f      	ldr	r6, [pc, #60]	@ (80057e8 <sbrk_aligned+0x40>)
 80057ac:	460c      	mov	r4, r1
 80057ae:	6831      	ldr	r1, [r6, #0]
 80057b0:	4605      	mov	r5, r0
 80057b2:	b911      	cbnz	r1, 80057ba <sbrk_aligned+0x12>
 80057b4:	f000 fca6 	bl	8006104 <_sbrk_r>
 80057b8:	6030      	str	r0, [r6, #0]
 80057ba:	4621      	mov	r1, r4
 80057bc:	4628      	mov	r0, r5
 80057be:	f000 fca1 	bl	8006104 <_sbrk_r>
 80057c2:	1c43      	adds	r3, r0, #1
 80057c4:	d103      	bne.n	80057ce <sbrk_aligned+0x26>
 80057c6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80057ca:	4620      	mov	r0, r4
 80057cc:	bd70      	pop	{r4, r5, r6, pc}
 80057ce:	1cc4      	adds	r4, r0, #3
 80057d0:	f024 0403 	bic.w	r4, r4, #3
 80057d4:	42a0      	cmp	r0, r4
 80057d6:	d0f8      	beq.n	80057ca <sbrk_aligned+0x22>
 80057d8:	1a21      	subs	r1, r4, r0
 80057da:	4628      	mov	r0, r5
 80057dc:	f000 fc92 	bl	8006104 <_sbrk_r>
 80057e0:	3001      	adds	r0, #1
 80057e2:	d1f2      	bne.n	80057ca <sbrk_aligned+0x22>
 80057e4:	e7ef      	b.n	80057c6 <sbrk_aligned+0x1e>
 80057e6:	bf00      	nop
 80057e8:	200021d8 	.word	0x200021d8

080057ec <_malloc_r>:
 80057ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057f0:	1ccd      	adds	r5, r1, #3
 80057f2:	f025 0503 	bic.w	r5, r5, #3
 80057f6:	3508      	adds	r5, #8
 80057f8:	2d0c      	cmp	r5, #12
 80057fa:	bf38      	it	cc
 80057fc:	250c      	movcc	r5, #12
 80057fe:	2d00      	cmp	r5, #0
 8005800:	4606      	mov	r6, r0
 8005802:	db01      	blt.n	8005808 <_malloc_r+0x1c>
 8005804:	42a9      	cmp	r1, r5
 8005806:	d904      	bls.n	8005812 <_malloc_r+0x26>
 8005808:	230c      	movs	r3, #12
 800580a:	6033      	str	r3, [r6, #0]
 800580c:	2000      	movs	r0, #0
 800580e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005812:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80058e8 <_malloc_r+0xfc>
 8005816:	f000 f869 	bl	80058ec <__malloc_lock>
 800581a:	f8d8 3000 	ldr.w	r3, [r8]
 800581e:	461c      	mov	r4, r3
 8005820:	bb44      	cbnz	r4, 8005874 <_malloc_r+0x88>
 8005822:	4629      	mov	r1, r5
 8005824:	4630      	mov	r0, r6
 8005826:	f7ff ffbf 	bl	80057a8 <sbrk_aligned>
 800582a:	1c43      	adds	r3, r0, #1
 800582c:	4604      	mov	r4, r0
 800582e:	d158      	bne.n	80058e2 <_malloc_r+0xf6>
 8005830:	f8d8 4000 	ldr.w	r4, [r8]
 8005834:	4627      	mov	r7, r4
 8005836:	2f00      	cmp	r7, #0
 8005838:	d143      	bne.n	80058c2 <_malloc_r+0xd6>
 800583a:	2c00      	cmp	r4, #0
 800583c:	d04b      	beq.n	80058d6 <_malloc_r+0xea>
 800583e:	6823      	ldr	r3, [r4, #0]
 8005840:	4639      	mov	r1, r7
 8005842:	4630      	mov	r0, r6
 8005844:	eb04 0903 	add.w	r9, r4, r3
 8005848:	f000 fc5c 	bl	8006104 <_sbrk_r>
 800584c:	4581      	cmp	r9, r0
 800584e:	d142      	bne.n	80058d6 <_malloc_r+0xea>
 8005850:	6821      	ldr	r1, [r4, #0]
 8005852:	1a6d      	subs	r5, r5, r1
 8005854:	4629      	mov	r1, r5
 8005856:	4630      	mov	r0, r6
 8005858:	f7ff ffa6 	bl	80057a8 <sbrk_aligned>
 800585c:	3001      	adds	r0, #1
 800585e:	d03a      	beq.n	80058d6 <_malloc_r+0xea>
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	442b      	add	r3, r5
 8005864:	6023      	str	r3, [r4, #0]
 8005866:	f8d8 3000 	ldr.w	r3, [r8]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	bb62      	cbnz	r2, 80058c8 <_malloc_r+0xdc>
 800586e:	f8c8 7000 	str.w	r7, [r8]
 8005872:	e00f      	b.n	8005894 <_malloc_r+0xa8>
 8005874:	6822      	ldr	r2, [r4, #0]
 8005876:	1b52      	subs	r2, r2, r5
 8005878:	d420      	bmi.n	80058bc <_malloc_r+0xd0>
 800587a:	2a0b      	cmp	r2, #11
 800587c:	d917      	bls.n	80058ae <_malloc_r+0xc2>
 800587e:	1961      	adds	r1, r4, r5
 8005880:	42a3      	cmp	r3, r4
 8005882:	6025      	str	r5, [r4, #0]
 8005884:	bf18      	it	ne
 8005886:	6059      	strne	r1, [r3, #4]
 8005888:	6863      	ldr	r3, [r4, #4]
 800588a:	bf08      	it	eq
 800588c:	f8c8 1000 	streq.w	r1, [r8]
 8005890:	5162      	str	r2, [r4, r5]
 8005892:	604b      	str	r3, [r1, #4]
 8005894:	4630      	mov	r0, r6
 8005896:	f000 f82f 	bl	80058f8 <__malloc_unlock>
 800589a:	f104 000b 	add.w	r0, r4, #11
 800589e:	1d23      	adds	r3, r4, #4
 80058a0:	f020 0007 	bic.w	r0, r0, #7
 80058a4:	1ac2      	subs	r2, r0, r3
 80058a6:	bf1c      	itt	ne
 80058a8:	1a1b      	subne	r3, r3, r0
 80058aa:	50a3      	strne	r3, [r4, r2]
 80058ac:	e7af      	b.n	800580e <_malloc_r+0x22>
 80058ae:	6862      	ldr	r2, [r4, #4]
 80058b0:	42a3      	cmp	r3, r4
 80058b2:	bf0c      	ite	eq
 80058b4:	f8c8 2000 	streq.w	r2, [r8]
 80058b8:	605a      	strne	r2, [r3, #4]
 80058ba:	e7eb      	b.n	8005894 <_malloc_r+0xa8>
 80058bc:	4623      	mov	r3, r4
 80058be:	6864      	ldr	r4, [r4, #4]
 80058c0:	e7ae      	b.n	8005820 <_malloc_r+0x34>
 80058c2:	463c      	mov	r4, r7
 80058c4:	687f      	ldr	r7, [r7, #4]
 80058c6:	e7b6      	b.n	8005836 <_malloc_r+0x4a>
 80058c8:	461a      	mov	r2, r3
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	42a3      	cmp	r3, r4
 80058ce:	d1fb      	bne.n	80058c8 <_malloc_r+0xdc>
 80058d0:	2300      	movs	r3, #0
 80058d2:	6053      	str	r3, [r2, #4]
 80058d4:	e7de      	b.n	8005894 <_malloc_r+0xa8>
 80058d6:	230c      	movs	r3, #12
 80058d8:	6033      	str	r3, [r6, #0]
 80058da:	4630      	mov	r0, r6
 80058dc:	f000 f80c 	bl	80058f8 <__malloc_unlock>
 80058e0:	e794      	b.n	800580c <_malloc_r+0x20>
 80058e2:	6005      	str	r5, [r0, #0]
 80058e4:	e7d6      	b.n	8005894 <_malloc_r+0xa8>
 80058e6:	bf00      	nop
 80058e8:	200021dc 	.word	0x200021dc

080058ec <__malloc_lock>:
 80058ec:	4801      	ldr	r0, [pc, #4]	@ (80058f4 <__malloc_lock+0x8>)
 80058ee:	f7ff bf0e 	b.w	800570e <__retarget_lock_acquire_recursive>
 80058f2:	bf00      	nop
 80058f4:	200021d4 	.word	0x200021d4

080058f8 <__malloc_unlock>:
 80058f8:	4801      	ldr	r0, [pc, #4]	@ (8005900 <__malloc_unlock+0x8>)
 80058fa:	f7ff bf09 	b.w	8005710 <__retarget_lock_release_recursive>
 80058fe:	bf00      	nop
 8005900:	200021d4 	.word	0x200021d4

08005904 <__sfputc_r>:
 8005904:	6893      	ldr	r3, [r2, #8]
 8005906:	3b01      	subs	r3, #1
 8005908:	2b00      	cmp	r3, #0
 800590a:	b410      	push	{r4}
 800590c:	6093      	str	r3, [r2, #8]
 800590e:	da08      	bge.n	8005922 <__sfputc_r+0x1e>
 8005910:	6994      	ldr	r4, [r2, #24]
 8005912:	42a3      	cmp	r3, r4
 8005914:	db01      	blt.n	800591a <__sfputc_r+0x16>
 8005916:	290a      	cmp	r1, #10
 8005918:	d103      	bne.n	8005922 <__sfputc_r+0x1e>
 800591a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800591e:	f7ff bdc2 	b.w	80054a6 <__swbuf_r>
 8005922:	6813      	ldr	r3, [r2, #0]
 8005924:	1c58      	adds	r0, r3, #1
 8005926:	6010      	str	r0, [r2, #0]
 8005928:	7019      	strb	r1, [r3, #0]
 800592a:	4608      	mov	r0, r1
 800592c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005930:	4770      	bx	lr

08005932 <__sfputs_r>:
 8005932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005934:	4606      	mov	r6, r0
 8005936:	460f      	mov	r7, r1
 8005938:	4614      	mov	r4, r2
 800593a:	18d5      	adds	r5, r2, r3
 800593c:	42ac      	cmp	r4, r5
 800593e:	d101      	bne.n	8005944 <__sfputs_r+0x12>
 8005940:	2000      	movs	r0, #0
 8005942:	e007      	b.n	8005954 <__sfputs_r+0x22>
 8005944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005948:	463a      	mov	r2, r7
 800594a:	4630      	mov	r0, r6
 800594c:	f7ff ffda 	bl	8005904 <__sfputc_r>
 8005950:	1c43      	adds	r3, r0, #1
 8005952:	d1f3      	bne.n	800593c <__sfputs_r+0xa>
 8005954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005958 <_vfiprintf_r>:
 8005958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595c:	460d      	mov	r5, r1
 800595e:	b09d      	sub	sp, #116	@ 0x74
 8005960:	4614      	mov	r4, r2
 8005962:	4698      	mov	r8, r3
 8005964:	4606      	mov	r6, r0
 8005966:	b118      	cbz	r0, 8005970 <_vfiprintf_r+0x18>
 8005968:	6a03      	ldr	r3, [r0, #32]
 800596a:	b90b      	cbnz	r3, 8005970 <_vfiprintf_r+0x18>
 800596c:	f7ff fcb2 	bl	80052d4 <__sinit>
 8005970:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005972:	07d9      	lsls	r1, r3, #31
 8005974:	d405      	bmi.n	8005982 <_vfiprintf_r+0x2a>
 8005976:	89ab      	ldrh	r3, [r5, #12]
 8005978:	059a      	lsls	r2, r3, #22
 800597a:	d402      	bmi.n	8005982 <_vfiprintf_r+0x2a>
 800597c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800597e:	f7ff fec6 	bl	800570e <__retarget_lock_acquire_recursive>
 8005982:	89ab      	ldrh	r3, [r5, #12]
 8005984:	071b      	lsls	r3, r3, #28
 8005986:	d501      	bpl.n	800598c <_vfiprintf_r+0x34>
 8005988:	692b      	ldr	r3, [r5, #16]
 800598a:	b99b      	cbnz	r3, 80059b4 <_vfiprintf_r+0x5c>
 800598c:	4629      	mov	r1, r5
 800598e:	4630      	mov	r0, r6
 8005990:	f7ff fdc8 	bl	8005524 <__swsetup_r>
 8005994:	b170      	cbz	r0, 80059b4 <_vfiprintf_r+0x5c>
 8005996:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005998:	07dc      	lsls	r4, r3, #31
 800599a:	d504      	bpl.n	80059a6 <_vfiprintf_r+0x4e>
 800599c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059a0:	b01d      	add	sp, #116	@ 0x74
 80059a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059a6:	89ab      	ldrh	r3, [r5, #12]
 80059a8:	0598      	lsls	r0, r3, #22
 80059aa:	d4f7      	bmi.n	800599c <_vfiprintf_r+0x44>
 80059ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059ae:	f7ff feaf 	bl	8005710 <__retarget_lock_release_recursive>
 80059b2:	e7f3      	b.n	800599c <_vfiprintf_r+0x44>
 80059b4:	2300      	movs	r3, #0
 80059b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80059b8:	2320      	movs	r3, #32
 80059ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80059be:	f8cd 800c 	str.w	r8, [sp, #12]
 80059c2:	2330      	movs	r3, #48	@ 0x30
 80059c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005b74 <_vfiprintf_r+0x21c>
 80059c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80059cc:	f04f 0901 	mov.w	r9, #1
 80059d0:	4623      	mov	r3, r4
 80059d2:	469a      	mov	sl, r3
 80059d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059d8:	b10a      	cbz	r2, 80059de <_vfiprintf_r+0x86>
 80059da:	2a25      	cmp	r2, #37	@ 0x25
 80059dc:	d1f9      	bne.n	80059d2 <_vfiprintf_r+0x7a>
 80059de:	ebba 0b04 	subs.w	fp, sl, r4
 80059e2:	d00b      	beq.n	80059fc <_vfiprintf_r+0xa4>
 80059e4:	465b      	mov	r3, fp
 80059e6:	4622      	mov	r2, r4
 80059e8:	4629      	mov	r1, r5
 80059ea:	4630      	mov	r0, r6
 80059ec:	f7ff ffa1 	bl	8005932 <__sfputs_r>
 80059f0:	3001      	adds	r0, #1
 80059f2:	f000 80a7 	beq.w	8005b44 <_vfiprintf_r+0x1ec>
 80059f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80059f8:	445a      	add	r2, fp
 80059fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80059fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 809f 	beq.w	8005b44 <_vfiprintf_r+0x1ec>
 8005a06:	2300      	movs	r3, #0
 8005a08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a10:	f10a 0a01 	add.w	sl, sl, #1
 8005a14:	9304      	str	r3, [sp, #16]
 8005a16:	9307      	str	r3, [sp, #28]
 8005a18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a1e:	4654      	mov	r4, sl
 8005a20:	2205      	movs	r2, #5
 8005a22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a26:	4853      	ldr	r0, [pc, #332]	@ (8005b74 <_vfiprintf_r+0x21c>)
 8005a28:	f7fa fbf2 	bl	8000210 <memchr>
 8005a2c:	9a04      	ldr	r2, [sp, #16]
 8005a2e:	b9d8      	cbnz	r0, 8005a68 <_vfiprintf_r+0x110>
 8005a30:	06d1      	lsls	r1, r2, #27
 8005a32:	bf44      	itt	mi
 8005a34:	2320      	movmi	r3, #32
 8005a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a3a:	0713      	lsls	r3, r2, #28
 8005a3c:	bf44      	itt	mi
 8005a3e:	232b      	movmi	r3, #43	@ 0x2b
 8005a40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a44:	f89a 3000 	ldrb.w	r3, [sl]
 8005a48:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a4a:	d015      	beq.n	8005a78 <_vfiprintf_r+0x120>
 8005a4c:	9a07      	ldr	r2, [sp, #28]
 8005a4e:	4654      	mov	r4, sl
 8005a50:	2000      	movs	r0, #0
 8005a52:	f04f 0c0a 	mov.w	ip, #10
 8005a56:	4621      	mov	r1, r4
 8005a58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a5c:	3b30      	subs	r3, #48	@ 0x30
 8005a5e:	2b09      	cmp	r3, #9
 8005a60:	d94b      	bls.n	8005afa <_vfiprintf_r+0x1a2>
 8005a62:	b1b0      	cbz	r0, 8005a92 <_vfiprintf_r+0x13a>
 8005a64:	9207      	str	r2, [sp, #28]
 8005a66:	e014      	b.n	8005a92 <_vfiprintf_r+0x13a>
 8005a68:	eba0 0308 	sub.w	r3, r0, r8
 8005a6c:	fa09 f303 	lsl.w	r3, r9, r3
 8005a70:	4313      	orrs	r3, r2
 8005a72:	9304      	str	r3, [sp, #16]
 8005a74:	46a2      	mov	sl, r4
 8005a76:	e7d2      	b.n	8005a1e <_vfiprintf_r+0xc6>
 8005a78:	9b03      	ldr	r3, [sp, #12]
 8005a7a:	1d19      	adds	r1, r3, #4
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	9103      	str	r1, [sp, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	bfbb      	ittet	lt
 8005a84:	425b      	neglt	r3, r3
 8005a86:	f042 0202 	orrlt.w	r2, r2, #2
 8005a8a:	9307      	strge	r3, [sp, #28]
 8005a8c:	9307      	strlt	r3, [sp, #28]
 8005a8e:	bfb8      	it	lt
 8005a90:	9204      	strlt	r2, [sp, #16]
 8005a92:	7823      	ldrb	r3, [r4, #0]
 8005a94:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a96:	d10a      	bne.n	8005aae <_vfiprintf_r+0x156>
 8005a98:	7863      	ldrb	r3, [r4, #1]
 8005a9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a9c:	d132      	bne.n	8005b04 <_vfiprintf_r+0x1ac>
 8005a9e:	9b03      	ldr	r3, [sp, #12]
 8005aa0:	1d1a      	adds	r2, r3, #4
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	9203      	str	r2, [sp, #12]
 8005aa6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005aaa:	3402      	adds	r4, #2
 8005aac:	9305      	str	r3, [sp, #20]
 8005aae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005b84 <_vfiprintf_r+0x22c>
 8005ab2:	7821      	ldrb	r1, [r4, #0]
 8005ab4:	2203      	movs	r2, #3
 8005ab6:	4650      	mov	r0, sl
 8005ab8:	f7fa fbaa 	bl	8000210 <memchr>
 8005abc:	b138      	cbz	r0, 8005ace <_vfiprintf_r+0x176>
 8005abe:	9b04      	ldr	r3, [sp, #16]
 8005ac0:	eba0 000a 	sub.w	r0, r0, sl
 8005ac4:	2240      	movs	r2, #64	@ 0x40
 8005ac6:	4082      	lsls	r2, r0
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	3401      	adds	r4, #1
 8005acc:	9304      	str	r3, [sp, #16]
 8005ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ad2:	4829      	ldr	r0, [pc, #164]	@ (8005b78 <_vfiprintf_r+0x220>)
 8005ad4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ad8:	2206      	movs	r2, #6
 8005ada:	f7fa fb99 	bl	8000210 <memchr>
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	d03f      	beq.n	8005b62 <_vfiprintf_r+0x20a>
 8005ae2:	4b26      	ldr	r3, [pc, #152]	@ (8005b7c <_vfiprintf_r+0x224>)
 8005ae4:	bb1b      	cbnz	r3, 8005b2e <_vfiprintf_r+0x1d6>
 8005ae6:	9b03      	ldr	r3, [sp, #12]
 8005ae8:	3307      	adds	r3, #7
 8005aea:	f023 0307 	bic.w	r3, r3, #7
 8005aee:	3308      	adds	r3, #8
 8005af0:	9303      	str	r3, [sp, #12]
 8005af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005af4:	443b      	add	r3, r7
 8005af6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005af8:	e76a      	b.n	80059d0 <_vfiprintf_r+0x78>
 8005afa:	fb0c 3202 	mla	r2, ip, r2, r3
 8005afe:	460c      	mov	r4, r1
 8005b00:	2001      	movs	r0, #1
 8005b02:	e7a8      	b.n	8005a56 <_vfiprintf_r+0xfe>
 8005b04:	2300      	movs	r3, #0
 8005b06:	3401      	adds	r4, #1
 8005b08:	9305      	str	r3, [sp, #20]
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	f04f 0c0a 	mov.w	ip, #10
 8005b10:	4620      	mov	r0, r4
 8005b12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b16:	3a30      	subs	r2, #48	@ 0x30
 8005b18:	2a09      	cmp	r2, #9
 8005b1a:	d903      	bls.n	8005b24 <_vfiprintf_r+0x1cc>
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0c6      	beq.n	8005aae <_vfiprintf_r+0x156>
 8005b20:	9105      	str	r1, [sp, #20]
 8005b22:	e7c4      	b.n	8005aae <_vfiprintf_r+0x156>
 8005b24:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b28:	4604      	mov	r4, r0
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e7f0      	b.n	8005b10 <_vfiprintf_r+0x1b8>
 8005b2e:	ab03      	add	r3, sp, #12
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	462a      	mov	r2, r5
 8005b34:	4b12      	ldr	r3, [pc, #72]	@ (8005b80 <_vfiprintf_r+0x228>)
 8005b36:	a904      	add	r1, sp, #16
 8005b38:	4630      	mov	r0, r6
 8005b3a:	f3af 8000 	nop.w
 8005b3e:	4607      	mov	r7, r0
 8005b40:	1c78      	adds	r0, r7, #1
 8005b42:	d1d6      	bne.n	8005af2 <_vfiprintf_r+0x19a>
 8005b44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b46:	07d9      	lsls	r1, r3, #31
 8005b48:	d405      	bmi.n	8005b56 <_vfiprintf_r+0x1fe>
 8005b4a:	89ab      	ldrh	r3, [r5, #12]
 8005b4c:	059a      	lsls	r2, r3, #22
 8005b4e:	d402      	bmi.n	8005b56 <_vfiprintf_r+0x1fe>
 8005b50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b52:	f7ff fddd 	bl	8005710 <__retarget_lock_release_recursive>
 8005b56:	89ab      	ldrh	r3, [r5, #12]
 8005b58:	065b      	lsls	r3, r3, #25
 8005b5a:	f53f af1f 	bmi.w	800599c <_vfiprintf_r+0x44>
 8005b5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b60:	e71e      	b.n	80059a0 <_vfiprintf_r+0x48>
 8005b62:	ab03      	add	r3, sp, #12
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	462a      	mov	r2, r5
 8005b68:	4b05      	ldr	r3, [pc, #20]	@ (8005b80 <_vfiprintf_r+0x228>)
 8005b6a:	a904      	add	r1, sp, #16
 8005b6c:	4630      	mov	r0, r6
 8005b6e:	f000 f879 	bl	8005c64 <_printf_i>
 8005b72:	e7e4      	b.n	8005b3e <_vfiprintf_r+0x1e6>
 8005b74:	08006250 	.word	0x08006250
 8005b78:	0800625a 	.word	0x0800625a
 8005b7c:	00000000 	.word	0x00000000
 8005b80:	08005933 	.word	0x08005933
 8005b84:	08006256 	.word	0x08006256

08005b88 <_printf_common>:
 8005b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b8c:	4616      	mov	r6, r2
 8005b8e:	4698      	mov	r8, r3
 8005b90:	688a      	ldr	r2, [r1, #8]
 8005b92:	690b      	ldr	r3, [r1, #16]
 8005b94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	bfb8      	it	lt
 8005b9c:	4613      	movlt	r3, r2
 8005b9e:	6033      	str	r3, [r6, #0]
 8005ba0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ba4:	4607      	mov	r7, r0
 8005ba6:	460c      	mov	r4, r1
 8005ba8:	b10a      	cbz	r2, 8005bae <_printf_common+0x26>
 8005baa:	3301      	adds	r3, #1
 8005bac:	6033      	str	r3, [r6, #0]
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	0699      	lsls	r1, r3, #26
 8005bb2:	bf42      	ittt	mi
 8005bb4:	6833      	ldrmi	r3, [r6, #0]
 8005bb6:	3302      	addmi	r3, #2
 8005bb8:	6033      	strmi	r3, [r6, #0]
 8005bba:	6825      	ldr	r5, [r4, #0]
 8005bbc:	f015 0506 	ands.w	r5, r5, #6
 8005bc0:	d106      	bne.n	8005bd0 <_printf_common+0x48>
 8005bc2:	f104 0a19 	add.w	sl, r4, #25
 8005bc6:	68e3      	ldr	r3, [r4, #12]
 8005bc8:	6832      	ldr	r2, [r6, #0]
 8005bca:	1a9b      	subs	r3, r3, r2
 8005bcc:	42ab      	cmp	r3, r5
 8005bce:	dc26      	bgt.n	8005c1e <_printf_common+0x96>
 8005bd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005bd4:	6822      	ldr	r2, [r4, #0]
 8005bd6:	3b00      	subs	r3, #0
 8005bd8:	bf18      	it	ne
 8005bda:	2301      	movne	r3, #1
 8005bdc:	0692      	lsls	r2, r2, #26
 8005bde:	d42b      	bmi.n	8005c38 <_printf_common+0xb0>
 8005be0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005be4:	4641      	mov	r1, r8
 8005be6:	4638      	mov	r0, r7
 8005be8:	47c8      	blx	r9
 8005bea:	3001      	adds	r0, #1
 8005bec:	d01e      	beq.n	8005c2c <_printf_common+0xa4>
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	6922      	ldr	r2, [r4, #16]
 8005bf2:	f003 0306 	and.w	r3, r3, #6
 8005bf6:	2b04      	cmp	r3, #4
 8005bf8:	bf02      	ittt	eq
 8005bfa:	68e5      	ldreq	r5, [r4, #12]
 8005bfc:	6833      	ldreq	r3, [r6, #0]
 8005bfe:	1aed      	subeq	r5, r5, r3
 8005c00:	68a3      	ldr	r3, [r4, #8]
 8005c02:	bf0c      	ite	eq
 8005c04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c08:	2500      	movne	r5, #0
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	bfc4      	itt	gt
 8005c0e:	1a9b      	subgt	r3, r3, r2
 8005c10:	18ed      	addgt	r5, r5, r3
 8005c12:	2600      	movs	r6, #0
 8005c14:	341a      	adds	r4, #26
 8005c16:	42b5      	cmp	r5, r6
 8005c18:	d11a      	bne.n	8005c50 <_printf_common+0xc8>
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	e008      	b.n	8005c30 <_printf_common+0xa8>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	4652      	mov	r2, sl
 8005c22:	4641      	mov	r1, r8
 8005c24:	4638      	mov	r0, r7
 8005c26:	47c8      	blx	r9
 8005c28:	3001      	adds	r0, #1
 8005c2a:	d103      	bne.n	8005c34 <_printf_common+0xac>
 8005c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c34:	3501      	adds	r5, #1
 8005c36:	e7c6      	b.n	8005bc6 <_printf_common+0x3e>
 8005c38:	18e1      	adds	r1, r4, r3
 8005c3a:	1c5a      	adds	r2, r3, #1
 8005c3c:	2030      	movs	r0, #48	@ 0x30
 8005c3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c42:	4422      	add	r2, r4
 8005c44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c4c:	3302      	adds	r3, #2
 8005c4e:	e7c7      	b.n	8005be0 <_printf_common+0x58>
 8005c50:	2301      	movs	r3, #1
 8005c52:	4622      	mov	r2, r4
 8005c54:	4641      	mov	r1, r8
 8005c56:	4638      	mov	r0, r7
 8005c58:	47c8      	blx	r9
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	d0e6      	beq.n	8005c2c <_printf_common+0xa4>
 8005c5e:	3601      	adds	r6, #1
 8005c60:	e7d9      	b.n	8005c16 <_printf_common+0x8e>
	...

08005c64 <_printf_i>:
 8005c64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c68:	7e0f      	ldrb	r7, [r1, #24]
 8005c6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005c6c:	2f78      	cmp	r7, #120	@ 0x78
 8005c6e:	4691      	mov	r9, r2
 8005c70:	4680      	mov	r8, r0
 8005c72:	460c      	mov	r4, r1
 8005c74:	469a      	mov	sl, r3
 8005c76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005c7a:	d807      	bhi.n	8005c8c <_printf_i+0x28>
 8005c7c:	2f62      	cmp	r7, #98	@ 0x62
 8005c7e:	d80a      	bhi.n	8005c96 <_printf_i+0x32>
 8005c80:	2f00      	cmp	r7, #0
 8005c82:	f000 80d2 	beq.w	8005e2a <_printf_i+0x1c6>
 8005c86:	2f58      	cmp	r7, #88	@ 0x58
 8005c88:	f000 80b9 	beq.w	8005dfe <_printf_i+0x19a>
 8005c8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c94:	e03a      	b.n	8005d0c <_printf_i+0xa8>
 8005c96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c9a:	2b15      	cmp	r3, #21
 8005c9c:	d8f6      	bhi.n	8005c8c <_printf_i+0x28>
 8005c9e:	a101      	add	r1, pc, #4	@ (adr r1, 8005ca4 <_printf_i+0x40>)
 8005ca0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ca4:	08005cfd 	.word	0x08005cfd
 8005ca8:	08005d11 	.word	0x08005d11
 8005cac:	08005c8d 	.word	0x08005c8d
 8005cb0:	08005c8d 	.word	0x08005c8d
 8005cb4:	08005c8d 	.word	0x08005c8d
 8005cb8:	08005c8d 	.word	0x08005c8d
 8005cbc:	08005d11 	.word	0x08005d11
 8005cc0:	08005c8d 	.word	0x08005c8d
 8005cc4:	08005c8d 	.word	0x08005c8d
 8005cc8:	08005c8d 	.word	0x08005c8d
 8005ccc:	08005c8d 	.word	0x08005c8d
 8005cd0:	08005e11 	.word	0x08005e11
 8005cd4:	08005d3b 	.word	0x08005d3b
 8005cd8:	08005dcb 	.word	0x08005dcb
 8005cdc:	08005c8d 	.word	0x08005c8d
 8005ce0:	08005c8d 	.word	0x08005c8d
 8005ce4:	08005e33 	.word	0x08005e33
 8005ce8:	08005c8d 	.word	0x08005c8d
 8005cec:	08005d3b 	.word	0x08005d3b
 8005cf0:	08005c8d 	.word	0x08005c8d
 8005cf4:	08005c8d 	.word	0x08005c8d
 8005cf8:	08005dd3 	.word	0x08005dd3
 8005cfc:	6833      	ldr	r3, [r6, #0]
 8005cfe:	1d1a      	adds	r2, r3, #4
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6032      	str	r2, [r6, #0]
 8005d04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e09d      	b.n	8005e4c <_printf_i+0x1e8>
 8005d10:	6833      	ldr	r3, [r6, #0]
 8005d12:	6820      	ldr	r0, [r4, #0]
 8005d14:	1d19      	adds	r1, r3, #4
 8005d16:	6031      	str	r1, [r6, #0]
 8005d18:	0606      	lsls	r6, r0, #24
 8005d1a:	d501      	bpl.n	8005d20 <_printf_i+0xbc>
 8005d1c:	681d      	ldr	r5, [r3, #0]
 8005d1e:	e003      	b.n	8005d28 <_printf_i+0xc4>
 8005d20:	0645      	lsls	r5, r0, #25
 8005d22:	d5fb      	bpl.n	8005d1c <_printf_i+0xb8>
 8005d24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d28:	2d00      	cmp	r5, #0
 8005d2a:	da03      	bge.n	8005d34 <_printf_i+0xd0>
 8005d2c:	232d      	movs	r3, #45	@ 0x2d
 8005d2e:	426d      	negs	r5, r5
 8005d30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d34:	4859      	ldr	r0, [pc, #356]	@ (8005e9c <_printf_i+0x238>)
 8005d36:	230a      	movs	r3, #10
 8005d38:	e011      	b.n	8005d5e <_printf_i+0xfa>
 8005d3a:	6821      	ldr	r1, [r4, #0]
 8005d3c:	6833      	ldr	r3, [r6, #0]
 8005d3e:	0608      	lsls	r0, r1, #24
 8005d40:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d44:	d402      	bmi.n	8005d4c <_printf_i+0xe8>
 8005d46:	0649      	lsls	r1, r1, #25
 8005d48:	bf48      	it	mi
 8005d4a:	b2ad      	uxthmi	r5, r5
 8005d4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d4e:	4853      	ldr	r0, [pc, #332]	@ (8005e9c <_printf_i+0x238>)
 8005d50:	6033      	str	r3, [r6, #0]
 8005d52:	bf14      	ite	ne
 8005d54:	230a      	movne	r3, #10
 8005d56:	2308      	moveq	r3, #8
 8005d58:	2100      	movs	r1, #0
 8005d5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d5e:	6866      	ldr	r6, [r4, #4]
 8005d60:	60a6      	str	r6, [r4, #8]
 8005d62:	2e00      	cmp	r6, #0
 8005d64:	bfa2      	ittt	ge
 8005d66:	6821      	ldrge	r1, [r4, #0]
 8005d68:	f021 0104 	bicge.w	r1, r1, #4
 8005d6c:	6021      	strge	r1, [r4, #0]
 8005d6e:	b90d      	cbnz	r5, 8005d74 <_printf_i+0x110>
 8005d70:	2e00      	cmp	r6, #0
 8005d72:	d04b      	beq.n	8005e0c <_printf_i+0x1a8>
 8005d74:	4616      	mov	r6, r2
 8005d76:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d7a:	fb03 5711 	mls	r7, r3, r1, r5
 8005d7e:	5dc7      	ldrb	r7, [r0, r7]
 8005d80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d84:	462f      	mov	r7, r5
 8005d86:	42bb      	cmp	r3, r7
 8005d88:	460d      	mov	r5, r1
 8005d8a:	d9f4      	bls.n	8005d76 <_printf_i+0x112>
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	d10b      	bne.n	8005da8 <_printf_i+0x144>
 8005d90:	6823      	ldr	r3, [r4, #0]
 8005d92:	07df      	lsls	r7, r3, #31
 8005d94:	d508      	bpl.n	8005da8 <_printf_i+0x144>
 8005d96:	6923      	ldr	r3, [r4, #16]
 8005d98:	6861      	ldr	r1, [r4, #4]
 8005d9a:	4299      	cmp	r1, r3
 8005d9c:	bfde      	ittt	le
 8005d9e:	2330      	movle	r3, #48	@ 0x30
 8005da0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005da4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005da8:	1b92      	subs	r2, r2, r6
 8005daa:	6122      	str	r2, [r4, #16]
 8005dac:	f8cd a000 	str.w	sl, [sp]
 8005db0:	464b      	mov	r3, r9
 8005db2:	aa03      	add	r2, sp, #12
 8005db4:	4621      	mov	r1, r4
 8005db6:	4640      	mov	r0, r8
 8005db8:	f7ff fee6 	bl	8005b88 <_printf_common>
 8005dbc:	3001      	adds	r0, #1
 8005dbe:	d14a      	bne.n	8005e56 <_printf_i+0x1f2>
 8005dc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005dc4:	b004      	add	sp, #16
 8005dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	f043 0320 	orr.w	r3, r3, #32
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	4833      	ldr	r0, [pc, #204]	@ (8005ea0 <_printf_i+0x23c>)
 8005dd4:	2778      	movs	r7, #120	@ 0x78
 8005dd6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	6831      	ldr	r1, [r6, #0]
 8005dde:	061f      	lsls	r7, r3, #24
 8005de0:	f851 5b04 	ldr.w	r5, [r1], #4
 8005de4:	d402      	bmi.n	8005dec <_printf_i+0x188>
 8005de6:	065f      	lsls	r7, r3, #25
 8005de8:	bf48      	it	mi
 8005dea:	b2ad      	uxthmi	r5, r5
 8005dec:	6031      	str	r1, [r6, #0]
 8005dee:	07d9      	lsls	r1, r3, #31
 8005df0:	bf44      	itt	mi
 8005df2:	f043 0320 	orrmi.w	r3, r3, #32
 8005df6:	6023      	strmi	r3, [r4, #0]
 8005df8:	b11d      	cbz	r5, 8005e02 <_printf_i+0x19e>
 8005dfa:	2310      	movs	r3, #16
 8005dfc:	e7ac      	b.n	8005d58 <_printf_i+0xf4>
 8005dfe:	4827      	ldr	r0, [pc, #156]	@ (8005e9c <_printf_i+0x238>)
 8005e00:	e7e9      	b.n	8005dd6 <_printf_i+0x172>
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	f023 0320 	bic.w	r3, r3, #32
 8005e08:	6023      	str	r3, [r4, #0]
 8005e0a:	e7f6      	b.n	8005dfa <_printf_i+0x196>
 8005e0c:	4616      	mov	r6, r2
 8005e0e:	e7bd      	b.n	8005d8c <_printf_i+0x128>
 8005e10:	6833      	ldr	r3, [r6, #0]
 8005e12:	6825      	ldr	r5, [r4, #0]
 8005e14:	6961      	ldr	r1, [r4, #20]
 8005e16:	1d18      	adds	r0, r3, #4
 8005e18:	6030      	str	r0, [r6, #0]
 8005e1a:	062e      	lsls	r6, r5, #24
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	d501      	bpl.n	8005e24 <_printf_i+0x1c0>
 8005e20:	6019      	str	r1, [r3, #0]
 8005e22:	e002      	b.n	8005e2a <_printf_i+0x1c6>
 8005e24:	0668      	lsls	r0, r5, #25
 8005e26:	d5fb      	bpl.n	8005e20 <_printf_i+0x1bc>
 8005e28:	8019      	strh	r1, [r3, #0]
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	6123      	str	r3, [r4, #16]
 8005e2e:	4616      	mov	r6, r2
 8005e30:	e7bc      	b.n	8005dac <_printf_i+0x148>
 8005e32:	6833      	ldr	r3, [r6, #0]
 8005e34:	1d1a      	adds	r2, r3, #4
 8005e36:	6032      	str	r2, [r6, #0]
 8005e38:	681e      	ldr	r6, [r3, #0]
 8005e3a:	6862      	ldr	r2, [r4, #4]
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	4630      	mov	r0, r6
 8005e40:	f7fa f9e6 	bl	8000210 <memchr>
 8005e44:	b108      	cbz	r0, 8005e4a <_printf_i+0x1e6>
 8005e46:	1b80      	subs	r0, r0, r6
 8005e48:	6060      	str	r0, [r4, #4]
 8005e4a:	6863      	ldr	r3, [r4, #4]
 8005e4c:	6123      	str	r3, [r4, #16]
 8005e4e:	2300      	movs	r3, #0
 8005e50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e54:	e7aa      	b.n	8005dac <_printf_i+0x148>
 8005e56:	6923      	ldr	r3, [r4, #16]
 8005e58:	4632      	mov	r2, r6
 8005e5a:	4649      	mov	r1, r9
 8005e5c:	4640      	mov	r0, r8
 8005e5e:	47d0      	blx	sl
 8005e60:	3001      	adds	r0, #1
 8005e62:	d0ad      	beq.n	8005dc0 <_printf_i+0x15c>
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	079b      	lsls	r3, r3, #30
 8005e68:	d413      	bmi.n	8005e92 <_printf_i+0x22e>
 8005e6a:	68e0      	ldr	r0, [r4, #12]
 8005e6c:	9b03      	ldr	r3, [sp, #12]
 8005e6e:	4298      	cmp	r0, r3
 8005e70:	bfb8      	it	lt
 8005e72:	4618      	movlt	r0, r3
 8005e74:	e7a6      	b.n	8005dc4 <_printf_i+0x160>
 8005e76:	2301      	movs	r3, #1
 8005e78:	4632      	mov	r2, r6
 8005e7a:	4649      	mov	r1, r9
 8005e7c:	4640      	mov	r0, r8
 8005e7e:	47d0      	blx	sl
 8005e80:	3001      	adds	r0, #1
 8005e82:	d09d      	beq.n	8005dc0 <_printf_i+0x15c>
 8005e84:	3501      	adds	r5, #1
 8005e86:	68e3      	ldr	r3, [r4, #12]
 8005e88:	9903      	ldr	r1, [sp, #12]
 8005e8a:	1a5b      	subs	r3, r3, r1
 8005e8c:	42ab      	cmp	r3, r5
 8005e8e:	dcf2      	bgt.n	8005e76 <_printf_i+0x212>
 8005e90:	e7eb      	b.n	8005e6a <_printf_i+0x206>
 8005e92:	2500      	movs	r5, #0
 8005e94:	f104 0619 	add.w	r6, r4, #25
 8005e98:	e7f5      	b.n	8005e86 <_printf_i+0x222>
 8005e9a:	bf00      	nop
 8005e9c:	08006261 	.word	0x08006261
 8005ea0:	08006272 	.word	0x08006272

08005ea4 <__sflush_r>:
 8005ea4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eac:	0716      	lsls	r6, r2, #28
 8005eae:	4605      	mov	r5, r0
 8005eb0:	460c      	mov	r4, r1
 8005eb2:	d454      	bmi.n	8005f5e <__sflush_r+0xba>
 8005eb4:	684b      	ldr	r3, [r1, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	dc02      	bgt.n	8005ec0 <__sflush_r+0x1c>
 8005eba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	dd48      	ble.n	8005f52 <__sflush_r+0xae>
 8005ec0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ec2:	2e00      	cmp	r6, #0
 8005ec4:	d045      	beq.n	8005f52 <__sflush_r+0xae>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005ecc:	682f      	ldr	r7, [r5, #0]
 8005ece:	6a21      	ldr	r1, [r4, #32]
 8005ed0:	602b      	str	r3, [r5, #0]
 8005ed2:	d030      	beq.n	8005f36 <__sflush_r+0x92>
 8005ed4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005ed6:	89a3      	ldrh	r3, [r4, #12]
 8005ed8:	0759      	lsls	r1, r3, #29
 8005eda:	d505      	bpl.n	8005ee8 <__sflush_r+0x44>
 8005edc:	6863      	ldr	r3, [r4, #4]
 8005ede:	1ad2      	subs	r2, r2, r3
 8005ee0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005ee2:	b10b      	cbz	r3, 8005ee8 <__sflush_r+0x44>
 8005ee4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ee6:	1ad2      	subs	r2, r2, r3
 8005ee8:	2300      	movs	r3, #0
 8005eea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005eec:	6a21      	ldr	r1, [r4, #32]
 8005eee:	4628      	mov	r0, r5
 8005ef0:	47b0      	blx	r6
 8005ef2:	1c43      	adds	r3, r0, #1
 8005ef4:	89a3      	ldrh	r3, [r4, #12]
 8005ef6:	d106      	bne.n	8005f06 <__sflush_r+0x62>
 8005ef8:	6829      	ldr	r1, [r5, #0]
 8005efa:	291d      	cmp	r1, #29
 8005efc:	d82b      	bhi.n	8005f56 <__sflush_r+0xb2>
 8005efe:	4a2a      	ldr	r2, [pc, #168]	@ (8005fa8 <__sflush_r+0x104>)
 8005f00:	410a      	asrs	r2, r1
 8005f02:	07d6      	lsls	r6, r2, #31
 8005f04:	d427      	bmi.n	8005f56 <__sflush_r+0xb2>
 8005f06:	2200      	movs	r2, #0
 8005f08:	6062      	str	r2, [r4, #4]
 8005f0a:	04d9      	lsls	r1, r3, #19
 8005f0c:	6922      	ldr	r2, [r4, #16]
 8005f0e:	6022      	str	r2, [r4, #0]
 8005f10:	d504      	bpl.n	8005f1c <__sflush_r+0x78>
 8005f12:	1c42      	adds	r2, r0, #1
 8005f14:	d101      	bne.n	8005f1a <__sflush_r+0x76>
 8005f16:	682b      	ldr	r3, [r5, #0]
 8005f18:	b903      	cbnz	r3, 8005f1c <__sflush_r+0x78>
 8005f1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f1e:	602f      	str	r7, [r5, #0]
 8005f20:	b1b9      	cbz	r1, 8005f52 <__sflush_r+0xae>
 8005f22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f26:	4299      	cmp	r1, r3
 8005f28:	d002      	beq.n	8005f30 <__sflush_r+0x8c>
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	f7ff fbf2 	bl	8005714 <_free_r>
 8005f30:	2300      	movs	r3, #0
 8005f32:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f34:	e00d      	b.n	8005f52 <__sflush_r+0xae>
 8005f36:	2301      	movs	r3, #1
 8005f38:	4628      	mov	r0, r5
 8005f3a:	47b0      	blx	r6
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	1c50      	adds	r0, r2, #1
 8005f40:	d1c9      	bne.n	8005ed6 <__sflush_r+0x32>
 8005f42:	682b      	ldr	r3, [r5, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d0c6      	beq.n	8005ed6 <__sflush_r+0x32>
 8005f48:	2b1d      	cmp	r3, #29
 8005f4a:	d001      	beq.n	8005f50 <__sflush_r+0xac>
 8005f4c:	2b16      	cmp	r3, #22
 8005f4e:	d11e      	bne.n	8005f8e <__sflush_r+0xea>
 8005f50:	602f      	str	r7, [r5, #0]
 8005f52:	2000      	movs	r0, #0
 8005f54:	e022      	b.n	8005f9c <__sflush_r+0xf8>
 8005f56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f5a:	b21b      	sxth	r3, r3
 8005f5c:	e01b      	b.n	8005f96 <__sflush_r+0xf2>
 8005f5e:	690f      	ldr	r7, [r1, #16]
 8005f60:	2f00      	cmp	r7, #0
 8005f62:	d0f6      	beq.n	8005f52 <__sflush_r+0xae>
 8005f64:	0793      	lsls	r3, r2, #30
 8005f66:	680e      	ldr	r6, [r1, #0]
 8005f68:	bf08      	it	eq
 8005f6a:	694b      	ldreq	r3, [r1, #20]
 8005f6c:	600f      	str	r7, [r1, #0]
 8005f6e:	bf18      	it	ne
 8005f70:	2300      	movne	r3, #0
 8005f72:	eba6 0807 	sub.w	r8, r6, r7
 8005f76:	608b      	str	r3, [r1, #8]
 8005f78:	f1b8 0f00 	cmp.w	r8, #0
 8005f7c:	dde9      	ble.n	8005f52 <__sflush_r+0xae>
 8005f7e:	6a21      	ldr	r1, [r4, #32]
 8005f80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005f82:	4643      	mov	r3, r8
 8005f84:	463a      	mov	r2, r7
 8005f86:	4628      	mov	r0, r5
 8005f88:	47b0      	blx	r6
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	dc08      	bgt.n	8005fa0 <__sflush_r+0xfc>
 8005f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f96:	81a3      	strh	r3, [r4, #12]
 8005f98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fa0:	4407      	add	r7, r0
 8005fa2:	eba8 0800 	sub.w	r8, r8, r0
 8005fa6:	e7e7      	b.n	8005f78 <__sflush_r+0xd4>
 8005fa8:	dfbffffe 	.word	0xdfbffffe

08005fac <_fflush_r>:
 8005fac:	b538      	push	{r3, r4, r5, lr}
 8005fae:	690b      	ldr	r3, [r1, #16]
 8005fb0:	4605      	mov	r5, r0
 8005fb2:	460c      	mov	r4, r1
 8005fb4:	b913      	cbnz	r3, 8005fbc <_fflush_r+0x10>
 8005fb6:	2500      	movs	r5, #0
 8005fb8:	4628      	mov	r0, r5
 8005fba:	bd38      	pop	{r3, r4, r5, pc}
 8005fbc:	b118      	cbz	r0, 8005fc6 <_fflush_r+0x1a>
 8005fbe:	6a03      	ldr	r3, [r0, #32]
 8005fc0:	b90b      	cbnz	r3, 8005fc6 <_fflush_r+0x1a>
 8005fc2:	f7ff f987 	bl	80052d4 <__sinit>
 8005fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0f3      	beq.n	8005fb6 <_fflush_r+0xa>
 8005fce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005fd0:	07d0      	lsls	r0, r2, #31
 8005fd2:	d404      	bmi.n	8005fde <_fflush_r+0x32>
 8005fd4:	0599      	lsls	r1, r3, #22
 8005fd6:	d402      	bmi.n	8005fde <_fflush_r+0x32>
 8005fd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fda:	f7ff fb98 	bl	800570e <__retarget_lock_acquire_recursive>
 8005fde:	4628      	mov	r0, r5
 8005fe0:	4621      	mov	r1, r4
 8005fe2:	f7ff ff5f 	bl	8005ea4 <__sflush_r>
 8005fe6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fe8:	07da      	lsls	r2, r3, #31
 8005fea:	4605      	mov	r5, r0
 8005fec:	d4e4      	bmi.n	8005fb8 <_fflush_r+0xc>
 8005fee:	89a3      	ldrh	r3, [r4, #12]
 8005ff0:	059b      	lsls	r3, r3, #22
 8005ff2:	d4e1      	bmi.n	8005fb8 <_fflush_r+0xc>
 8005ff4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ff6:	f7ff fb8b 	bl	8005710 <__retarget_lock_release_recursive>
 8005ffa:	e7dd      	b.n	8005fb8 <_fflush_r+0xc>

08005ffc <__swhatbuf_r>:
 8005ffc:	b570      	push	{r4, r5, r6, lr}
 8005ffe:	460c      	mov	r4, r1
 8006000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006004:	2900      	cmp	r1, #0
 8006006:	b096      	sub	sp, #88	@ 0x58
 8006008:	4615      	mov	r5, r2
 800600a:	461e      	mov	r6, r3
 800600c:	da0d      	bge.n	800602a <__swhatbuf_r+0x2e>
 800600e:	89a3      	ldrh	r3, [r4, #12]
 8006010:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006014:	f04f 0100 	mov.w	r1, #0
 8006018:	bf14      	ite	ne
 800601a:	2340      	movne	r3, #64	@ 0x40
 800601c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006020:	2000      	movs	r0, #0
 8006022:	6031      	str	r1, [r6, #0]
 8006024:	602b      	str	r3, [r5, #0]
 8006026:	b016      	add	sp, #88	@ 0x58
 8006028:	bd70      	pop	{r4, r5, r6, pc}
 800602a:	466a      	mov	r2, sp
 800602c:	f000 f848 	bl	80060c0 <_fstat_r>
 8006030:	2800      	cmp	r0, #0
 8006032:	dbec      	blt.n	800600e <__swhatbuf_r+0x12>
 8006034:	9901      	ldr	r1, [sp, #4]
 8006036:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800603a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800603e:	4259      	negs	r1, r3
 8006040:	4159      	adcs	r1, r3
 8006042:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006046:	e7eb      	b.n	8006020 <__swhatbuf_r+0x24>

08006048 <__smakebuf_r>:
 8006048:	898b      	ldrh	r3, [r1, #12]
 800604a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800604c:	079d      	lsls	r5, r3, #30
 800604e:	4606      	mov	r6, r0
 8006050:	460c      	mov	r4, r1
 8006052:	d507      	bpl.n	8006064 <__smakebuf_r+0x1c>
 8006054:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006058:	6023      	str	r3, [r4, #0]
 800605a:	6123      	str	r3, [r4, #16]
 800605c:	2301      	movs	r3, #1
 800605e:	6163      	str	r3, [r4, #20]
 8006060:	b003      	add	sp, #12
 8006062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006064:	ab01      	add	r3, sp, #4
 8006066:	466a      	mov	r2, sp
 8006068:	f7ff ffc8 	bl	8005ffc <__swhatbuf_r>
 800606c:	9f00      	ldr	r7, [sp, #0]
 800606e:	4605      	mov	r5, r0
 8006070:	4639      	mov	r1, r7
 8006072:	4630      	mov	r0, r6
 8006074:	f7ff fbba 	bl	80057ec <_malloc_r>
 8006078:	b948      	cbnz	r0, 800608e <__smakebuf_r+0x46>
 800607a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800607e:	059a      	lsls	r2, r3, #22
 8006080:	d4ee      	bmi.n	8006060 <__smakebuf_r+0x18>
 8006082:	f023 0303 	bic.w	r3, r3, #3
 8006086:	f043 0302 	orr.w	r3, r3, #2
 800608a:	81a3      	strh	r3, [r4, #12]
 800608c:	e7e2      	b.n	8006054 <__smakebuf_r+0xc>
 800608e:	89a3      	ldrh	r3, [r4, #12]
 8006090:	6020      	str	r0, [r4, #0]
 8006092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006096:	81a3      	strh	r3, [r4, #12]
 8006098:	9b01      	ldr	r3, [sp, #4]
 800609a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800609e:	b15b      	cbz	r3, 80060b8 <__smakebuf_r+0x70>
 80060a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060a4:	4630      	mov	r0, r6
 80060a6:	f000 f81d 	bl	80060e4 <_isatty_r>
 80060aa:	b128      	cbz	r0, 80060b8 <__smakebuf_r+0x70>
 80060ac:	89a3      	ldrh	r3, [r4, #12]
 80060ae:	f023 0303 	bic.w	r3, r3, #3
 80060b2:	f043 0301 	orr.w	r3, r3, #1
 80060b6:	81a3      	strh	r3, [r4, #12]
 80060b8:	89a3      	ldrh	r3, [r4, #12]
 80060ba:	431d      	orrs	r5, r3
 80060bc:	81a5      	strh	r5, [r4, #12]
 80060be:	e7cf      	b.n	8006060 <__smakebuf_r+0x18>

080060c0 <_fstat_r>:
 80060c0:	b538      	push	{r3, r4, r5, lr}
 80060c2:	4d07      	ldr	r5, [pc, #28]	@ (80060e0 <_fstat_r+0x20>)
 80060c4:	2300      	movs	r3, #0
 80060c6:	4604      	mov	r4, r0
 80060c8:	4608      	mov	r0, r1
 80060ca:	4611      	mov	r1, r2
 80060cc:	602b      	str	r3, [r5, #0]
 80060ce:	f7fa fce0 	bl	8000a92 <_fstat>
 80060d2:	1c43      	adds	r3, r0, #1
 80060d4:	d102      	bne.n	80060dc <_fstat_r+0x1c>
 80060d6:	682b      	ldr	r3, [r5, #0]
 80060d8:	b103      	cbz	r3, 80060dc <_fstat_r+0x1c>
 80060da:	6023      	str	r3, [r4, #0]
 80060dc:	bd38      	pop	{r3, r4, r5, pc}
 80060de:	bf00      	nop
 80060e0:	200021d0 	.word	0x200021d0

080060e4 <_isatty_r>:
 80060e4:	b538      	push	{r3, r4, r5, lr}
 80060e6:	4d06      	ldr	r5, [pc, #24]	@ (8006100 <_isatty_r+0x1c>)
 80060e8:	2300      	movs	r3, #0
 80060ea:	4604      	mov	r4, r0
 80060ec:	4608      	mov	r0, r1
 80060ee:	602b      	str	r3, [r5, #0]
 80060f0:	f7fa fcd4 	bl	8000a9c <_isatty>
 80060f4:	1c43      	adds	r3, r0, #1
 80060f6:	d102      	bne.n	80060fe <_isatty_r+0x1a>
 80060f8:	682b      	ldr	r3, [r5, #0]
 80060fa:	b103      	cbz	r3, 80060fe <_isatty_r+0x1a>
 80060fc:	6023      	str	r3, [r4, #0]
 80060fe:	bd38      	pop	{r3, r4, r5, pc}
 8006100:	200021d0 	.word	0x200021d0

08006104 <_sbrk_r>:
 8006104:	b538      	push	{r3, r4, r5, lr}
 8006106:	4d06      	ldr	r5, [pc, #24]	@ (8006120 <_sbrk_r+0x1c>)
 8006108:	2300      	movs	r3, #0
 800610a:	4604      	mov	r4, r0
 800610c:	4608      	mov	r0, r1
 800610e:	602b      	str	r3, [r5, #0]
 8006110:	f7fa fcc8 	bl	8000aa4 <_sbrk>
 8006114:	1c43      	adds	r3, r0, #1
 8006116:	d102      	bne.n	800611e <_sbrk_r+0x1a>
 8006118:	682b      	ldr	r3, [r5, #0]
 800611a:	b103      	cbz	r3, 800611e <_sbrk_r+0x1a>
 800611c:	6023      	str	r3, [r4, #0]
 800611e:	bd38      	pop	{r3, r4, r5, pc}
 8006120:	200021d0 	.word	0x200021d0

08006124 <_init>:
 8006124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006126:	bf00      	nop
 8006128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800612a:	bc08      	pop	{r3}
 800612c:	469e      	mov	lr, r3
 800612e:	4770      	bx	lr

08006130 <_fini>:
 8006130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006132:	bf00      	nop
 8006134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006136:	bc08      	pop	{r3}
 8006138:	469e      	mov	lr, r3
 800613a:	4770      	bx	lr
