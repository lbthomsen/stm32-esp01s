
blackpill_f411_bridge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000277c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002914  08002914  00003914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800292c  0800292c  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800292c  0800292c  0000392c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002934  08002934  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002934  08002934  00003934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002938  08002938  00003938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800293c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08002948  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002948  000040bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080df  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000162a  00000000  00000000  0000c11b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  0000d748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000535  00000000  00000000  0000de18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001241  00000000  00000000  0000e34d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007e21  00000000  00000000  0000f58e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008210a  00000000  00000000  000173af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000994b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ae8  00000000  00000000  000994fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0009afe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080028fc 	.word	0x080028fc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080028fc 	.word	0x080028fc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800050a:	f000 fa87 	bl	8000a1c <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800050e:	f000 f827 	bl	8000560 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000512:	f000 f8e1 	bl	80006d8 <MX_GPIO_Init>
    MX_USART1_UART_Init();
 8000516:	f000 f88b 	bl	8000630 <MX_USART1_UART_Init>
    MX_USART2_UART_Init();
 800051a:	f000 f8b3 	bl	8000684 <MX_USART2_UART_Init>
    /* USER CODE BEGIN 2 */

    HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_SET);
 800051e:	2201      	movs	r2, #1
 8000520:	2120      	movs	r1, #32
 8000522:	480c      	ldr	r0, [pc, #48]	@ (8000554 <main+0x50>)
 8000524:	f000 fe14 	bl	8001150 <HAL_GPIO_WritePin>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    uint32_t now = 0, next_blink = 500;
 8000528:	2300      	movs	r3, #0
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000530:	607b      	str	r3, [r7, #4]
    while (1) {

        now = uwTick;
 8000532:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <main+0x54>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	603b      	str	r3, [r7, #0]

        if (now >= next_blink) {
 8000538:	683a      	ldr	r2, [r7, #0]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	429a      	cmp	r2, r3
 800053e:	d3f8      	bcc.n	8000532 <main+0x2e>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000540:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000544:	4805      	ldr	r0, [pc, #20]	@ (800055c <main+0x58>)
 8000546:	f000 fe1c 	bl	8001182 <HAL_GPIO_TogglePin>
            next_blink = now + 500;
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000550:	607b      	str	r3, [r7, #4]
        now = uwTick;
 8000552:	e7ee      	b.n	8000532 <main+0x2e>
 8000554:	40020000 	.word	0x40020000
 8000558:	200000b8 	.word	0x200000b8
 800055c:	40020800 	.word	0x40020800

08000560 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	@ 0x50
 8000564:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	@ 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f002 f998 	bl	80028a4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b27      	ldr	r3, [pc, #156]	@ (8000628 <SystemClock_Config+0xc8>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058c:	4a26      	ldr	r2, [pc, #152]	@ (8000628 <SystemClock_Config+0xc8>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	@ 0x40
 8000594:	4b24      	ldr	r3, [pc, #144]	@ (8000628 <SystemClock_Config+0xc8>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b21      	ldr	r3, [pc, #132]	@ (800062c <SystemClock_Config+0xcc>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a20      	ldr	r2, [pc, #128]	@ (800062c <SystemClock_Config+0xcc>)
 80005aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b1e      	ldr	r3, [pc, #120]	@ (800062c <SystemClock_Config+0xcc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005bc:	2301      	movs	r3, #1
 80005be:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005c4:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 12;
 80005d0:	230c      	movs	r3, #12
 80005d2:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 96;
 80005d4:	2360      	movs	r3, #96	@ 0x60
 80005d6:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d8:	2302      	movs	r3, #2
 80005da:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80005dc:	2304      	movs	r3, #4
 80005de:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fde7 	bl	80011b8 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x94>
            {
        Error_Handler();
 80005f0:	f000 f8da 	bl	80007a8 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60fb      	str	r3, [r7, #12]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f8:	2302      	movs	r3, #2
 80005fa:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000600:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000604:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	2103      	movs	r1, #3
 8000610:	4618      	mov	r0, r3
 8000612:	f001 f849 	bl	80016a8 <HAL_RCC_ClockConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xc0>
            {
        Error_Handler();
 800061c:	f000 f8c4 	bl	80007a8 <Error_Handler>
    }
}
 8000620:	bf00      	nop
 8000622:	3750      	adds	r7, #80	@ 0x50
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8000634:	4b11      	ldr	r3, [pc, #68]	@ (800067c <MX_USART1_UART_Init+0x4c>)
 8000636:	4a12      	ldr	r2, [pc, #72]	@ (8000680 <MX_USART1_UART_Init+0x50>)
 8000638:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 800063a:	4b10      	ldr	r3, [pc, #64]	@ (800067c <MX_USART1_UART_Init+0x4c>)
 800063c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000640:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000642:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <MX_USART1_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000648:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <MX_USART1_UART_Init+0x4c>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 800064e:	4b0b      	ldr	r3, [pc, #44]	@ (800067c <MX_USART1_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000654:	4b09      	ldr	r3, [pc, #36]	@ (800067c <MX_USART1_UART_Init+0x4c>)
 8000656:	220c      	movs	r2, #12
 8000658:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065a:	4b08      	ldr	r3, [pc, #32]	@ (800067c <MX_USART1_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000660:	4b06      	ldr	r3, [pc, #24]	@ (800067c <MX_USART1_UART_Init+0x4c>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	@ (800067c <MX_USART1_UART_Init+0x4c>)
 8000668:	f001 f9fe 	bl	8001a68 <HAL_UART_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_USART1_UART_Init+0x46>
            {
        Error_Handler();
 8000672:	f000 f899 	bl	80007a8 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000028 	.word	0x20000028
 8000680:	40011000 	.word	0x40011000

08000684 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8000688:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <MX_USART2_UART_Init+0x4c>)
 800068a:	4a12      	ldr	r2, [pc, #72]	@ (80006d4 <MX_USART2_UART_Init+0x50>)
 800068c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800068e:	4b10      	ldr	r3, [pc, #64]	@ (80006d0 <MX_USART2_UART_Init+0x4c>)
 8000690:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000694:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000696:	4b0e      	ldr	r3, [pc, #56]	@ (80006d0 <MX_USART2_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800069c:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <MX_USART2_UART_Init+0x4c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	@ (80006d0 <MX_USART2_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80006a8:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <MX_USART2_UART_Init+0x4c>)
 80006aa:	220c      	movs	r2, #12
 80006ac:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ae:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <MX_USART2_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <MX_USART2_UART_Init+0x4c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	@ (80006d0 <MX_USART2_UART_Init+0x4c>)
 80006bc:	f001 f9d4 	bl	8001a68 <HAL_UART_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_USART2_UART_Init+0x46>
            {
        Error_Handler();
 80006c6:	f000 f86f 	bl	80007a8 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000070 	.word	0x20000070
 80006d4:	40004400 	.word	0x40004400

080006d8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	4b2a      	ldr	r3, [pc, #168]	@ (800079c <MX_GPIO_Init+0xc4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	4a29      	ldr	r2, [pc, #164]	@ (800079c <MX_GPIO_Init+0xc4>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fe:	4b27      	ldr	r3, [pc, #156]	@ (800079c <MX_GPIO_Init+0xc4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b23      	ldr	r3, [pc, #140]	@ (800079c <MX_GPIO_Init+0xc4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a22      	ldr	r2, [pc, #136]	@ (800079c <MX_GPIO_Init+0xc4>)
 8000714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b20      	ldr	r3, [pc, #128]	@ (800079c <MX_GPIO_Init+0xc4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	4b1c      	ldr	r3, [pc, #112]	@ (800079c <MX_GPIO_Init+0xc4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a1b      	ldr	r2, [pc, #108]	@ (800079c <MX_GPIO_Init+0xc4>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b19      	ldr	r3, [pc, #100]	@ (800079c <MX_GPIO_Init+0xc4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000748:	4815      	ldr	r0, [pc, #84]	@ (80007a0 <MX_GPIO_Init+0xc8>)
 800074a:	f000 fd01 	bl	8001150 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2120      	movs	r1, #32
 8000752:	4814      	ldr	r0, [pc, #80]	@ (80007a4 <MX_GPIO_Init+0xcc>)
 8000754:	f000 fcfc 	bl	8001150 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_Pin */
    GPIO_InitStruct.Pin = LED_Pin;
 8000758:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800075c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800075e:	2311      	movs	r3, #17
 8000760:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	4619      	mov	r1, r3
 8000770:	480b      	ldr	r0, [pc, #44]	@ (80007a0 <MX_GPIO_Init+0xc8>)
 8000772:	f000 fb69 	bl	8000e48 <HAL_GPIO_Init>

    /*Configure GPIO pin : ESP_EN_Pin */
    GPIO_InitStruct.Pin = ESP_EN_Pin;
 8000776:	2320      	movs	r3, #32
 8000778:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(ESP_EN_GPIO_Port, &GPIO_InitStruct);
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	4619      	mov	r1, r3
 800078c:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <MX_GPIO_Init+0xcc>)
 800078e:	f000 fb5b 	bl	8000e48 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000792:	bf00      	nop
 8000794:	3720      	adds	r7, #32
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020800 	.word	0x40020800
 80007a4:	40020000 	.word	0x40020000

080007a8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <Error_Handler+0x8>

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <HAL_MspInit+0x4c>)
 80007c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000800 <HAL_MspInit+0x4c>)
 80007c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000800 <HAL_MspInit+0x4c>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <HAL_MspInit+0x4c>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007de:	4a08      	ldr	r2, [pc, #32]	@ (8000800 <HAL_MspInit+0x4c>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007e6:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <HAL_MspInit+0x4c>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800

08000804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08c      	sub	sp, #48	@ 0x30
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a3a      	ldr	r2, [pc, #232]	@ (800090c <HAL_UART_MspInit+0x108>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d135      	bne.n	8000892 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
 800082a:	4b39      	ldr	r3, [pc, #228]	@ (8000910 <HAL_UART_MspInit+0x10c>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800082e:	4a38      	ldr	r2, [pc, #224]	@ (8000910 <HAL_UART_MspInit+0x10c>)
 8000830:	f043 0310 	orr.w	r3, r3, #16
 8000834:	6453      	str	r3, [r2, #68]	@ 0x44
 8000836:	4b36      	ldr	r3, [pc, #216]	@ (8000910 <HAL_UART_MspInit+0x10c>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800083a:	f003 0310 	and.w	r3, r3, #16
 800083e:	61bb      	str	r3, [r7, #24]
 8000840:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	4b32      	ldr	r3, [pc, #200]	@ (8000910 <HAL_UART_MspInit+0x10c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a31      	ldr	r2, [pc, #196]	@ (8000910 <HAL_UART_MspInit+0x10c>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b2f      	ldr	r3, [pc, #188]	@ (8000910 <HAL_UART_MspInit+0x10c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800085e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000870:	2307      	movs	r3, #7
 8000872:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	4826      	ldr	r0, [pc, #152]	@ (8000914 <HAL_UART_MspInit+0x110>)
 800087c:	f000 fae4 	bl	8000e48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	2100      	movs	r1, #0
 8000884:	2025      	movs	r0, #37	@ 0x25
 8000886:	f000 fa16 	bl	8000cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800088a:	2025      	movs	r0, #37	@ 0x25
 800088c:	f000 fa2f 	bl	8000cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000890:	e038      	b.n	8000904 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a20      	ldr	r2, [pc, #128]	@ (8000918 <HAL_UART_MspInit+0x114>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d133      	bne.n	8000904 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800089c:	2300      	movs	r3, #0
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000910 <HAL_UART_MspInit+0x10c>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a4:	4a1a      	ldr	r2, [pc, #104]	@ (8000910 <HAL_UART_MspInit+0x10c>)
 80008a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ac:	4b18      	ldr	r3, [pc, #96]	@ (8000910 <HAL_UART_MspInit+0x10c>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <HAL_UART_MspInit+0x10c>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c0:	4a13      	ldr	r2, [pc, #76]	@ (8000910 <HAL_UART_MspInit+0x10c>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c8:	4b11      	ldr	r3, [pc, #68]	@ (8000910 <HAL_UART_MspInit+0x10c>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008d4:	230c      	movs	r3, #12
 80008d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008e4:	2307      	movs	r3, #7
 80008e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	4809      	ldr	r0, [pc, #36]	@ (8000914 <HAL_UART_MspInit+0x110>)
 80008f0:	f000 faaa 	bl	8000e48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2100      	movs	r1, #0
 80008f8:	2026      	movs	r0, #38	@ 0x26
 80008fa:	f000 f9dc 	bl	8000cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008fe:	2026      	movs	r0, #38	@ 0x26
 8000900:	f000 f9f5 	bl	8000cee <HAL_NVIC_EnableIRQ>
}
 8000904:	bf00      	nop
 8000906:	3730      	adds	r7, #48	@ 0x30
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40011000 	.word	0x40011000
 8000910:	40023800 	.word	0x40023800
 8000914:	40020000 	.word	0x40020000
 8000918:	40004400 	.word	0x40004400

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <NMI_Handler+0x4>

08000924 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <HardFault_Handler+0x4>

0800092c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <MemManage_Handler+0x4>

08000934 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <BusFault_Handler+0x4>

0800093c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <UsageFault_Handler+0x4>

08000944 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000972:	f000 f8a5 	bl	8000ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000980:	4802      	ldr	r0, [pc, #8]	@ (800098c <USART1_IRQHandler+0x10>)
 8000982:	f001 f8c1 	bl	8001b08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000028 	.word	0x20000028

08000990 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000994:	4802      	ldr	r0, [pc, #8]	@ (80009a0 <USART2_IRQHandler+0x10>)
 8000996:	f001 f8b7 	bl	8001b08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000070 	.word	0x20000070

080009a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a8:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <SystemInit+0x20>)
 80009aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ae:	4a05      	ldr	r2, [pc, #20]	@ (80009c4 <SystemInit+0x20>)
 80009b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009cc:	f7ff ffea 	bl	80009a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009d0:	480c      	ldr	r0, [pc, #48]	@ (8000a04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009d2:	490d      	ldr	r1, [pc, #52]	@ (8000a08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009d4:	4a0d      	ldr	r2, [pc, #52]	@ (8000a0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d8:	e002      	b.n	80009e0 <LoopCopyDataInit>

080009da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009de:	3304      	adds	r3, #4

080009e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e4:	d3f9      	bcc.n	80009da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000a14 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ec:	e001      	b.n	80009f2 <LoopFillZerobss>

080009ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f0:	3204      	adds	r2, #4

080009f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f4:	d3fb      	bcc.n	80009ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009f6:	f001 ff5d 	bl	80028b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009fa:	f7ff fd83 	bl	8000504 <main>
  bx  lr    
 80009fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a0c:	0800293c 	.word	0x0800293c
  ldr r2, =_sbss
 8000a10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a14:	200000bc 	.word	0x200000bc

08000a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a18:	e7fe      	b.n	8000a18 <ADC_IRQHandler>
	...

08000a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a20:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <HAL_Init+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0d      	ldr	r2, [pc, #52]	@ (8000a5c <HAL_Init+0x40>)
 8000a26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <HAL_Init+0x40>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0a      	ldr	r2, [pc, #40]	@ (8000a5c <HAL_Init+0x40>)
 8000a32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a38:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <HAL_Init+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a07      	ldr	r2, [pc, #28]	@ (8000a5c <HAL_Init+0x40>)
 8000a3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a44:	2003      	movs	r0, #3
 8000a46:	f000 f92b 	bl	8000ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4a:	200f      	movs	r0, #15
 8000a4c:	f000 f808 	bl	8000a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a50:	f7ff feb0 	bl	80007b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023c00 	.word	0x40023c00

08000a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a68:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <HAL_InitTick+0x54>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b12      	ldr	r3, [pc, #72]	@ (8000ab8 <HAL_InitTick+0x58>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	4619      	mov	r1, r3
 8000a72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 f943 	bl	8000d0a <HAL_SYSTICK_Config>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e00e      	b.n	8000aac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b0f      	cmp	r3, #15
 8000a92:	d80a      	bhi.n	8000aaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a94:	2200      	movs	r2, #0
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a9c:	f000 f90b 	bl	8000cb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa0:	4a06      	ldr	r2, [pc, #24]	@ (8000abc <HAL_InitTick+0x5c>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e000      	b.n	8000aac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	20000004 	.word	0x20000004

08000ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_IncTick+0x20>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_IncTick+0x24>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	4a04      	ldr	r2, [pc, #16]	@ (8000ae4 <HAL_IncTick+0x24>)
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	200000b8 	.word	0x200000b8

08000ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return uwTick;
 8000aec:	4b03      	ldr	r3, [pc, #12]	@ (8000afc <HAL_GetTick+0x14>)
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	200000b8 	.word	0x200000b8

08000b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b32:	4a04      	ldr	r2, [pc, #16]	@ (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	60d3      	str	r3, [r2, #12]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b4c:	4b04      	ldr	r3, [pc, #16]	@ (8000b60 <__NVIC_GetPriorityGrouping+0x18>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	0a1b      	lsrs	r3, r3, #8
 8000b52:	f003 0307 	and.w	r3, r3, #7
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	db0b      	blt.n	8000b8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	f003 021f 	and.w	r2, r3, #31
 8000b7c:	4907      	ldr	r1, [pc, #28]	@ (8000b9c <__NVIC_EnableIRQ+0x38>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	095b      	lsrs	r3, r3, #5
 8000b84:	2001      	movs	r0, #1
 8000b86:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000e100 	.word	0xe000e100

08000ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	6039      	str	r1, [r7, #0]
 8000baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	db0a      	blt.n	8000bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	490c      	ldr	r1, [pc, #48]	@ (8000bec <__NVIC_SetPriority+0x4c>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	0112      	lsls	r2, r2, #4
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc8:	e00a      	b.n	8000be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4908      	ldr	r1, [pc, #32]	@ (8000bf0 <__NVIC_SetPriority+0x50>)
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	f003 030f 	and.w	r3, r3, #15
 8000bd6:	3b04      	subs	r3, #4
 8000bd8:	0112      	lsls	r2, r2, #4
 8000bda:	b2d2      	uxtb	r2, r2
 8000bdc:	440b      	add	r3, r1
 8000bde:	761a      	strb	r2, [r3, #24]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000e100 	.word	0xe000e100
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	@ 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	f1c3 0307 	rsb	r3, r3, #7
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	bf28      	it	cs
 8000c12:	2304      	movcs	r3, #4
 8000c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	2b06      	cmp	r3, #6
 8000c1c:	d902      	bls.n	8000c24 <NVIC_EncodePriority+0x30>
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3b03      	subs	r3, #3
 8000c22:	e000      	b.n	8000c26 <NVIC_EncodePriority+0x32>
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43da      	mvns	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	401a      	ands	r2, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c3c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	43d9      	mvns	r1, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	4313      	orrs	r3, r2
         );
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3724      	adds	r7, #36	@ 0x24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c6c:	d301      	bcc.n	8000c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00f      	b.n	8000c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <SysTick_Config+0x40>)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7a:	210f      	movs	r1, #15
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c80:	f7ff ff8e 	bl	8000ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c84:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <SysTick_Config+0x40>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8a:	4b04      	ldr	r3, [pc, #16]	@ (8000c9c <SysTick_Config+0x40>)
 8000c8c:	2207      	movs	r2, #7
 8000c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	e000e010 	.word	0xe000e010

08000ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff ff29 	bl	8000b00 <__NVIC_SetPriorityGrouping>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b086      	sub	sp, #24
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
 8000cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc8:	f7ff ff3e 	bl	8000b48 <__NVIC_GetPriorityGrouping>
 8000ccc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	68b9      	ldr	r1, [r7, #8]
 8000cd2:	6978      	ldr	r0, [r7, #20]
 8000cd4:	f7ff ff8e 	bl	8000bf4 <NVIC_EncodePriority>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cde:	4611      	mov	r1, r2
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff5d 	bl	8000ba0 <__NVIC_SetPriority>
}
 8000ce6:	bf00      	nop
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff31 	bl	8000b64 <__NVIC_EnableIRQ>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ffa2 	bl	8000c5c <SysTick_Config>
 8000d18:	4603      	mov	r3, r0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b084      	sub	sp, #16
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d2e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d30:	f7ff feda 	bl	8000ae8 <HAL_GetTick>
 8000d34:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d008      	beq.n	8000d54 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2280      	movs	r2, #128	@ 0x80
 8000d46:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e052      	b.n	8000dfa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f022 0216 	bic.w	r2, r2, #22
 8000d62:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	695a      	ldr	r2, [r3, #20]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d72:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d103      	bne.n	8000d84 <HAL_DMA_Abort+0x62>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d007      	beq.n	8000d94 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f022 0208 	bic.w	r2, r2, #8
 8000d92:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f022 0201 	bic.w	r2, r2, #1
 8000da2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000da4:	e013      	b.n	8000dce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000da6:	f7ff fe9f 	bl	8000ae8 <HAL_GetTick>
 8000daa:	4602      	mov	r2, r0
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	2b05      	cmp	r3, #5
 8000db2:	d90c      	bls.n	8000dce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2220      	movs	r2, #32
 8000db8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e015      	b.n	8000dfa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1e4      	bne.n	8000da6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000de0:	223f      	movs	r2, #63	@ 0x3f
 8000de2:	409a      	lsls	r2, r3
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2201      	movs	r2, #1
 8000dec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d004      	beq.n	8000e20 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2280      	movs	r2, #128	@ 0x80
 8000e1a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e00c      	b.n	8000e3a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2205      	movs	r2, #5
 8000e24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f022 0201 	bic.w	r2, r2, #1
 8000e36:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	@ 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
 8000e62:	e159      	b.n	8001118 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e64:	2201      	movs	r2, #1
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	f040 8148 	bne.w	8001112 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d005      	beq.n	8000e9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d130      	bne.n	8000efc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	68da      	ldr	r2, [r3, #12]
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	091b      	lsrs	r3, r3, #4
 8000ee6:	f003 0201 	and.w	r2, r3, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d017      	beq.n	8000f38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d123      	bne.n	8000f8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	08da      	lsrs	r2, r3, #3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3208      	adds	r2, #8
 8000f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	691a      	ldr	r2, [r3, #16]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	08da      	lsrs	r2, r3, #3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3208      	adds	r2, #8
 8000f86:	69b9      	ldr	r1, [r7, #24]
 8000f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0203 	and.w	r2, r3, #3
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 80a2 	beq.w	8001112 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b57      	ldr	r3, [pc, #348]	@ (8001130 <HAL_GPIO_Init+0x2e8>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd6:	4a56      	ldr	r2, [pc, #344]	@ (8001130 <HAL_GPIO_Init+0x2e8>)
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fde:	4b54      	ldr	r3, [pc, #336]	@ (8001130 <HAL_GPIO_Init+0x2e8>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fea:	4a52      	ldr	r2, [pc, #328]	@ (8001134 <HAL_GPIO_Init+0x2ec>)
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	089b      	lsrs	r3, r3, #2
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	220f      	movs	r2, #15
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a49      	ldr	r2, [pc, #292]	@ (8001138 <HAL_GPIO_Init+0x2f0>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d019      	beq.n	800104a <HAL_GPIO_Init+0x202>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a48      	ldr	r2, [pc, #288]	@ (800113c <HAL_GPIO_Init+0x2f4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d013      	beq.n	8001046 <HAL_GPIO_Init+0x1fe>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a47      	ldr	r2, [pc, #284]	@ (8001140 <HAL_GPIO_Init+0x2f8>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d00d      	beq.n	8001042 <HAL_GPIO_Init+0x1fa>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a46      	ldr	r2, [pc, #280]	@ (8001144 <HAL_GPIO_Init+0x2fc>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d007      	beq.n	800103e <HAL_GPIO_Init+0x1f6>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a45      	ldr	r2, [pc, #276]	@ (8001148 <HAL_GPIO_Init+0x300>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d101      	bne.n	800103a <HAL_GPIO_Init+0x1f2>
 8001036:	2304      	movs	r3, #4
 8001038:	e008      	b.n	800104c <HAL_GPIO_Init+0x204>
 800103a:	2307      	movs	r3, #7
 800103c:	e006      	b.n	800104c <HAL_GPIO_Init+0x204>
 800103e:	2303      	movs	r3, #3
 8001040:	e004      	b.n	800104c <HAL_GPIO_Init+0x204>
 8001042:	2302      	movs	r3, #2
 8001044:	e002      	b.n	800104c <HAL_GPIO_Init+0x204>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_GPIO_Init+0x204>
 800104a:	2300      	movs	r3, #0
 800104c:	69fa      	ldr	r2, [r7, #28]
 800104e:	f002 0203 	and.w	r2, r2, #3
 8001052:	0092      	lsls	r2, r2, #2
 8001054:	4093      	lsls	r3, r2
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800105c:	4935      	ldr	r1, [pc, #212]	@ (8001134 <HAL_GPIO_Init+0x2ec>)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800106a:	4b38      	ldr	r3, [pc, #224]	@ (800114c <HAL_GPIO_Init+0x304>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800108e:	4a2f      	ldr	r2, [pc, #188]	@ (800114c <HAL_GPIO_Init+0x304>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001094:	4b2d      	ldr	r3, [pc, #180]	@ (800114c <HAL_GPIO_Init+0x304>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b8:	4a24      	ldr	r2, [pc, #144]	@ (800114c <HAL_GPIO_Init+0x304>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010be:	4b23      	ldr	r3, [pc, #140]	@ (800114c <HAL_GPIO_Init+0x304>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010e2:	4a1a      	ldr	r2, [pc, #104]	@ (800114c <HAL_GPIO_Init+0x304>)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e8:	4b18      	ldr	r3, [pc, #96]	@ (800114c <HAL_GPIO_Init+0x304>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800110c:	4a0f      	ldr	r2, [pc, #60]	@ (800114c <HAL_GPIO_Init+0x304>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3301      	adds	r3, #1
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	2b0f      	cmp	r3, #15
 800111c:	f67f aea2 	bls.w	8000e64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3724      	adds	r7, #36	@ 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40013800 	.word	0x40013800
 8001138:	40020000 	.word	0x40020000
 800113c:	40020400 	.word	0x40020400
 8001140:	40020800 	.word	0x40020800
 8001144:	40020c00 	.word	0x40020c00
 8001148:	40021000 	.word	0x40021000
 800114c:	40013c00 	.word	0x40013c00

08001150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
 800115c:	4613      	mov	r3, r2
 800115e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001160:	787b      	ldrb	r3, [r7, #1]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001166:	887a      	ldrh	r2, [r7, #2]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800116c:	e003      	b.n	8001176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800116e:	887b      	ldrh	r3, [r7, #2]
 8001170:	041a      	lsls	r2, r3, #16
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	619a      	str	r2, [r3, #24]
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001182:	b480      	push	{r7}
 8001184:	b085      	sub	sp, #20
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	460b      	mov	r3, r1
 800118c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001194:	887a      	ldrh	r2, [r7, #2]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4013      	ands	r3, r2
 800119a:	041a      	lsls	r2, r3, #16
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	43d9      	mvns	r1, r3
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	400b      	ands	r3, r1
 80011a4:	431a      	orrs	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	619a      	str	r2, [r3, #24]
}
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e267      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d075      	beq.n	80012c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011d6:	4b88      	ldr	r3, [pc, #544]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 030c 	and.w	r3, r3, #12
 80011de:	2b04      	cmp	r3, #4
 80011e0:	d00c      	beq.n	80011fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011e2:	4b85      	ldr	r3, [pc, #532]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d112      	bne.n	8001214 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ee:	4b82      	ldr	r3, [pc, #520]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80011fa:	d10b      	bne.n	8001214 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fc:	4b7e      	ldr	r3, [pc, #504]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d05b      	beq.n	80012c0 <HAL_RCC_OscConfig+0x108>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d157      	bne.n	80012c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e242      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800121c:	d106      	bne.n	800122c <HAL_RCC_OscConfig+0x74>
 800121e:	4b76      	ldr	r3, [pc, #472]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a75      	ldr	r2, [pc, #468]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e01d      	b.n	8001268 <HAL_RCC_OscConfig+0xb0>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001234:	d10c      	bne.n	8001250 <HAL_RCC_OscConfig+0x98>
 8001236:	4b70      	ldr	r3, [pc, #448]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a6f      	ldr	r2, [pc, #444]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 800123c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	4b6d      	ldr	r3, [pc, #436]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a6c      	ldr	r2, [pc, #432]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001248:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	e00b      	b.n	8001268 <HAL_RCC_OscConfig+0xb0>
 8001250:	4b69      	ldr	r3, [pc, #420]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a68      	ldr	r2, [pc, #416]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001256:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	4b66      	ldr	r3, [pc, #408]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a65      	ldr	r2, [pc, #404]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001262:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d013      	beq.n	8001298 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001270:	f7ff fc3a 	bl	8000ae8 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001278:	f7ff fc36 	bl	8000ae8 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b64      	cmp	r3, #100	@ 0x64
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e207      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128a:	4b5b      	ldr	r3, [pc, #364]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f0      	beq.n	8001278 <HAL_RCC_OscConfig+0xc0>
 8001296:	e014      	b.n	80012c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001298:	f7ff fc26 	bl	8000ae8 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a0:	f7ff fc22 	bl	8000ae8 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b64      	cmp	r3, #100	@ 0x64
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e1f3      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b2:	4b51      	ldr	r3, [pc, #324]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f0      	bne.n	80012a0 <HAL_RCC_OscConfig+0xe8>
 80012be:	e000      	b.n	80012c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d063      	beq.n	8001396 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012ce:	4b4a      	ldr	r3, [pc, #296]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 030c 	and.w	r3, r3, #12
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00b      	beq.n	80012f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012da:	4b47      	ldr	r3, [pc, #284]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012e2:	2b08      	cmp	r3, #8
 80012e4:	d11c      	bne.n	8001320 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012e6:	4b44      	ldr	r3, [pc, #272]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d116      	bne.n	8001320 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f2:	4b41      	ldr	r3, [pc, #260]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d005      	beq.n	800130a <HAL_RCC_OscConfig+0x152>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d001      	beq.n	800130a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e1c7      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130a:	4b3b      	ldr	r3, [pc, #236]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	4937      	ldr	r1, [pc, #220]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 800131a:	4313      	orrs	r3, r2
 800131c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131e:	e03a      	b.n	8001396 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d020      	beq.n	800136a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001328:	4b34      	ldr	r3, [pc, #208]	@ (80013fc <HAL_RCC_OscConfig+0x244>)
 800132a:	2201      	movs	r2, #1
 800132c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800132e:	f7ff fbdb 	bl	8000ae8 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001336:	f7ff fbd7 	bl	8000ae8 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e1a8      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001348:	4b2b      	ldr	r3, [pc, #172]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0f0      	beq.n	8001336 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001354:	4b28      	ldr	r3, [pc, #160]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	4925      	ldr	r1, [pc, #148]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001364:	4313      	orrs	r3, r2
 8001366:	600b      	str	r3, [r1, #0]
 8001368:	e015      	b.n	8001396 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800136a:	4b24      	ldr	r3, [pc, #144]	@ (80013fc <HAL_RCC_OscConfig+0x244>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001370:	f7ff fbba 	bl	8000ae8 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001378:	f7ff fbb6 	bl	8000ae8 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e187      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138a:	4b1b      	ldr	r3, [pc, #108]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d036      	beq.n	8001410 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d016      	beq.n	80013d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013aa:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <HAL_RCC_OscConfig+0x248>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b0:	f7ff fb9a 	bl	8000ae8 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b8:	f7ff fb96 	bl	8000ae8 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e167      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ca:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 80013cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f0      	beq.n	80013b8 <HAL_RCC_OscConfig+0x200>
 80013d6:	e01b      	b.n	8001410 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013d8:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <HAL_RCC_OscConfig+0x248>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013de:	f7ff fb83 	bl	8000ae8 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e4:	e00e      	b.n	8001404 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e6:	f7ff fb7f 	bl	8000ae8 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d907      	bls.n	8001404 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e150      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
 80013f8:	40023800 	.word	0x40023800
 80013fc:	42470000 	.word	0x42470000
 8001400:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001404:	4b88      	ldr	r3, [pc, #544]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 8001406:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1ea      	bne.n	80013e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 8097 	beq.w	800154c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001422:	4b81      	ldr	r3, [pc, #516]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10f      	bne.n	800144e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	4b7d      	ldr	r3, [pc, #500]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001436:	4a7c      	ldr	r2, [pc, #496]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 8001438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800143c:	6413      	str	r3, [r2, #64]	@ 0x40
 800143e:	4b7a      	ldr	r3, [pc, #488]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800144a:	2301      	movs	r3, #1
 800144c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144e:	4b77      	ldr	r3, [pc, #476]	@ (800162c <HAL_RCC_OscConfig+0x474>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001456:	2b00      	cmp	r3, #0
 8001458:	d118      	bne.n	800148c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800145a:	4b74      	ldr	r3, [pc, #464]	@ (800162c <HAL_RCC_OscConfig+0x474>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a73      	ldr	r2, [pc, #460]	@ (800162c <HAL_RCC_OscConfig+0x474>)
 8001460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001466:	f7ff fb3f 	bl	8000ae8 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800146e:	f7ff fb3b 	bl	8000ae8 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e10c      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001480:	4b6a      	ldr	r3, [pc, #424]	@ (800162c <HAL_RCC_OscConfig+0x474>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0f0      	beq.n	800146e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d106      	bne.n	80014a2 <HAL_RCC_OscConfig+0x2ea>
 8001494:	4b64      	ldr	r3, [pc, #400]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 8001496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001498:	4a63      	ldr	r2, [pc, #396]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	6713      	str	r3, [r2, #112]	@ 0x70
 80014a0:	e01c      	b.n	80014dc <HAL_RCC_OscConfig+0x324>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b05      	cmp	r3, #5
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x30c>
 80014aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 80014ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ae:	4a5e      	ldr	r2, [pc, #376]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 80014b0:	f043 0304 	orr.w	r3, r3, #4
 80014b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80014b6:	4b5c      	ldr	r3, [pc, #368]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 80014b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ba:	4a5b      	ldr	r2, [pc, #364]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80014c2:	e00b      	b.n	80014dc <HAL_RCC_OscConfig+0x324>
 80014c4:	4b58      	ldr	r3, [pc, #352]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 80014c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014c8:	4a57      	ldr	r2, [pc, #348]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 80014ca:	f023 0301 	bic.w	r3, r3, #1
 80014ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80014d0:	4b55      	ldr	r3, [pc, #340]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 80014d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014d4:	4a54      	ldr	r2, [pc, #336]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 80014d6:	f023 0304 	bic.w	r3, r3, #4
 80014da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d015      	beq.n	8001510 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e4:	f7ff fb00 	bl	8000ae8 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ea:	e00a      	b.n	8001502 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ec:	f7ff fafc 	bl	8000ae8 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e0cb      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001502:	4b49      	ldr	r3, [pc, #292]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 8001504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0ee      	beq.n	80014ec <HAL_RCC_OscConfig+0x334>
 800150e:	e014      	b.n	800153a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001510:	f7ff faea 	bl	8000ae8 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001516:	e00a      	b.n	800152e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001518:	f7ff fae6 	bl	8000ae8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001526:	4293      	cmp	r3, r2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e0b5      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800152e:	4b3e      	ldr	r3, [pc, #248]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1ee      	bne.n	8001518 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d105      	bne.n	800154c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001540:	4b39      	ldr	r3, [pc, #228]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001544:	4a38      	ldr	r2, [pc, #224]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 8001546:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800154a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 80a1 	beq.w	8001698 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001556:	4b34      	ldr	r3, [pc, #208]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b08      	cmp	r3, #8
 8001560:	d05c      	beq.n	800161c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d141      	bne.n	80015ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800156a:	4b31      	ldr	r3, [pc, #196]	@ (8001630 <HAL_RCC_OscConfig+0x478>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff faba 	bl	8000ae8 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001578:	f7ff fab6 	bl	8000ae8 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e087      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158a:	4b27      	ldr	r3, [pc, #156]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69da      	ldr	r2, [r3, #28]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a4:	019b      	lsls	r3, r3, #6
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ac:	085b      	lsrs	r3, r3, #1
 80015ae:	3b01      	subs	r3, #1
 80015b0:	041b      	lsls	r3, r3, #16
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b8:	061b      	lsls	r3, r3, #24
 80015ba:	491b      	ldr	r1, [pc, #108]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001630 <HAL_RCC_OscConfig+0x478>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c6:	f7ff fa8f 	bl	8000ae8 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ce:	f7ff fa8b 	bl	8000ae8 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e05c      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0x416>
 80015ec:	e054      	b.n	8001698 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ee:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <HAL_RCC_OscConfig+0x478>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fa78 	bl	8000ae8 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015fc:	f7ff fa74 	bl	8000ae8 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e045      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x444>
 800161a:	e03d      	b.n	8001698 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d107      	bne.n	8001634 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e038      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
 8001628:	40023800 	.word	0x40023800
 800162c:	40007000 	.word	0x40007000
 8001630:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001634:	4b1b      	ldr	r3, [pc, #108]	@ (80016a4 <HAL_RCC_OscConfig+0x4ec>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d028      	beq.n	8001694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800164c:	429a      	cmp	r2, r3
 800164e:	d121      	bne.n	8001694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165a:	429a      	cmp	r2, r3
 800165c:	d11a      	bne.n	8001694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001664:	4013      	ands	r3, r2
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800166a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800166c:	4293      	cmp	r3, r2
 800166e:	d111      	bne.n	8001694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800167a:	085b      	lsrs	r3, r3, #1
 800167c:	3b01      	subs	r3, #1
 800167e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001680:	429a      	cmp	r2, r3
 8001682:	d107      	bne.n	8001694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800168e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001690:	429a      	cmp	r2, r3
 8001692:	d001      	beq.n	8001698 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e000      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800

080016a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0cc      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016bc:	4b68      	ldr	r3, [pc, #416]	@ (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d90c      	bls.n	80016e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ca:	4b65      	ldr	r3, [pc, #404]	@ (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d2:	4b63      	ldr	r3, [pc, #396]	@ (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d001      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e0b8      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d020      	beq.n	8001732 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016fc:	4b59      	ldr	r3, [pc, #356]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	4a58      	ldr	r2, [pc, #352]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001706:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001714:	4b53      	ldr	r3, [pc, #332]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	4a52      	ldr	r2, [pc, #328]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800171e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001720:	4b50      	ldr	r3, [pc, #320]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	494d      	ldr	r1, [pc, #308]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	4313      	orrs	r3, r2
 8001730:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d044      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d107      	bne.n	8001756 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001746:	4b47      	ldr	r3, [pc, #284]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d119      	bne.n	8001786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e07f      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d003      	beq.n	8001766 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001762:	2b03      	cmp	r3, #3
 8001764:	d107      	bne.n	8001776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001766:	4b3f      	ldr	r3, [pc, #252]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d109      	bne.n	8001786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e06f      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001776:	4b3b      	ldr	r3, [pc, #236]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e067      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001786:	4b37      	ldr	r3, [pc, #220]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f023 0203 	bic.w	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	4934      	ldr	r1, [pc, #208]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	4313      	orrs	r3, r2
 8001796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001798:	f7ff f9a6 	bl	8000ae8 <HAL_GetTick>
 800179c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179e:	e00a      	b.n	80017b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a0:	f7ff f9a2 	bl	8000ae8 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e04f      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 020c 	and.w	r2, r3, #12
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d1eb      	bne.n	80017a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017c8:	4b25      	ldr	r3, [pc, #148]	@ (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d20c      	bcs.n	80017f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d6:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017de:	4b20      	ldr	r3, [pc, #128]	@ (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e032      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d008      	beq.n	800180e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017fc:	4b19      	ldr	r3, [pc, #100]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	4916      	ldr	r1, [pc, #88]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	4313      	orrs	r3, r2
 800180c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b00      	cmp	r3, #0
 8001818:	d009      	beq.n	800182e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800181a:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	490e      	ldr	r1, [pc, #56]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800182e:	f000 f821 	bl	8001874 <HAL_RCC_GetSysClockFreq>
 8001832:	4602      	mov	r2, r0
 8001834:	4b0b      	ldr	r3, [pc, #44]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	091b      	lsrs	r3, r3, #4
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	490a      	ldr	r1, [pc, #40]	@ (8001868 <HAL_RCC_ClockConfig+0x1c0>)
 8001840:	5ccb      	ldrb	r3, [r1, r3]
 8001842:	fa22 f303 	lsr.w	r3, r2, r3
 8001846:	4a09      	ldr	r2, [pc, #36]	@ (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800184a:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <HAL_RCC_ClockConfig+0x1c8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff f906 	bl	8000a60 <HAL_InitTick>

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023c00 	.word	0x40023c00
 8001864:	40023800 	.word	0x40023800
 8001868:	08002914 	.word	0x08002914
 800186c:	20000000 	.word	0x20000000
 8001870:	20000004 	.word	0x20000004

08001874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001878:	b090      	sub	sp, #64	@ 0x40
 800187a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800188c:	4b59      	ldr	r3, [pc, #356]	@ (80019f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b08      	cmp	r3, #8
 8001896:	d00d      	beq.n	80018b4 <HAL_RCC_GetSysClockFreq+0x40>
 8001898:	2b08      	cmp	r3, #8
 800189a:	f200 80a1 	bhi.w	80019e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d002      	beq.n	80018a8 <HAL_RCC_GetSysClockFreq+0x34>
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d003      	beq.n	80018ae <HAL_RCC_GetSysClockFreq+0x3a>
 80018a6:	e09b      	b.n	80019e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018a8:	4b53      	ldr	r3, [pc, #332]	@ (80019f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80018aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018ac:	e09b      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018ae:	4b53      	ldr	r3, [pc, #332]	@ (80019fc <HAL_RCC_GetSysClockFreq+0x188>)
 80018b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018b2:	e098      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018b4:	4b4f      	ldr	r3, [pc, #316]	@ (80019f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018be:	4b4d      	ldr	r3, [pc, #308]	@ (80019f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d028      	beq.n	800191c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ca:	4b4a      	ldr	r3, [pc, #296]	@ (80019f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	099b      	lsrs	r3, r3, #6
 80018d0:	2200      	movs	r2, #0
 80018d2:	623b      	str	r3, [r7, #32]
 80018d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80018d6:	6a3b      	ldr	r3, [r7, #32]
 80018d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80018dc:	2100      	movs	r1, #0
 80018de:	4b47      	ldr	r3, [pc, #284]	@ (80019fc <HAL_RCC_GetSysClockFreq+0x188>)
 80018e0:	fb03 f201 	mul.w	r2, r3, r1
 80018e4:	2300      	movs	r3, #0
 80018e6:	fb00 f303 	mul.w	r3, r0, r3
 80018ea:	4413      	add	r3, r2
 80018ec:	4a43      	ldr	r2, [pc, #268]	@ (80019fc <HAL_RCC_GetSysClockFreq+0x188>)
 80018ee:	fba0 1202 	umull	r1, r2, r0, r2
 80018f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018f4:	460a      	mov	r2, r1
 80018f6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80018f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018fa:	4413      	add	r3, r2
 80018fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001900:	2200      	movs	r2, #0
 8001902:	61bb      	str	r3, [r7, #24]
 8001904:	61fa      	str	r2, [r7, #28]
 8001906:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800190a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800190e:	f7fe fc63 	bl	80001d8 <__aeabi_uldivmod>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4613      	mov	r3, r2
 8001918:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800191a:	e053      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800191c:	4b35      	ldr	r3, [pc, #212]	@ (80019f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	099b      	lsrs	r3, r3, #6
 8001922:	2200      	movs	r2, #0
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	617a      	str	r2, [r7, #20]
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800192e:	f04f 0b00 	mov.w	fp, #0
 8001932:	4652      	mov	r2, sl
 8001934:	465b      	mov	r3, fp
 8001936:	f04f 0000 	mov.w	r0, #0
 800193a:	f04f 0100 	mov.w	r1, #0
 800193e:	0159      	lsls	r1, r3, #5
 8001940:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001944:	0150      	lsls	r0, r2, #5
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	ebb2 080a 	subs.w	r8, r2, sl
 800194e:	eb63 090b 	sbc.w	r9, r3, fp
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800195e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001962:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001966:	ebb2 0408 	subs.w	r4, r2, r8
 800196a:	eb63 0509 	sbc.w	r5, r3, r9
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	f04f 0300 	mov.w	r3, #0
 8001976:	00eb      	lsls	r3, r5, #3
 8001978:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800197c:	00e2      	lsls	r2, r4, #3
 800197e:	4614      	mov	r4, r2
 8001980:	461d      	mov	r5, r3
 8001982:	eb14 030a 	adds.w	r3, r4, sl
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	eb45 030b 	adc.w	r3, r5, fp
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	e9d7 4500 	ldrd	r4, r5, [r7]
 800199a:	4629      	mov	r1, r5
 800199c:	028b      	lsls	r3, r1, #10
 800199e:	4621      	mov	r1, r4
 80019a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019a4:	4621      	mov	r1, r4
 80019a6:	028a      	lsls	r2, r1, #10
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019ae:	2200      	movs	r2, #0
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	60fa      	str	r2, [r7, #12]
 80019b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019b8:	f7fe fc0e 	bl	80001d8 <__aeabi_uldivmod>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4613      	mov	r3, r2
 80019c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80019c4:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	0c1b      	lsrs	r3, r3, #16
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	3301      	adds	r3, #1
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80019d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80019d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019de:	e002      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019e0:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80019e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3740      	adds	r7, #64	@ 0x40
 80019ec:	46bd      	mov	sp, r7
 80019ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800
 80019f8:	00f42400 	.word	0x00f42400
 80019fc:	017d7840 	.word	0x017d7840

08001a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a04:	4b03      	ldr	r3, [pc, #12]	@ (8001a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000000 	.word	0x20000000

08001a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a1c:	f7ff fff0 	bl	8001a00 <HAL_RCC_GetHCLKFreq>
 8001a20:	4602      	mov	r2, r0
 8001a22:	4b05      	ldr	r3, [pc, #20]	@ (8001a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	0a9b      	lsrs	r3, r3, #10
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	4903      	ldr	r1, [pc, #12]	@ (8001a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a2e:	5ccb      	ldrb	r3, [r1, r3]
 8001a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	08002924 	.word	0x08002924

08001a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a44:	f7ff ffdc 	bl	8001a00 <HAL_RCC_GetHCLKFreq>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	0b5b      	lsrs	r3, r3, #13
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	4903      	ldr	r1, [pc, #12]	@ (8001a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a56:	5ccb      	ldrb	r3, [r1, r3]
 8001a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40023800 	.word	0x40023800
 8001a64:	08002924 	.word	0x08002924

08001a68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e042      	b.n	8001b00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d106      	bne.n	8001a94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7fe feb8 	bl	8000804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2224      	movs	r2, #36	@ 0x24
 8001a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001aaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 fc85 	bl	80023bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ac0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	695a      	ldr	r2, [r3, #20]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ad0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ae0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2220      	movs	r2, #32
 8001aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2220      	movs	r2, #32
 8001af4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b0ba      	sub	sp, #232	@ 0xe8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001b46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10f      	bne.n	8001b6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001b52:	f003 0320 	and.w	r3, r3, #32
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d009      	beq.n	8001b6e <HAL_UART_IRQHandler+0x66>
 8001b5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001b5e:	f003 0320 	and.w	r3, r3, #32
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 fb69 	bl	800223e <UART_Receive_IT>
      return;
 8001b6c:	e25b      	b.n	8002026 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001b6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 80de 	beq.w	8001d34 <HAL_UART_IRQHandler+0x22c>
 8001b78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d106      	bne.n	8001b92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001b88:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 80d1 	beq.w	8001d34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00b      	beq.n	8001bb6 <HAL_UART_IRQHandler+0xae>
 8001b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d005      	beq.n	8001bb6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bae:	f043 0201 	orr.w	r2, r3, #1
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00b      	beq.n	8001bda <HAL_UART_IRQHandler+0xd2>
 8001bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd2:	f043 0202 	orr.w	r2, r3, #2
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00b      	beq.n	8001bfe <HAL_UART_IRQHandler+0xf6>
 8001be6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d005      	beq.n	8001bfe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf6:	f043 0204 	orr.w	r2, r3, #4
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d011      	beq.n	8001c2e <HAL_UART_IRQHandler+0x126>
 8001c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c0e:	f003 0320 	and.w	r3, r3, #32
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d105      	bne.n	8001c22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001c16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d005      	beq.n	8001c2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	f043 0208 	orr.w	r2, r3, #8
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 81f2 	beq.w	800201c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c3c:	f003 0320 	and.w	r3, r3, #32
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d008      	beq.n	8001c56 <HAL_UART_IRQHandler+0x14e>
 8001c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c48:	f003 0320 	and.w	r3, r3, #32
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 faf4 	bl	800223e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c60:	2b40      	cmp	r3, #64	@ 0x40
 8001c62:	bf0c      	ite	eq
 8001c64:	2301      	moveq	r3, #1
 8001c66:	2300      	movne	r3, #0
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d103      	bne.n	8001c82 <HAL_UART_IRQHandler+0x17a>
 8001c7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d04f      	beq.n	8001d22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f9fc 	bl	8002080 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c92:	2b40      	cmp	r3, #64	@ 0x40
 8001c94:	d141      	bne.n	8001d1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	3314      	adds	r3, #20
 8001c9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ca0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ca4:	e853 3f00 	ldrex	r3, [r3]
 8001ca8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001cac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001cb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001cb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	3314      	adds	r3, #20
 8001cbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001cc2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001cc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001cce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001cd2:	e841 2300 	strex	r3, r2, [r1]
 8001cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001cda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1d9      	bne.n	8001c96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d013      	beq.n	8001d12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cee:	4a7e      	ldr	r2, [pc, #504]	@ (8001ee8 <HAL_UART_IRQHandler+0x3e0>)
 8001cf0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff f883 	bl	8000e02 <HAL_DMA_Abort_IT>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d016      	beq.n	8001d30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d10:	e00e      	b.n	8001d30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f99e 	bl	8002054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d18:	e00a      	b.n	8001d30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f99a 	bl	8002054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d20:	e006      	b.n	8001d30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f996 	bl	8002054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001d2e:	e175      	b.n	800201c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d30:	bf00      	nop
    return;
 8001d32:	e173      	b.n	800201c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	f040 814f 	bne.w	8001fdc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d42:	f003 0310 	and.w	r3, r3, #16
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 8148 	beq.w	8001fdc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d50:	f003 0310 	and.w	r3, r3, #16
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 8141 	beq.w	8001fdc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d7a:	2b40      	cmp	r3, #64	@ 0x40
 8001d7c:	f040 80b6 	bne.w	8001eec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001d8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 8145 	beq.w	8002020 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001d9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	f080 813e 	bcs.w	8002020 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001daa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001db6:	f000 8088 	beq.w	8001eca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	330c      	adds	r3, #12
 8001dc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001dc8:	e853 3f00 	ldrex	r3, [r3]
 8001dcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001dd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001dd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001dd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	330c      	adds	r3, #12
 8001de2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001de6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001dea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001df2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001df6:	e841 2300 	strex	r3, r2, [r1]
 8001dfa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001dfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1d9      	bne.n	8001dba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	3314      	adds	r3, #20
 8001e0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e10:	e853 3f00 	ldrex	r3, [r3]
 8001e14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001e16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e18:	f023 0301 	bic.w	r3, r3, #1
 8001e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	3314      	adds	r3, #20
 8001e26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001e2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001e2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001e32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001e36:	e841 2300 	strex	r3, r2, [r1]
 8001e3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001e3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1e1      	bne.n	8001e06 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	3314      	adds	r3, #20
 8001e48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e4c:	e853 3f00 	ldrex	r3, [r3]
 8001e50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001e52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	3314      	adds	r3, #20
 8001e62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001e66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001e68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001e6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001e6e:	e841 2300 	strex	r3, r2, [r1]
 8001e72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001e74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1e3      	bne.n	8001e42 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	330c      	adds	r3, #12
 8001e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e92:	e853 3f00 	ldrex	r3, [r3]
 8001e96:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001e98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e9a:	f023 0310 	bic.w	r3, r3, #16
 8001e9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	330c      	adds	r3, #12
 8001ea8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001eac:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001eae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eb0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001eb2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001eb4:	e841 2300 	strex	r3, r2, [r1]
 8001eb8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001eba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1e3      	bne.n	8001e88 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe ff2c 	bl	8000d22 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2202      	movs	r2, #2
 8001ece:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	4619      	mov	r1, r3
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f8c1 	bl	8002068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001ee6:	e09b      	b.n	8002020 <HAL_UART_IRQHandler+0x518>
 8001ee8:	08002147 	.word	0x08002147
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 808e 	beq.w	8002024 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001f08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 8089 	beq.w	8002024 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	330c      	adds	r3, #12
 8001f18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f1c:	e853 3f00 	ldrex	r3, [r3]
 8001f20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001f28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	330c      	adds	r3, #12
 8001f32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8001f36:	647a      	str	r2, [r7, #68]	@ 0x44
 8001f38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001f3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001f3e:	e841 2300 	strex	r3, r2, [r1]
 8001f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001f44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1e3      	bne.n	8001f12 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	3314      	adds	r3, #20
 8001f50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f54:	e853 3f00 	ldrex	r3, [r3]
 8001f58:	623b      	str	r3, [r7, #32]
   return(result);
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	f023 0301 	bic.w	r3, r3, #1
 8001f60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	3314      	adds	r3, #20
 8001f6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001f6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8001f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001f74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f76:	e841 2300 	strex	r3, r2, [r1]
 8001f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1e3      	bne.n	8001f4a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2220      	movs	r2, #32
 8001f86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	330c      	adds	r3, #12
 8001f96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	e853 3f00 	ldrex	r3, [r3]
 8001f9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f023 0310 	bic.w	r3, r3, #16
 8001fa6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	330c      	adds	r3, #12
 8001fb0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001fb4:	61fa      	str	r2, [r7, #28]
 8001fb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fb8:	69b9      	ldr	r1, [r7, #24]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	e841 2300 	strex	r3, r2, [r1]
 8001fc0:	617b      	str	r3, [r7, #20]
   return(result);
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1e3      	bne.n	8001f90 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001fce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f847 	bl	8002068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001fda:	e023      	b.n	8002024 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d009      	beq.n	8001ffc <HAL_UART_IRQHandler+0x4f4>
 8001fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f8ba 	bl	800216e <UART_Transmit_IT>
    return;
 8001ffa:	e014      	b.n	8002026 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00e      	beq.n	8002026 <HAL_UART_IRQHandler+0x51e>
 8002008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800200c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f8fa 	bl	800220e <UART_EndTransmit_IT>
    return;
 800201a:	e004      	b.n	8002026 <HAL_UART_IRQHandler+0x51e>
    return;
 800201c:	bf00      	nop
 800201e:	e002      	b.n	8002026 <HAL_UART_IRQHandler+0x51e>
      return;
 8002020:	bf00      	nop
 8002022:	e000      	b.n	8002026 <HAL_UART_IRQHandler+0x51e>
      return;
 8002024:	bf00      	nop
  }
}
 8002026:	37e8      	adds	r7, #232	@ 0xe8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002080:	b480      	push	{r7}
 8002082:	b095      	sub	sp, #84	@ 0x54
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	330c      	adds	r3, #12
 800208e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002092:	e853 3f00 	ldrex	r3, [r3]
 8002096:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800209a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800209e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	330c      	adds	r3, #12
 80020a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80020aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80020ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80020b0:	e841 2300 	strex	r3, r2, [r1]
 80020b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80020b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1e5      	bne.n	8002088 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	3314      	adds	r3, #20
 80020c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	e853 3f00 	ldrex	r3, [r3]
 80020ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f023 0301 	bic.w	r3, r3, #1
 80020d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	3314      	adds	r3, #20
 80020da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80020dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80020de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020e4:	e841 2300 	strex	r3, r2, [r1]
 80020e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80020ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1e5      	bne.n	80020bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d119      	bne.n	800212c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	330c      	adds	r3, #12
 80020fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	e853 3f00 	ldrex	r3, [r3]
 8002106:	60bb      	str	r3, [r7, #8]
   return(result);
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	f023 0310 	bic.w	r3, r3, #16
 800210e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	330c      	adds	r3, #12
 8002116:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002118:	61ba      	str	r2, [r7, #24]
 800211a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800211c:	6979      	ldr	r1, [r7, #20]
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	e841 2300 	strex	r3, r2, [r1]
 8002124:	613b      	str	r3, [r7, #16]
   return(result);
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1e5      	bne.n	80020f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2220      	movs	r2, #32
 8002130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800213a:	bf00      	nop
 800213c:	3754      	adds	r7, #84	@ 0x54
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b084      	sub	sp, #16
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002152:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f7ff ff77 	bl	8002054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002166:	bf00      	nop
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800216e:	b480      	push	{r7}
 8002170:	b085      	sub	sp, #20
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b21      	cmp	r3, #33	@ 0x21
 8002180:	d13e      	bne.n	8002200 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800218a:	d114      	bne.n	80021b6 <UART_Transmit_IT+0x48>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d110      	bne.n	80021b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	461a      	mov	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	1c9a      	adds	r2, r3, #2
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	621a      	str	r2, [r3, #32]
 80021b4:	e008      	b.n	80021c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	1c59      	adds	r1, r3, #1
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6211      	str	r1, [r2, #32]
 80021c0:	781a      	ldrb	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	3b01      	subs	r3, #1
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	4619      	mov	r1, r3
 80021d6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10f      	bne.n	80021fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	e000      	b.n	8002202 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002200:	2302      	movs	r3, #2
  }
}
 8002202:	4618      	mov	r0, r3
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002224:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2220      	movs	r2, #32
 800222a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff fefc 	bl	800202c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b08c      	sub	sp, #48	@ 0x30
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b22      	cmp	r3, #34	@ 0x22
 8002250:	f040 80ae 	bne.w	80023b0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800225c:	d117      	bne.n	800228e <UART_Receive_IT+0x50>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d113      	bne.n	800228e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002266:	2300      	movs	r3, #0
 8002268:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	b29b      	uxth	r3, r3
 8002278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800227c:	b29a      	uxth	r2, r3
 800227e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002280:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002286:	1c9a      	adds	r2, r3, #2
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	629a      	str	r2, [r3, #40]	@ 0x28
 800228c:	e026      	b.n	80022dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002292:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002294:	2300      	movs	r3, #0
 8002296:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022a0:	d007      	beq.n	80022b2 <UART_Receive_IT+0x74>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10a      	bne.n	80022c0 <UART_Receive_IT+0x82>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d106      	bne.n	80022c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022bc:	701a      	strb	r2, [r3, #0]
 80022be:	e008      	b.n	80022d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	3b01      	subs	r3, #1
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	4619      	mov	r1, r3
 80022ea:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d15d      	bne.n	80023ac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0220 	bic.w	r2, r2, #32
 80022fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800230e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695a      	ldr	r2, [r3, #20]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0201 	bic.w	r2, r2, #1
 800231e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002332:	2b01      	cmp	r3, #1
 8002334:	d135      	bne.n	80023a2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	330c      	adds	r3, #12
 8002342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	e853 3f00 	ldrex	r3, [r3]
 800234a:	613b      	str	r3, [r7, #16]
   return(result);
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	f023 0310 	bic.w	r3, r3, #16
 8002352:	627b      	str	r3, [r7, #36]	@ 0x24
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	330c      	adds	r3, #12
 800235a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800235c:	623a      	str	r2, [r7, #32]
 800235e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002360:	69f9      	ldr	r1, [r7, #28]
 8002362:	6a3a      	ldr	r2, [r7, #32]
 8002364:	e841 2300 	strex	r3, r2, [r1]
 8002368:	61bb      	str	r3, [r7, #24]
   return(result);
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1e5      	bne.n	800233c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	2b10      	cmp	r3, #16
 800237c:	d10a      	bne.n	8002394 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002398:	4619      	mov	r1, r3
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff fe64 	bl	8002068 <HAL_UARTEx_RxEventCallback>
 80023a0:	e002      	b.n	80023a8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff fe4c 	bl	8002040 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80023a8:	2300      	movs	r3, #0
 80023aa:	e002      	b.n	80023b2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	e000      	b.n	80023b2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80023b0:	2302      	movs	r3, #2
  }
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3730      	adds	r7, #48	@ 0x30
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023c0:	b0c0      	sub	sp, #256	@ 0x100
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80023d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023d8:	68d9      	ldr	r1, [r3, #12]
 80023da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	ea40 0301 	orr.w	r3, r0, r1
 80023e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	431a      	orrs	r2, r3
 80023f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	431a      	orrs	r2, r3
 80023fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	4313      	orrs	r3, r2
 8002404:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002414:	f021 010c 	bic.w	r1, r1, #12
 8002418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002422:	430b      	orrs	r3, r1
 8002424:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002436:	6999      	ldr	r1, [r3, #24]
 8002438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	ea40 0301 	orr.w	r3, r0, r1
 8002442:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	4b8f      	ldr	r3, [pc, #572]	@ (8002688 <UART_SetConfig+0x2cc>)
 800244c:	429a      	cmp	r2, r3
 800244e:	d005      	beq.n	800245c <UART_SetConfig+0xa0>
 8002450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	4b8d      	ldr	r3, [pc, #564]	@ (800268c <UART_SetConfig+0x2d0>)
 8002458:	429a      	cmp	r2, r3
 800245a:	d104      	bne.n	8002466 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800245c:	f7ff faf0 	bl	8001a40 <HAL_RCC_GetPCLK2Freq>
 8002460:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002464:	e003      	b.n	800246e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002466:	f7ff fad7 	bl	8001a18 <HAL_RCC_GetPCLK1Freq>
 800246a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800246e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002478:	f040 810c 	bne.w	8002694 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800247c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002480:	2200      	movs	r2, #0
 8002482:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002486:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800248a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800248e:	4622      	mov	r2, r4
 8002490:	462b      	mov	r3, r5
 8002492:	1891      	adds	r1, r2, r2
 8002494:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002496:	415b      	adcs	r3, r3
 8002498:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800249a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800249e:	4621      	mov	r1, r4
 80024a0:	eb12 0801 	adds.w	r8, r2, r1
 80024a4:	4629      	mov	r1, r5
 80024a6:	eb43 0901 	adc.w	r9, r3, r1
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	f04f 0300 	mov.w	r3, #0
 80024b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024be:	4690      	mov	r8, r2
 80024c0:	4699      	mov	r9, r3
 80024c2:	4623      	mov	r3, r4
 80024c4:	eb18 0303 	adds.w	r3, r8, r3
 80024c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80024cc:	462b      	mov	r3, r5
 80024ce:	eb49 0303 	adc.w	r3, r9, r3
 80024d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80024d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80024e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80024e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80024ea:	460b      	mov	r3, r1
 80024ec:	18db      	adds	r3, r3, r3
 80024ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80024f0:	4613      	mov	r3, r2
 80024f2:	eb42 0303 	adc.w	r3, r2, r3
 80024f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80024f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80024fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002500:	f7fd fe6a 	bl	80001d8 <__aeabi_uldivmod>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4b61      	ldr	r3, [pc, #388]	@ (8002690 <UART_SetConfig+0x2d4>)
 800250a:	fba3 2302 	umull	r2, r3, r3, r2
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	011c      	lsls	r4, r3, #4
 8002512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002516:	2200      	movs	r2, #0
 8002518:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800251c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002520:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002524:	4642      	mov	r2, r8
 8002526:	464b      	mov	r3, r9
 8002528:	1891      	adds	r1, r2, r2
 800252a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800252c:	415b      	adcs	r3, r3
 800252e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002530:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002534:	4641      	mov	r1, r8
 8002536:	eb12 0a01 	adds.w	sl, r2, r1
 800253a:	4649      	mov	r1, r9
 800253c:	eb43 0b01 	adc.w	fp, r3, r1
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	f04f 0300 	mov.w	r3, #0
 8002548:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800254c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002550:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002554:	4692      	mov	sl, r2
 8002556:	469b      	mov	fp, r3
 8002558:	4643      	mov	r3, r8
 800255a:	eb1a 0303 	adds.w	r3, sl, r3
 800255e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002562:	464b      	mov	r3, r9
 8002564:	eb4b 0303 	adc.w	r3, fp, r3
 8002568:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800256c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002578:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800257c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002580:	460b      	mov	r3, r1
 8002582:	18db      	adds	r3, r3, r3
 8002584:	643b      	str	r3, [r7, #64]	@ 0x40
 8002586:	4613      	mov	r3, r2
 8002588:	eb42 0303 	adc.w	r3, r2, r3
 800258c:	647b      	str	r3, [r7, #68]	@ 0x44
 800258e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002592:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002596:	f7fd fe1f 	bl	80001d8 <__aeabi_uldivmod>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4611      	mov	r1, r2
 80025a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002690 <UART_SetConfig+0x2d4>)
 80025a2:	fba3 2301 	umull	r2, r3, r3, r1
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	2264      	movs	r2, #100	@ 0x64
 80025aa:	fb02 f303 	mul.w	r3, r2, r3
 80025ae:	1acb      	subs	r3, r1, r3
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80025b6:	4b36      	ldr	r3, [pc, #216]	@ (8002690 <UART_SetConfig+0x2d4>)
 80025b8:	fba3 2302 	umull	r2, r3, r3, r2
 80025bc:	095b      	lsrs	r3, r3, #5
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80025c4:	441c      	add	r4, r3
 80025c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025ca:	2200      	movs	r2, #0
 80025cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80025d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80025d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80025d8:	4642      	mov	r2, r8
 80025da:	464b      	mov	r3, r9
 80025dc:	1891      	adds	r1, r2, r2
 80025de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80025e0:	415b      	adcs	r3, r3
 80025e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80025e8:	4641      	mov	r1, r8
 80025ea:	1851      	adds	r1, r2, r1
 80025ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80025ee:	4649      	mov	r1, r9
 80025f0:	414b      	adcs	r3, r1
 80025f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002600:	4659      	mov	r1, fp
 8002602:	00cb      	lsls	r3, r1, #3
 8002604:	4651      	mov	r1, sl
 8002606:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800260a:	4651      	mov	r1, sl
 800260c:	00ca      	lsls	r2, r1, #3
 800260e:	4610      	mov	r0, r2
 8002610:	4619      	mov	r1, r3
 8002612:	4603      	mov	r3, r0
 8002614:	4642      	mov	r2, r8
 8002616:	189b      	adds	r3, r3, r2
 8002618:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800261c:	464b      	mov	r3, r9
 800261e:	460a      	mov	r2, r1
 8002620:	eb42 0303 	adc.w	r3, r2, r3
 8002624:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002634:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002638:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800263c:	460b      	mov	r3, r1
 800263e:	18db      	adds	r3, r3, r3
 8002640:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002642:	4613      	mov	r3, r2
 8002644:	eb42 0303 	adc.w	r3, r2, r3
 8002648:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800264a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800264e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002652:	f7fd fdc1 	bl	80001d8 <__aeabi_uldivmod>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4b0d      	ldr	r3, [pc, #52]	@ (8002690 <UART_SetConfig+0x2d4>)
 800265c:	fba3 1302 	umull	r1, r3, r3, r2
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	2164      	movs	r1, #100	@ 0x64
 8002664:	fb01 f303 	mul.w	r3, r1, r3
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	3332      	adds	r3, #50	@ 0x32
 800266e:	4a08      	ldr	r2, [pc, #32]	@ (8002690 <UART_SetConfig+0x2d4>)
 8002670:	fba2 2303 	umull	r2, r3, r2, r3
 8002674:	095b      	lsrs	r3, r3, #5
 8002676:	f003 0207 	and.w	r2, r3, #7
 800267a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4422      	add	r2, r4
 8002682:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002684:	e106      	b.n	8002894 <UART_SetConfig+0x4d8>
 8002686:	bf00      	nop
 8002688:	40011000 	.word	0x40011000
 800268c:	40011400 	.word	0x40011400
 8002690:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002698:	2200      	movs	r2, #0
 800269a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800269e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80026a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80026a6:	4642      	mov	r2, r8
 80026a8:	464b      	mov	r3, r9
 80026aa:	1891      	adds	r1, r2, r2
 80026ac:	6239      	str	r1, [r7, #32]
 80026ae:	415b      	adcs	r3, r3
 80026b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80026b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026b6:	4641      	mov	r1, r8
 80026b8:	1854      	adds	r4, r2, r1
 80026ba:	4649      	mov	r1, r9
 80026bc:	eb43 0501 	adc.w	r5, r3, r1
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	00eb      	lsls	r3, r5, #3
 80026ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026ce:	00e2      	lsls	r2, r4, #3
 80026d0:	4614      	mov	r4, r2
 80026d2:	461d      	mov	r5, r3
 80026d4:	4643      	mov	r3, r8
 80026d6:	18e3      	adds	r3, r4, r3
 80026d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80026dc:	464b      	mov	r3, r9
 80026de:	eb45 0303 	adc.w	r3, r5, r3
 80026e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80026e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80026f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002702:	4629      	mov	r1, r5
 8002704:	008b      	lsls	r3, r1, #2
 8002706:	4621      	mov	r1, r4
 8002708:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800270c:	4621      	mov	r1, r4
 800270e:	008a      	lsls	r2, r1, #2
 8002710:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002714:	f7fd fd60 	bl	80001d8 <__aeabi_uldivmod>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4b60      	ldr	r3, [pc, #384]	@ (80028a0 <UART_SetConfig+0x4e4>)
 800271e:	fba3 2302 	umull	r2, r3, r3, r2
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	011c      	lsls	r4, r3, #4
 8002726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800272a:	2200      	movs	r2, #0
 800272c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002730:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002734:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002738:	4642      	mov	r2, r8
 800273a:	464b      	mov	r3, r9
 800273c:	1891      	adds	r1, r2, r2
 800273e:	61b9      	str	r1, [r7, #24]
 8002740:	415b      	adcs	r3, r3
 8002742:	61fb      	str	r3, [r7, #28]
 8002744:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002748:	4641      	mov	r1, r8
 800274a:	1851      	adds	r1, r2, r1
 800274c:	6139      	str	r1, [r7, #16]
 800274e:	4649      	mov	r1, r9
 8002750:	414b      	adcs	r3, r1
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002760:	4659      	mov	r1, fp
 8002762:	00cb      	lsls	r3, r1, #3
 8002764:	4651      	mov	r1, sl
 8002766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800276a:	4651      	mov	r1, sl
 800276c:	00ca      	lsls	r2, r1, #3
 800276e:	4610      	mov	r0, r2
 8002770:	4619      	mov	r1, r3
 8002772:	4603      	mov	r3, r0
 8002774:	4642      	mov	r2, r8
 8002776:	189b      	adds	r3, r3, r2
 8002778:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800277c:	464b      	mov	r3, r9
 800277e:	460a      	mov	r2, r1
 8002780:	eb42 0303 	adc.w	r3, r2, r3
 8002784:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002792:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80027a0:	4649      	mov	r1, r9
 80027a2:	008b      	lsls	r3, r1, #2
 80027a4:	4641      	mov	r1, r8
 80027a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027aa:	4641      	mov	r1, r8
 80027ac:	008a      	lsls	r2, r1, #2
 80027ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80027b2:	f7fd fd11 	bl	80001d8 <__aeabi_uldivmod>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	4611      	mov	r1, r2
 80027bc:	4b38      	ldr	r3, [pc, #224]	@ (80028a0 <UART_SetConfig+0x4e4>)
 80027be:	fba3 2301 	umull	r2, r3, r3, r1
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	2264      	movs	r2, #100	@ 0x64
 80027c6:	fb02 f303 	mul.w	r3, r2, r3
 80027ca:	1acb      	subs	r3, r1, r3
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	3332      	adds	r3, #50	@ 0x32
 80027d0:	4a33      	ldr	r2, [pc, #204]	@ (80028a0 <UART_SetConfig+0x4e4>)
 80027d2:	fba2 2303 	umull	r2, r3, r2, r3
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027dc:	441c      	add	r4, r3
 80027de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027e2:	2200      	movs	r2, #0
 80027e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80027e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80027e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80027ec:	4642      	mov	r2, r8
 80027ee:	464b      	mov	r3, r9
 80027f0:	1891      	adds	r1, r2, r2
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	415b      	adcs	r3, r3
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027fc:	4641      	mov	r1, r8
 80027fe:	1851      	adds	r1, r2, r1
 8002800:	6039      	str	r1, [r7, #0]
 8002802:	4649      	mov	r1, r9
 8002804:	414b      	adcs	r3, r1
 8002806:	607b      	str	r3, [r7, #4]
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002814:	4659      	mov	r1, fp
 8002816:	00cb      	lsls	r3, r1, #3
 8002818:	4651      	mov	r1, sl
 800281a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800281e:	4651      	mov	r1, sl
 8002820:	00ca      	lsls	r2, r1, #3
 8002822:	4610      	mov	r0, r2
 8002824:	4619      	mov	r1, r3
 8002826:	4603      	mov	r3, r0
 8002828:	4642      	mov	r2, r8
 800282a:	189b      	adds	r3, r3, r2
 800282c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800282e:	464b      	mov	r3, r9
 8002830:	460a      	mov	r2, r1
 8002832:	eb42 0303 	adc.w	r3, r2, r3
 8002836:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	663b      	str	r3, [r7, #96]	@ 0x60
 8002842:	667a      	str	r2, [r7, #100]	@ 0x64
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002850:	4649      	mov	r1, r9
 8002852:	008b      	lsls	r3, r1, #2
 8002854:	4641      	mov	r1, r8
 8002856:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800285a:	4641      	mov	r1, r8
 800285c:	008a      	lsls	r2, r1, #2
 800285e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002862:	f7fd fcb9 	bl	80001d8 <__aeabi_uldivmod>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4b0d      	ldr	r3, [pc, #52]	@ (80028a0 <UART_SetConfig+0x4e4>)
 800286c:	fba3 1302 	umull	r1, r3, r3, r2
 8002870:	095b      	lsrs	r3, r3, #5
 8002872:	2164      	movs	r1, #100	@ 0x64
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	3332      	adds	r3, #50	@ 0x32
 800287e:	4a08      	ldr	r2, [pc, #32]	@ (80028a0 <UART_SetConfig+0x4e4>)
 8002880:	fba2 2303 	umull	r2, r3, r2, r3
 8002884:	095b      	lsrs	r3, r3, #5
 8002886:	f003 020f 	and.w	r2, r3, #15
 800288a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4422      	add	r2, r4
 8002892:	609a      	str	r2, [r3, #8]
}
 8002894:	bf00      	nop
 8002896:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800289a:	46bd      	mov	sp, r7
 800289c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028a0:	51eb851f 	.word	0x51eb851f

080028a4 <memset>:
 80028a4:	4402      	add	r2, r0
 80028a6:	4603      	mov	r3, r0
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d100      	bne.n	80028ae <memset+0xa>
 80028ac:	4770      	bx	lr
 80028ae:	f803 1b01 	strb.w	r1, [r3], #1
 80028b2:	e7f9      	b.n	80028a8 <memset+0x4>

080028b4 <__libc_init_array>:
 80028b4:	b570      	push	{r4, r5, r6, lr}
 80028b6:	4d0d      	ldr	r5, [pc, #52]	@ (80028ec <__libc_init_array+0x38>)
 80028b8:	4c0d      	ldr	r4, [pc, #52]	@ (80028f0 <__libc_init_array+0x3c>)
 80028ba:	1b64      	subs	r4, r4, r5
 80028bc:	10a4      	asrs	r4, r4, #2
 80028be:	2600      	movs	r6, #0
 80028c0:	42a6      	cmp	r6, r4
 80028c2:	d109      	bne.n	80028d8 <__libc_init_array+0x24>
 80028c4:	4d0b      	ldr	r5, [pc, #44]	@ (80028f4 <__libc_init_array+0x40>)
 80028c6:	4c0c      	ldr	r4, [pc, #48]	@ (80028f8 <__libc_init_array+0x44>)
 80028c8:	f000 f818 	bl	80028fc <_init>
 80028cc:	1b64      	subs	r4, r4, r5
 80028ce:	10a4      	asrs	r4, r4, #2
 80028d0:	2600      	movs	r6, #0
 80028d2:	42a6      	cmp	r6, r4
 80028d4:	d105      	bne.n	80028e2 <__libc_init_array+0x2e>
 80028d6:	bd70      	pop	{r4, r5, r6, pc}
 80028d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80028dc:	4798      	blx	r3
 80028de:	3601      	adds	r6, #1
 80028e0:	e7ee      	b.n	80028c0 <__libc_init_array+0xc>
 80028e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80028e6:	4798      	blx	r3
 80028e8:	3601      	adds	r6, #1
 80028ea:	e7f2      	b.n	80028d2 <__libc_init_array+0x1e>
 80028ec:	08002934 	.word	0x08002934
 80028f0:	08002934 	.word	0x08002934
 80028f4:	08002934 	.word	0x08002934
 80028f8:	08002938 	.word	0x08002938

080028fc <_init>:
 80028fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fe:	bf00      	nop
 8002900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002902:	bc08      	pop	{r3}
 8002904:	469e      	mov	lr, r3
 8002906:	4770      	bx	lr

08002908 <_fini>:
 8002908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290a:	bf00      	nop
 800290c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290e:	bc08      	pop	{r3}
 8002910:	469e      	mov	lr, r3
 8002912:	4770      	bx	lr
